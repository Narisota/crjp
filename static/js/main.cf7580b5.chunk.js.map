{"version":3,"sources":["accessToken.ts","routes/AuthRoute.tsx","components/Navbar.tsx","components/PageWrapper.tsx","generated/graphql.tsx","components/Products/AddProducts.tsx","components/Products/GetProductId.tsx","components/Products/ProductsMutations.tsx","components/Products/QueryHooks/GetProductsSections.tsx","components/Products/QueryHooks/GetProductOptions.tsx","components/Products/QueryHooks/GetProductShipping.tsx","components/Products/EditProduct.tsx","components/Products/QueryHooks/GetSections.tsx","components/Social/PreviewFAB.tsx","components/Social/Socials.tsx","components/Social/EditSocials.tsx","Sorting.ts","components/Orders/OrderDetails.tsx","components/Orders/Orders.tsx","components/Products/Products.tsx","components/UserUtils/Announcements.tsx","components/UserUtils/Coupons.tsx","components/UserUtils/EditUsers.tsx","components/UserUtils/Maintenance.tsx","components/UserUtils/Utils.tsx","components/Sections/Sections.tsx","components/Sections/AddSection.tsx","components/Sections/EditSection.tsx","routes/Routes.tsx","components/Login.tsx","components/App.tsx","URI.ts","AppWrapper.tsx","index.tsx"],"names":["accessToken","setAccessToken","s","getAccessToken","checkAuth","token","exp","jwtDecode","Date","now","AuthRoute","Component","component","rest","render","props","to","Navbar","className","style","borderBottom","display","justifyContent","id","href","PageWrapper","children","AddAnnouncementDocument","gql","AddApiUserDocument","AddCouponDocument","AddImgToProductDocument","useAddImgToProductMutation","baseOptions","Apollo","AddOptionToProductDocument","AddProductDocument","AddProductToSectionDocument","AddSectionDocument","AddShippingToProductDocument","ApiLoginDocument","DeleteAnnouncementDocument","DeleteApiUserDocument","DeleteCouponDocument","DeleteOptionsDocument","DeleteProductDocument","DeleteSectionDocument","EditTrackingDocument","GetAnnouncementsDocument","GetApiUsersDocument","GetCouponsDocument","GetMaintenanceDocument","GetOrderByIdDocument","GetOrdersDocument","ApiGetProductDocument","GetProductShippingDocument","ApiGetProductsDocument","GetProductsOptionsDocument","GetProductsSectionsDocument","GetSectionByIdDocument","GetSectionsDocument","useGetSectionsQuery","GetSocialsDocument","InitSocialsDocument","RemoveImgFromProductDocument","RemoveProductFromSectionDocument","RemoveWarningDocument","ToggleMaintenanceDocument","ToggleProductDisplayDocument","ToggleSocialDisplayDocument","UpdateOptionsDocument","UpdateProductDocument","UpdateSectionDocument","UpdateSocialUrlDocument","AddProducts","addProduct","addImgToProduct","useState","name","setName","desc","setDesc","price","setPrice","stock","setStock","image_urls","setImage_urls","refresh","setRefresh","redirect","setRedirect","handleSubmit","a","inputValidation","variables","Number","product_id","i","length","img_url","data","M","toast","html","document","getElementById","classList","remove","addImages","files","form","FormData","append","process","t","Axios","post","headers","res","tmp","push","secure_url","pathname","state","reload","console","log","width","type","value","onChange","e","target","htmlFor","data-error","match","onClick","add","onDrop","getRootProps","getInputProps","map","_val","src","ids","doc","GetProductId","window","location","split","ProductsMutations","addProductToSection","useRemoveProductFromSectionMutation","removeProductFromSection","useUpdateProductMutation","updateProduct","useDeleteProductMutation","deleteProduct","useRemoveImgFromProductMutation","deleteImg","useAddOptionToProductMutation","ADD_OPT_TO_PRODUCT","useToggleProductDisplayMutation","toggleDisplay","useDeleteOptionsMutation","deleteOptions","useUpdateOptionsMutation","UPDATE_OPTS","useAddShippingToProductMutation","addShippingToProduct","GetProductsSections","pdata","ploading","loading","GetProductsOptions","odata","oloading","GetProductShipping","getProductShipping","shdata","shloading","toggleDisabledClass","idList","toggle","updateOptionValue","prop","index","optionValues","setOptionValues","EditProduct","image_ids","setImage_ids","sections","setSections","removedSections","setRemovedSections","init","options","updateOptions","removedOptions","setRemovedOptions","shipping","updateShipping","country","shippingValues","setShippingValues","sdata","sloading","GetSections","error","onChipDeleteCB","_e","section_name","innerHTML","slice","indexOf","j","splice","getProductsSections","section_id","onChipAddCB","getSections","useEffect","Modal","querySelectorAll","Dropdown","autoCompleteData","initialChips","values","getProductsOptions","opt","option_id","opt_index","sh","shipping_id","forEach","tag","autocompleteOptions","onChipAdd","onChipDelete","Chips","options_str","JSON","stringify","product","apiGetProduct","img_id","ul","updatedOptions","labels","toLowerCase","unshift","attributes","addOptionToProduct","shipping_str","response","hidden","toFixed","onDragEnd","result","destination","items","Array","from","source","reorderedItem","reorderedValue","droppableId","provided","droppableProps","ref","innerRef","draggableId","prov","draggableProps","dragHandleProps","backgroundColor","margin","substring","placeholder","q","Math","random","data-target","marginTop","images","PreviewFAB","bottom","right","data-position","data-tooltip","IndexDropdown","socials","indices","ii","minWidth","social_logo","SocialIcon","height","Socials","updateSocialUrl","useToggleSocialDisplayMutation","toggleSocialDisplay","social_url","newSocials","setNewSocials","updatedState","d","url","initSocials","INIT_SOCIALS","EditSocials","sortByProp","arr","invert","sort","reverse","pop","useGetSocialsQuery","FloatingActionButton","Tooltip","getSocials","getOrderId","OrderDetails","useMemo","order_id","useRemoveWarningMutation","removeWarning","setState","elems","message","str","dateOfPurchase","products","Subtotal","sTotal","productSubtotal","quantityOrdered","productsSubtotal","shippingTotal","calcProdSubtotal","getOrderById","amountOff","order_total","discount","date_of_purchase","parse","warning","fontWeight","marginLeft","marginBottom","coupon","padding","borderLeft","paddingTop","paddingBottom","paddingRight","paddingLeft","zIndex","position","color","flexDirection","fontSize","line1","city","postal_code","Orders","useEditTrackingMutation","EditTracking","tracking","sortedOrders","getOrders","order","tracking_num","new_tracking_num","editTracking","_val2","Products","useLocation","marginRight","apiGetProducts","maxHeight","Announcements","useAddAnnouncementMutation","ADD_ANNOUNCE","useDeleteAnnouncementMutation","DELETE_ANNOUNCE","text","setText","AutoInit","announcements","getAnnouncements","Coupons","useAddCouponMutation","addCoupon","useDeleteCouponMutation","deleteCoupon","setDiscount","fresh","setFresh","getCoupons","coupon_name","minLength","maxLength","EditUsers","useDeleteApiUserMutation","deleteApiUser","useAddApiUserMutation","addApiUser","username","setUsername","password","setPassword","getApiUsers","uuid","Maintenance","useToggleMaintenanceMutation","toggleMaintenance","getMaintenance","checked","Divider","Utils","Sections","thumbnail","AddSection","addSection","imgUrl","setImgUrl","addImage","file","alt","EditSection","updateSection","useDeleteSectionMutation","deleteSection","useGetSectionByIdQuery","replaceImage","getSectionById","Routes","exact","path","Login","apiLogin","localStorage","setItem","refreshToken","minHeight","App","URI","AppWrapper","setLoading","getItem","fetch","method","credentials","then","json","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","subscribe","next","bind","complete","catch","unsubscribe","client","ApolloClient","link","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","handleFetch","handleError","err","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM"],"mappings":"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","file":"static/js/main.cf7580b5.chunk.js","sourcesContent":["export let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n    accessToken = s;\r\n};\r\n\r\nexport const getAccessToken = () => {\r\n    return accessToken;\r\n};\r\n","import { Route, RouteProps, Redirect } from \"react-router-dom\";\r\nimport { getAccessToken } from \"../accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = (): boolean => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token) as any;\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\ninterface IAuthRouteProps extends RouteProps {\r\n    component: any;\r\n}\r\n\r\nconst AuthRoute: React.FC<IAuthRouteProps> = ({\r\n    component: Component,\r\n    ...rest\r\n}) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            checkAuth() ? (\r\n                <Component {...props} />\r\n            ) : (\r\n                <Redirect to=\"/dashboard\" />\r\n            )\r\n        }\r\n    />\r\n);\r\nexport default AuthRoute;\r\n","const Navbar = () => {\r\n    return (\r\n        <div>\r\n            <nav\r\n                className=\"white z-depth-0\"\r\n                style={{ borderBottom: \"1px solid #dfe0e6\" }}\r\n            >\r\n                <div className=\"nav-wrapper\">\r\n                    <div\r\n                        className=\"row\"\r\n                        style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                    >\r\n                        <ul id=\"nav-mobile\" className=\"center \">\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/orders\">\r\n                                    Orders\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/products\">\r\n                                    Products\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/sections\">\r\n                                    Sections\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/utils\">\r\n                                    Utils\r\n                                </a>\r\n                            </li>\r\n\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/edit-socials\">\r\n                                    Edit Socials\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import \"../css/pageWrapper.scss\";\r\nimport Navbar from \"./Navbar\";\r\ninterface Props {\r\n    children?: any;\r\n}\r\n\r\nconst PageWrapper: React.FC<Props> = ({ children }) => {\r\n    return (\r\n        <div className=\"pageWrapper\">\r\n            <Navbar />\r\n            {children ? children : <></>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageWrapper;\r\n","import { gql } from '@apollo/client';\r\nimport * as Apollo from '@apollo/client';\r\nexport type Maybe<T> = T | null;\r\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\r\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\r\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\r\n/** All built-in and custom scalars, mapped to their actual values */\r\nexport type Scalars = {\r\n  ID: string;\r\n  String: string;\r\n  Boolean: boolean;\r\n  Int: number;\r\n  Float: number;\r\n};\r\n\r\nexport type Query = {\r\n  __typename?: 'Query';\r\n  getUsersOrders: Array<GetOrdersResponse>;\r\n  getOrders: Array<GetOrdersResponse>;\r\n  getOrderById: GetOrdersResponse;\r\n  getProducts: Array<ProductsWithImages>;\r\n  getProductsByIds: Array<ProductsWithOptionAndImages>;\r\n  apiGetProducts: Array<ProductsWithImages>;\r\n  getProduct: ProductsWithImages;\r\n  apiGetProduct: ProductsWithImages;\r\n  getApiUsers: Array<ApiUser>;\r\n  getCurrUser: Users;\r\n  getCoupons: Array<Coupons>;\r\n  getAnnouncements: Array<Announcements>;\r\n  getMaintenance: Scalars['Boolean'];\r\n  getSocials: Array<Socials>;\r\n  getSections: Array<Sections>;\r\n  getSectionById: Sections;\r\n  getProductsSections: Array<SectionsOrNull>;\r\n  getSectionsProducts: Array<ProductsWithImages>;\r\n  getProductsOptions: Array<Options>;\r\n  getProductShipping: Array<Shipping>;\r\n};\r\n\r\n\r\nexport type QueryGetOrderByIdArgs = {\r\n  order_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type QueryGetProductsByIdsArgs = {\r\n  products_str: Scalars['String'];\r\n};\r\n\r\n\r\nexport type QueryGetProductArgs = {\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type QueryApiGetProductArgs = {\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type QueryGetSocialsArgs = {\r\n  component: Scalars['String'];\r\n};\r\n\r\n\r\nexport type QueryGetSectionByIdArgs = {\r\n  section_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type QueryGetProductsSectionsArgs = {\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type QueryGetSectionsProductsArgs = {\r\n  section_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type QueryGetProductsOptionsArgs = {\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type QueryGetProductShippingArgs = {\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\nexport type GetOrdersResponse = {\r\n  __typename?: 'GetOrdersResponse';\r\n  products?: Maybe<Array<OrdersProductsWithImages>>;\r\n  order_id: Scalars['Float'];\r\n  tracking_num?: Maybe<Scalars['String']>;\r\n  order_total?: Maybe<Scalars['Float']>;\r\n  coupon?: Maybe<Scalars['String']>;\r\n  discount?: Maybe<Scalars['String']>;\r\n  shipping?: Maybe<Scalars['String']>;\r\n  warning?: Maybe<Scalars['String']>;\r\n  date_of_purchase?: Maybe<Scalars['String']>;\r\n};\r\n\r\nexport type OrdersProductsWithImages = {\r\n  __typename?: 'OrdersProductsWithImages';\r\n  product_id: Scalars['Int'];\r\n  name: Scalars['String'];\r\n  desc: Scalars['String'];\r\n  price: Scalars['Int'];\r\n  stock: Scalars['Int'];\r\n  org_stock?: Maybe<Scalars['Int']>;\r\n  exp_date?: Maybe<Scalars['String']>;\r\n  quantityOrdered: Scalars['Float'];\r\n  productSubtotal?: Maybe<Scalars['Float']>;\r\n  images?: Maybe<Array<Images>>;\r\n};\r\n\r\nexport type Images = {\r\n  __typename?: 'Images';\r\n  img_id: Scalars['Float'];\r\n  img_url: Scalars['String'];\r\n  index: Scalars['Float'];\r\n};\r\n\r\nexport type ProductsWithImages = {\r\n  __typename?: 'ProductsWithImages';\r\n  product_id: Scalars['Int'];\r\n  name: Scalars['String'];\r\n  desc: Scalars['String'];\r\n  price: Scalars['Int'];\r\n  stock: Scalars['Int'];\r\n  org_stock?: Maybe<Scalars['Int']>;\r\n  exp_date?: Maybe<Scalars['String']>;\r\n  images?: Maybe<Array<Images>>;\r\n  hidden: Scalars['Boolean'];\r\n};\r\n\r\nexport type ProductsWithOptionAndImages = {\r\n  __typename?: 'ProductsWithOptionAndImages';\r\n  product_id: Scalars['Int'];\r\n  name: Scalars['String'];\r\n  desc: Scalars['String'];\r\n  price: Scalars['Int'];\r\n  stock: Scalars['Int'];\r\n  org_stock?: Maybe<Scalars['Int']>;\r\n  exp_date?: Maybe<Scalars['String']>;\r\n  images?: Maybe<Array<Images>>;\r\n  options?: Maybe<Array<Options>>;\r\n};\r\n\r\nexport type Options = {\r\n  __typename?: 'Options';\r\n  option_id: Scalars['Int'];\r\n  name: Scalars['String'];\r\n  price: Scalars['Int'];\r\n  stock: Scalars['Int'];\r\n  index: Scalars['Int'];\r\n};\r\n\r\nexport type ApiUser = {\r\n  __typename?: 'ApiUser';\r\n  uuid: Scalars['Float'];\r\n  username: Scalars['String'];\r\n  password: Scalars['String'];\r\n};\r\n\r\nexport type Users = {\r\n  __typename?: 'Users';\r\n  uuid: Scalars['Float'];\r\n  user_id?: Maybe<Scalars['String']>;\r\n  email?: Maybe<Scalars['String']>;\r\n};\r\n\r\nexport type Coupons = {\r\n  __typename?: 'Coupons';\r\n  coupon_id: Scalars['String'];\r\n  coupon_name: Scalars['String'];\r\n  discount?: Maybe<Scalars['String']>;\r\n};\r\n\r\nexport type Announcements = {\r\n  __typename?: 'Announcements';\r\n  id: Scalars['String'];\r\n  text: Scalars['String'];\r\n};\r\n\r\nexport type Socials = {\r\n  __typename?: 'Socials';\r\n  id: Scalars['Int'];\r\n  index: Scalars['Int'];\r\n  component: Scalars['String'];\r\n  display: Scalars['Boolean'];\r\n  social_logo: Scalars['String'];\r\n  social_url: Scalars['String'];\r\n};\r\n\r\nexport type Sections = {\r\n  __typename?: 'Sections';\r\n  section_id: Scalars['Int'];\r\n  name: Scalars['String'];\r\n  thumbnail: Scalars['String'];\r\n};\r\n\r\nexport type SectionsOrNull = {\r\n  __typename?: 'SectionsOrNull';\r\n  section_id?: Maybe<Scalars['Int']>;\r\n  name?: Maybe<Scalars['String']>;\r\n  thumbnail?: Maybe<Scalars['String']>;\r\n};\r\n\r\nexport type Shipping = {\r\n  __typename?: 'Shipping';\r\n  shipping_id: Scalars['Int'];\r\n  country: Scalars['String'];\r\n  price: Scalars['Float'];\r\n};\r\n\r\nexport type Mutation = {\r\n  __typename?: 'Mutation';\r\n  editTracking: Scalars['Boolean'];\r\n  paypalCheckout: Scalars['String'];\r\n  addPaypalOrder: Scalars['String'];\r\n  checkout: Scalars['String'];\r\n  toggleProductDisplay: Scalars['Boolean'];\r\n  addProduct: Scalars['String'];\r\n  deleteProduct: Scalars['Boolean'];\r\n  updateProduct: Scalars['Boolean'];\r\n  addImgToProduct: Scalars['Boolean'];\r\n  removeImgFromProduct: Scalars['Boolean'];\r\n  apiLogin: AuthResponse;\r\n  deleteApiUser: Scalars['Boolean'];\r\n  addApiUser: Scalars['Boolean'];\r\n  removeWarning: Scalars['Boolean'];\r\n  login: AuthResponse;\r\n  addCoupon: Scalars['Boolean'];\r\n  deleteCoupon: Scalars['Boolean'];\r\n  validateCoupon: Scalars['String'];\r\n  addAnnouncement: Scalars['Boolean'];\r\n  deleteAnnouncement: Scalars['Boolean'];\r\n  toggleMaintenance: Scalars['Boolean'];\r\n  maintenanceLogin: AuthResponse;\r\n  updateSocialUrl: Scalars['Boolean'];\r\n  toggleSocialDisplay: Scalars['Boolean'];\r\n  initSocials: Scalars['Boolean'];\r\n  addSection: Scalars['Boolean'];\r\n  deleteSection: Scalars['Boolean'];\r\n  addProductToSection: Scalars['String'];\r\n  removeProductFromSection: Scalars['Boolean'];\r\n  updateSection: Scalars['Boolean'];\r\n  addOptionToProduct: Scalars['Boolean'];\r\n  updateOptions: Scalars['Boolean'];\r\n  deleteOptions: Scalars['Boolean'];\r\n  addShippingToProduct: Scalars['Boolean'];\r\n};\r\n\r\n\r\nexport type MutationEditTrackingArgs = {\r\n  order_id: Scalars['Float'];\r\n  new_tracking_num: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationPaypalCheckoutArgs = {\r\n  coupon: Scalars['String'];\r\n  products: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationAddPaypalOrderArgs = {\r\n  purchase_units: Scalars['String'];\r\n  products: Scalars['String'];\r\n  coupon: Scalars['String'];\r\n  user_id: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationCheckoutArgs = {\r\n  coupon: Scalars['String'];\r\n  billing_info: Scalars['String'];\r\n  shipping_info: Scalars['String'];\r\n  products: Scalars['String'];\r\n  user_id: Scalars['String'];\r\n  token: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationToggleProductDisplayArgs = {\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationAddProductArgs = {\r\n  stock: Scalars['Float'];\r\n  price: Scalars['Float'];\r\n  desc: Scalars['String'];\r\n  name: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationDeleteProductArgs = {\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationUpdateProductArgs = {\r\n  stock: Scalars['Float'];\r\n  price: Scalars['Float'];\r\n  desc: Scalars['String'];\r\n  product_id: Scalars['Float'];\r\n  name: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationAddImgToProductArgs = {\r\n  product_id: Scalars['Float'];\r\n  img_url: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationRemoveImgFromProductArgs = {\r\n  img_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationApiLoginArgs = {\r\n  password: Scalars['String'];\r\n  username: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationDeleteApiUserArgs = {\r\n  uuid: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationAddApiUserArgs = {\r\n  password: Scalars['String'];\r\n  username: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationRemoveWarningArgs = {\r\n  order_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationLoginArgs = {\r\n  email: Scalars['String'];\r\n  user_id: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationAddCouponArgs = {\r\n  discount: Scalars['String'];\r\n  coupon_name: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationDeleteCouponArgs = {\r\n  coupon_name: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationValidateCouponArgs = {\r\n  coupon_name: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationAddAnnouncementArgs = {\r\n  text: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationDeleteAnnouncementArgs = {\r\n  id: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationMaintenanceLoginArgs = {\r\n  password: Scalars['String'];\r\n  access_id: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationUpdateSocialUrlArgs = {\r\n  id: Scalars['Float'];\r\n  url: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationToggleSocialDisplayArgs = {\r\n  id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationAddSectionArgs = {\r\n  thumbnail: Scalars['String'];\r\n  name: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationDeleteSectionArgs = {\r\n  section_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationAddProductToSectionArgs = {\r\n  section_id: Scalars['Float'];\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationRemoveProductFromSectionArgs = {\r\n  section_id: Scalars['Float'];\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationUpdateSectionArgs = {\r\n  section_id: Scalars['Float'];\r\n  thumbnail: Scalars['String'];\r\n  name: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationAddOptionToProductArgs = {\r\n  product_id: Scalars['Float'];\r\n  options_str: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationUpdateOptionsArgs = {\r\n  options_str: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationDeleteOptionsArgs = {\r\n  options_str: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationAddShippingToProductArgs = {\r\n  shipping_str: Scalars['String'];\r\n  product_id: Scalars['Float'];\r\n};\r\n\r\nexport type AuthResponse = {\r\n  __typename?: 'AuthResponse';\r\n  accessToken?: Maybe<Scalars['String']>;\r\n  refreshToken?: Maybe<Scalars['String']>;\r\n};\r\n\r\nexport type AddAnnouncementMutationVariables = Exact<{\r\n  text: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type AddAnnouncementMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'addAnnouncement'>\r\n);\r\n\r\nexport type AddApiUserMutationVariables = Exact<{\r\n  username: Scalars['String'];\r\n  password: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type AddApiUserMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'addApiUser'>\r\n);\r\n\r\nexport type AddCouponMutationVariables = Exact<{\r\n  coupon_name: Scalars['String'];\r\n  discount: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type AddCouponMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'addCoupon'>\r\n);\r\n\r\nexport type AddImgToProductMutationVariables = Exact<{\r\n  img_url: Scalars['String'];\r\n  product_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type AddImgToProductMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'addImgToProduct'>\r\n);\r\n\r\nexport type AddOptionToProductMutationVariables = Exact<{\r\n  options_str: Scalars['String'];\r\n  product_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type AddOptionToProductMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'addOptionToProduct'>\r\n);\r\n\r\nexport type AddProductMutationVariables = Exact<{\r\n  name: Scalars['String'];\r\n  desc: Scalars['String'];\r\n  price: Scalars['Float'];\r\n  stock: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type AddProductMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'addProduct'>\r\n);\r\n\r\nexport type AddProductToSectionMutationVariables = Exact<{\r\n  product_id: Scalars['Float'];\r\n  section_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type AddProductToSectionMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'addProductToSection'>\r\n);\r\n\r\nexport type AddSectionMutationVariables = Exact<{\r\n  name: Scalars['String'];\r\n  thumbnail: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type AddSectionMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'addSection'>\r\n);\r\n\r\nexport type AddShippingToProductMutationVariables = Exact<{\r\n  product_id: Scalars['Float'];\r\n  shipping_str: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type AddShippingToProductMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'addShippingToProduct'>\r\n);\r\n\r\nexport type ApiLoginMutationVariables = Exact<{\r\n  username: Scalars['String'];\r\n  password: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type ApiLoginMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { apiLogin: (\r\n    { __typename?: 'AuthResponse' }\r\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\r\n  ) }\r\n);\r\n\r\nexport type DeleteAnnouncementMutationVariables = Exact<{\r\n  id: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type DeleteAnnouncementMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'deleteAnnouncement'>\r\n);\r\n\r\nexport type DeleteApiUserMutationVariables = Exact<{\r\n  uuid: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type DeleteApiUserMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'deleteApiUser'>\r\n);\r\n\r\nexport type DeleteCouponMutationVariables = Exact<{\r\n  coupon_name: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type DeleteCouponMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'deleteCoupon'>\r\n);\r\n\r\nexport type DeleteOptionsMutationVariables = Exact<{\r\n  options_str: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type DeleteOptionsMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'deleteOptions'>\r\n);\r\n\r\nexport type DeleteProductMutationVariables = Exact<{\r\n  product_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type DeleteProductMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'deleteProduct'>\r\n);\r\n\r\nexport type DeleteSectionMutationVariables = Exact<{\r\n  section_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type DeleteSectionMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'deleteSection'>\r\n);\r\n\r\nexport type EditTrackingMutationVariables = Exact<{\r\n  new_tracking_num: Scalars['String'];\r\n  order_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type EditTrackingMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'editTracking'>\r\n);\r\n\r\nexport type GetAnnouncementsQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type GetAnnouncementsQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getAnnouncements: Array<(\r\n    { __typename?: 'Announcements' }\r\n    & Pick<Announcements, 'id' | 'text'>\r\n  )> }\r\n);\r\n\r\nexport type GetApiUsersQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type GetApiUsersQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getApiUsers: Array<(\r\n    { __typename?: 'ApiUser' }\r\n    & Pick<ApiUser, 'uuid' | 'username'>\r\n  )> }\r\n);\r\n\r\nexport type GetCouponsQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type GetCouponsQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getCoupons: Array<(\r\n    { __typename?: 'Coupons' }\r\n    & Pick<Coupons, 'coupon_name' | 'coupon_id' | 'discount'>\r\n  )> }\r\n);\r\n\r\nexport type GetMaintenanceQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type GetMaintenanceQuery = (\r\n  { __typename?: 'Query' }\r\n  & Pick<Query, 'getMaintenance'>\r\n);\r\n\r\nexport type GetOrderByIdQueryVariables = Exact<{\r\n  order_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type GetOrderByIdQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getOrderById: (\r\n    { __typename?: 'GetOrdersResponse' }\r\n    & Pick<GetOrdersResponse, 'order_id' | 'tracking_num' | 'shipping' | 'warning' | 'order_total' | 'coupon' | 'discount' | 'date_of_purchase'>\r\n    & { products?: Maybe<Array<(\r\n      { __typename?: 'OrdersProductsWithImages' }\r\n      & Pick<OrdersProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date' | 'quantityOrdered' | 'productSubtotal'>\r\n      & { images?: Maybe<Array<(\r\n        { __typename?: 'Images' }\r\n        & Pick<Images, 'img_id' | 'img_url' | 'index'>\r\n      )>> }\r\n    )>> }\r\n  ) }\r\n);\r\n\r\nexport type GetOrdersQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type GetOrdersQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getOrders: Array<(\r\n    { __typename?: 'GetOrdersResponse' }\r\n    & Pick<GetOrdersResponse, 'order_id' | 'tracking_num' | 'order_total' | 'coupon' | 'discount' | 'shipping' | 'warning' | 'date_of_purchase'>\r\n    & { products?: Maybe<Array<(\r\n      { __typename?: 'OrdersProductsWithImages' }\r\n      & Pick<OrdersProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date' | 'quantityOrdered' | 'productSubtotal'>\r\n      & { images?: Maybe<Array<(\r\n        { __typename?: 'Images' }\r\n        & Pick<Images, 'img_id' | 'img_url' | 'index'>\r\n      )>> }\r\n    )>> }\r\n  )> }\r\n);\r\n\r\nexport type ApiGetProductQueryVariables = Exact<{\r\n  product_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type ApiGetProductQuery = (\r\n  { __typename?: 'Query' }\r\n  & { apiGetProduct: (\r\n    { __typename?: 'ProductsWithImages' }\r\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date' | 'hidden'>\r\n    & { images?: Maybe<Array<(\r\n      { __typename?: 'Images' }\r\n      & Pick<Images, 'img_id' | 'img_url'>\r\n    )>> }\r\n  ) }\r\n);\r\n\r\nexport type GetProductShippingQueryVariables = Exact<{\r\n  product_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type GetProductShippingQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getProductShipping: Array<(\r\n    { __typename?: 'Shipping' }\r\n    & Pick<Shipping, 'shipping_id' | 'country' | 'price'>\r\n  )> }\r\n);\r\n\r\nexport type ApiGetProductsQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type ApiGetProductsQuery = (\r\n  { __typename?: 'Query' }\r\n  & { apiGetProducts: Array<(\r\n    { __typename?: 'ProductsWithImages' }\r\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date'>\r\n    & { images?: Maybe<Array<(\r\n      { __typename?: 'Images' }\r\n      & Pick<Images, 'img_id' | 'img_url'>\r\n    )>> }\r\n  )> }\r\n);\r\n\r\nexport type GetProductsOptionsQueryVariables = Exact<{\r\n  product_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type GetProductsOptionsQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getProductsOptions: Array<(\r\n    { __typename?: 'Options' }\r\n    & Pick<Options, 'option_id' | 'name' | 'price' | 'stock' | 'index'>\r\n  )> }\r\n);\r\n\r\nexport type GetProductsSectionsQueryVariables = Exact<{\r\n  product_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type GetProductsSectionsQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getProductsSections: Array<(\r\n    { __typename?: 'SectionsOrNull' }\r\n    & Pick<SectionsOrNull, 'section_id' | 'name' | 'thumbnail'>\r\n  )> }\r\n);\r\n\r\nexport type GetSectionByIdQueryVariables = Exact<{\r\n  section_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type GetSectionByIdQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getSectionById: (\r\n    { __typename?: 'Sections' }\r\n    & Pick<Sections, 'section_id' | 'thumbnail' | 'name'>\r\n  ) }\r\n);\r\n\r\nexport type GetSectionsQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type GetSectionsQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getSections: Array<(\r\n    { __typename?: 'Sections' }\r\n    & Pick<Sections, 'section_id' | 'name' | 'thumbnail'>\r\n  )> }\r\n);\r\n\r\nexport type GetSectionsProductsQueryVariables = Exact<{\r\n  section_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type GetSectionsProductsQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getSectionsProducts: Array<(\r\n    { __typename?: 'ProductsWithImages' }\r\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'org_stock'>\r\n  )> }\r\n);\r\n\r\nexport type GetSocialsQueryVariables = Exact<{\r\n  component: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type GetSocialsQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getSocials: Array<(\r\n    { __typename?: 'Socials' }\r\n    & Pick<Socials, 'id' | 'index' | 'social_url' | 'social_logo' | 'display'>\r\n  )> }\r\n);\r\n\r\nexport type InitSocialsMutationVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type InitSocialsMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'initSocials'>\r\n);\r\n\r\nexport type RemoveImgFromProductMutationVariables = Exact<{\r\n  img_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type RemoveImgFromProductMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'removeImgFromProduct'>\r\n);\r\n\r\nexport type RemoveProductFromSectionMutationVariables = Exact<{\r\n  product_id: Scalars['Float'];\r\n  section_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type RemoveProductFromSectionMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'removeProductFromSection'>\r\n);\r\n\r\nexport type RemoveWarningMutationVariables = Exact<{\r\n  order_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type RemoveWarningMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'removeWarning'>\r\n);\r\n\r\nexport type ToggleMaintenanceMutationVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type ToggleMaintenanceMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'toggleMaintenance'>\r\n);\r\n\r\nexport type ToggleProductDisplayMutationVariables = Exact<{\r\n  product_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type ToggleProductDisplayMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'toggleProductDisplay'>\r\n);\r\n\r\nexport type ToggleSocialDisplayMutationVariables = Exact<{\r\n  id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type ToggleSocialDisplayMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'toggleSocialDisplay'>\r\n);\r\n\r\nexport type UpdateOptionsMutationVariables = Exact<{\r\n  options_str: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type UpdateOptionsMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'updateOptions'>\r\n);\r\n\r\nexport type UpdateProductMutationVariables = Exact<{\r\n  product_id: Scalars['Float'];\r\n  name: Scalars['String'];\r\n  desc: Scalars['String'];\r\n  price: Scalars['Float'];\r\n  stock: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type UpdateProductMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'updateProduct'>\r\n);\r\n\r\nexport type UpdateSectionMutationVariables = Exact<{\r\n  name: Scalars['String'];\r\n  thumbnail: Scalars['String'];\r\n  section_id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type UpdateSectionMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'updateSection'>\r\n);\r\n\r\nexport type UpdateSocialUrlMutationVariables = Exact<{\r\n  url: Scalars['String'];\r\n  id: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type UpdateSocialUrlMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'updateSocialUrl'>\r\n);\r\n\r\n\r\nexport const AddAnnouncementDocument = gql`\r\n    mutation addAnnouncement($text: String!) {\r\n  addAnnouncement(text: $text)\r\n}\r\n    `;\r\nexport type AddAnnouncementMutationFn = Apollo.MutationFunction<AddAnnouncementMutation, AddAnnouncementMutationVariables>;\r\n\r\n/**\r\n * __useAddAnnouncementMutation__\r\n *\r\n * To run a mutation, you first call `useAddAnnouncementMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useAddAnnouncementMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [addAnnouncementMutation, { data, loading, error }] = useAddAnnouncementMutation({\r\n *   variables: {\r\n *      text: // value for 'text'\r\n *   },\r\n * });\r\n */\r\nexport function useAddAnnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AddAnnouncementMutation, AddAnnouncementMutationVariables>) {\r\n        return Apollo.useMutation<AddAnnouncementMutation, AddAnnouncementMutationVariables>(AddAnnouncementDocument, baseOptions);\r\n      }\r\nexport type AddAnnouncementMutationHookResult = ReturnType<typeof useAddAnnouncementMutation>;\r\nexport type AddAnnouncementMutationResult = Apollo.MutationResult<AddAnnouncementMutation>;\r\nexport type AddAnnouncementMutationOptions = Apollo.BaseMutationOptions<AddAnnouncementMutation, AddAnnouncementMutationVariables>;\r\nexport const AddApiUserDocument = gql`\r\n    mutation addApiUser($username: String!, $password: String!) {\r\n  addApiUser(username: $username, password: $password)\r\n}\r\n    `;\r\nexport type AddApiUserMutationFn = Apollo.MutationFunction<AddApiUserMutation, AddApiUserMutationVariables>;\r\n\r\n/**\r\n * __useAddApiUserMutation__\r\n *\r\n * To run a mutation, you first call `useAddApiUserMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useAddApiUserMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [addApiUserMutation, { data, loading, error }] = useAddApiUserMutation({\r\n *   variables: {\r\n *      username: // value for 'username'\r\n *      password: // value for 'password'\r\n *   },\r\n * });\r\n */\r\nexport function useAddApiUserMutation(baseOptions?: Apollo.MutationHookOptions<AddApiUserMutation, AddApiUserMutationVariables>) {\r\n        return Apollo.useMutation<AddApiUserMutation, AddApiUserMutationVariables>(AddApiUserDocument, baseOptions);\r\n      }\r\nexport type AddApiUserMutationHookResult = ReturnType<typeof useAddApiUserMutation>;\r\nexport type AddApiUserMutationResult = Apollo.MutationResult<AddApiUserMutation>;\r\nexport type AddApiUserMutationOptions = Apollo.BaseMutationOptions<AddApiUserMutation, AddApiUserMutationVariables>;\r\nexport const AddCouponDocument = gql`\r\n    mutation addCoupon($coupon_name: String!, $discount: String!) {\r\n  addCoupon(coupon_name: $coupon_name, discount: $discount)\r\n}\r\n    `;\r\nexport type AddCouponMutationFn = Apollo.MutationFunction<AddCouponMutation, AddCouponMutationVariables>;\r\n\r\n/**\r\n * __useAddCouponMutation__\r\n *\r\n * To run a mutation, you first call `useAddCouponMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useAddCouponMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [addCouponMutation, { data, loading, error }] = useAddCouponMutation({\r\n *   variables: {\r\n *      coupon_name: // value for 'coupon_name'\r\n *      discount: // value for 'discount'\r\n *   },\r\n * });\r\n */\r\nexport function useAddCouponMutation(baseOptions?: Apollo.MutationHookOptions<AddCouponMutation, AddCouponMutationVariables>) {\r\n        return Apollo.useMutation<AddCouponMutation, AddCouponMutationVariables>(AddCouponDocument, baseOptions);\r\n      }\r\nexport type AddCouponMutationHookResult = ReturnType<typeof useAddCouponMutation>;\r\nexport type AddCouponMutationResult = Apollo.MutationResult<AddCouponMutation>;\r\nexport type AddCouponMutationOptions = Apollo.BaseMutationOptions<AddCouponMutation, AddCouponMutationVariables>;\r\nexport const AddImgToProductDocument = gql`\r\n    mutation addImgToProduct($img_url: String!, $product_id: Float!) {\r\n  addImgToProduct(img_url: $img_url, product_id: $product_id)\r\n}\r\n    `;\r\nexport type AddImgToProductMutationFn = Apollo.MutationFunction<AddImgToProductMutation, AddImgToProductMutationVariables>;\r\n\r\n/**\r\n * __useAddImgToProductMutation__\r\n *\r\n * To run a mutation, you first call `useAddImgToProductMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useAddImgToProductMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [addImgToProductMutation, { data, loading, error }] = useAddImgToProductMutation({\r\n *   variables: {\r\n *      img_url: // value for 'img_url'\r\n *      product_id: // value for 'product_id'\r\n *   },\r\n * });\r\n */\r\nexport function useAddImgToProductMutation(baseOptions?: Apollo.MutationHookOptions<AddImgToProductMutation, AddImgToProductMutationVariables>) {\r\n        return Apollo.useMutation<AddImgToProductMutation, AddImgToProductMutationVariables>(AddImgToProductDocument, baseOptions);\r\n      }\r\nexport type AddImgToProductMutationHookResult = ReturnType<typeof useAddImgToProductMutation>;\r\nexport type AddImgToProductMutationResult = Apollo.MutationResult<AddImgToProductMutation>;\r\nexport type AddImgToProductMutationOptions = Apollo.BaseMutationOptions<AddImgToProductMutation, AddImgToProductMutationVariables>;\r\nexport const AddOptionToProductDocument = gql`\r\n    mutation addOptionToProduct($options_str: String!, $product_id: Float!) {\r\n  addOptionToProduct(options_str: $options_str, product_id: $product_id)\r\n}\r\n    `;\r\nexport type AddOptionToProductMutationFn = Apollo.MutationFunction<AddOptionToProductMutation, AddOptionToProductMutationVariables>;\r\n\r\n/**\r\n * __useAddOptionToProductMutation__\r\n *\r\n * To run a mutation, you first call `useAddOptionToProductMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useAddOptionToProductMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [addOptionToProductMutation, { data, loading, error }] = useAddOptionToProductMutation({\r\n *   variables: {\r\n *      options_str: // value for 'options_str'\r\n *      product_id: // value for 'product_id'\r\n *   },\r\n * });\r\n */\r\nexport function useAddOptionToProductMutation(baseOptions?: Apollo.MutationHookOptions<AddOptionToProductMutation, AddOptionToProductMutationVariables>) {\r\n        return Apollo.useMutation<AddOptionToProductMutation, AddOptionToProductMutationVariables>(AddOptionToProductDocument, baseOptions);\r\n      }\r\nexport type AddOptionToProductMutationHookResult = ReturnType<typeof useAddOptionToProductMutation>;\r\nexport type AddOptionToProductMutationResult = Apollo.MutationResult<AddOptionToProductMutation>;\r\nexport type AddOptionToProductMutationOptions = Apollo.BaseMutationOptions<AddOptionToProductMutation, AddOptionToProductMutationVariables>;\r\nexport const AddProductDocument = gql`\r\n    mutation addProduct($name: String!, $desc: String!, $price: Float!, $stock: Float!) {\r\n  addProduct(name: $name, desc: $desc, price: $price, stock: $stock)\r\n}\r\n    `;\r\nexport type AddProductMutationFn = Apollo.MutationFunction<AddProductMutation, AddProductMutationVariables>;\r\n\r\n/**\r\n * __useAddProductMutation__\r\n *\r\n * To run a mutation, you first call `useAddProductMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useAddProductMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [addProductMutation, { data, loading, error }] = useAddProductMutation({\r\n *   variables: {\r\n *      name: // value for 'name'\r\n *      desc: // value for 'desc'\r\n *      price: // value for 'price'\r\n *      stock: // value for 'stock'\r\n *   },\r\n * });\r\n */\r\nexport function useAddProductMutation(baseOptions?: Apollo.MutationHookOptions<AddProductMutation, AddProductMutationVariables>) {\r\n        return Apollo.useMutation<AddProductMutation, AddProductMutationVariables>(AddProductDocument, baseOptions);\r\n      }\r\nexport type AddProductMutationHookResult = ReturnType<typeof useAddProductMutation>;\r\nexport type AddProductMutationResult = Apollo.MutationResult<AddProductMutation>;\r\nexport type AddProductMutationOptions = Apollo.BaseMutationOptions<AddProductMutation, AddProductMutationVariables>;\r\nexport const AddProductToSectionDocument = gql`\r\n    mutation addProductToSection($product_id: Float!, $section_id: Float!) {\r\n  addProductToSection(product_id: $product_id, section_id: $section_id)\r\n}\r\n    `;\r\nexport type AddProductToSectionMutationFn = Apollo.MutationFunction<AddProductToSectionMutation, AddProductToSectionMutationVariables>;\r\n\r\n/**\r\n * __useAddProductToSectionMutation__\r\n *\r\n * To run a mutation, you first call `useAddProductToSectionMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useAddProductToSectionMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [addProductToSectionMutation, { data, loading, error }] = useAddProductToSectionMutation({\r\n *   variables: {\r\n *      product_id: // value for 'product_id'\r\n *      section_id: // value for 'section_id'\r\n *   },\r\n * });\r\n */\r\nexport function useAddProductToSectionMutation(baseOptions?: Apollo.MutationHookOptions<AddProductToSectionMutation, AddProductToSectionMutationVariables>) {\r\n        return Apollo.useMutation<AddProductToSectionMutation, AddProductToSectionMutationVariables>(AddProductToSectionDocument, baseOptions);\r\n      }\r\nexport type AddProductToSectionMutationHookResult = ReturnType<typeof useAddProductToSectionMutation>;\r\nexport type AddProductToSectionMutationResult = Apollo.MutationResult<AddProductToSectionMutation>;\r\nexport type AddProductToSectionMutationOptions = Apollo.BaseMutationOptions<AddProductToSectionMutation, AddProductToSectionMutationVariables>;\r\nexport const AddSectionDocument = gql`\r\n    mutation addSection($name: String!, $thumbnail: String!) {\r\n  addSection(name: $name, thumbnail: $thumbnail)\r\n}\r\n    `;\r\nexport type AddSectionMutationFn = Apollo.MutationFunction<AddSectionMutation, AddSectionMutationVariables>;\r\n\r\n/**\r\n * __useAddSectionMutation__\r\n *\r\n * To run a mutation, you first call `useAddSectionMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useAddSectionMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [addSectionMutation, { data, loading, error }] = useAddSectionMutation({\r\n *   variables: {\r\n *      name: // value for 'name'\r\n *      thumbnail: // value for 'thumbnail'\r\n *   },\r\n * });\r\n */\r\nexport function useAddSectionMutation(baseOptions?: Apollo.MutationHookOptions<AddSectionMutation, AddSectionMutationVariables>) {\r\n        return Apollo.useMutation<AddSectionMutation, AddSectionMutationVariables>(AddSectionDocument, baseOptions);\r\n      }\r\nexport type AddSectionMutationHookResult = ReturnType<typeof useAddSectionMutation>;\r\nexport type AddSectionMutationResult = Apollo.MutationResult<AddSectionMutation>;\r\nexport type AddSectionMutationOptions = Apollo.BaseMutationOptions<AddSectionMutation, AddSectionMutationVariables>;\r\nexport const AddShippingToProductDocument = gql`\r\n    mutation addShippingToProduct($product_id: Float!, $shipping_str: String!) {\r\n  addShippingToProduct(product_id: $product_id, shipping_str: $shipping_str)\r\n}\r\n    `;\r\nexport type AddShippingToProductMutationFn = Apollo.MutationFunction<AddShippingToProductMutation, AddShippingToProductMutationVariables>;\r\n\r\n/**\r\n * __useAddShippingToProductMutation__\r\n *\r\n * To run a mutation, you first call `useAddShippingToProductMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useAddShippingToProductMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [addShippingToProductMutation, { data, loading, error }] = useAddShippingToProductMutation({\r\n *   variables: {\r\n *      product_id: // value for 'product_id'\r\n *      shipping_str: // value for 'shipping_str'\r\n *   },\r\n * });\r\n */\r\nexport function useAddShippingToProductMutation(baseOptions?: Apollo.MutationHookOptions<AddShippingToProductMutation, AddShippingToProductMutationVariables>) {\r\n        return Apollo.useMutation<AddShippingToProductMutation, AddShippingToProductMutationVariables>(AddShippingToProductDocument, baseOptions);\r\n      }\r\nexport type AddShippingToProductMutationHookResult = ReturnType<typeof useAddShippingToProductMutation>;\r\nexport type AddShippingToProductMutationResult = Apollo.MutationResult<AddShippingToProductMutation>;\r\nexport type AddShippingToProductMutationOptions = Apollo.BaseMutationOptions<AddShippingToProductMutation, AddShippingToProductMutationVariables>;\r\nexport const ApiLoginDocument = gql`\r\n    mutation apiLogin($username: String!, $password: String!) {\r\n  apiLogin(username: $username, password: $password) {\r\n    accessToken\r\n    refreshToken\r\n  }\r\n}\r\n    `;\r\nexport type ApiLoginMutationFn = Apollo.MutationFunction<ApiLoginMutation, ApiLoginMutationVariables>;\r\n\r\n/**\r\n * __useApiLoginMutation__\r\n *\r\n * To run a mutation, you first call `useApiLoginMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useApiLoginMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [apiLoginMutation, { data, loading, error }] = useApiLoginMutation({\r\n *   variables: {\r\n *      username: // value for 'username'\r\n *      password: // value for 'password'\r\n *   },\r\n * });\r\n */\r\nexport function useApiLoginMutation(baseOptions?: Apollo.MutationHookOptions<ApiLoginMutation, ApiLoginMutationVariables>) {\r\n        return Apollo.useMutation<ApiLoginMutation, ApiLoginMutationVariables>(ApiLoginDocument, baseOptions);\r\n      }\r\nexport type ApiLoginMutationHookResult = ReturnType<typeof useApiLoginMutation>;\r\nexport type ApiLoginMutationResult = Apollo.MutationResult<ApiLoginMutation>;\r\nexport type ApiLoginMutationOptions = Apollo.BaseMutationOptions<ApiLoginMutation, ApiLoginMutationVariables>;\r\nexport const DeleteAnnouncementDocument = gql`\r\n    mutation deleteAnnouncement($id: String!) {\r\n  deleteAnnouncement(id: $id)\r\n}\r\n    `;\r\nexport type DeleteAnnouncementMutationFn = Apollo.MutationFunction<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>;\r\n\r\n/**\r\n * __useDeleteAnnouncementMutation__\r\n *\r\n * To run a mutation, you first call `useDeleteAnnouncementMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useDeleteAnnouncementMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [deleteAnnouncementMutation, { data, loading, error }] = useDeleteAnnouncementMutation({\r\n *   variables: {\r\n *      id: // value for 'id'\r\n *   },\r\n * });\r\n */\r\nexport function useDeleteAnnouncementMutation(baseOptions?: Apollo.MutationHookOptions<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>) {\r\n        return Apollo.useMutation<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>(DeleteAnnouncementDocument, baseOptions);\r\n      }\r\nexport type DeleteAnnouncementMutationHookResult = ReturnType<typeof useDeleteAnnouncementMutation>;\r\nexport type DeleteAnnouncementMutationResult = Apollo.MutationResult<DeleteAnnouncementMutation>;\r\nexport type DeleteAnnouncementMutationOptions = Apollo.BaseMutationOptions<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>;\r\nexport const DeleteApiUserDocument = gql`\r\n    mutation deleteApiUser($uuid: Float!) {\r\n  deleteApiUser(uuid: $uuid)\r\n}\r\n    `;\r\nexport type DeleteApiUserMutationFn = Apollo.MutationFunction<DeleteApiUserMutation, DeleteApiUserMutationVariables>;\r\n\r\n/**\r\n * __useDeleteApiUserMutation__\r\n *\r\n * To run a mutation, you first call `useDeleteApiUserMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useDeleteApiUserMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [deleteApiUserMutation, { data, loading, error }] = useDeleteApiUserMutation({\r\n *   variables: {\r\n *      uuid: // value for 'uuid'\r\n *   },\r\n * });\r\n */\r\nexport function useDeleteApiUserMutation(baseOptions?: Apollo.MutationHookOptions<DeleteApiUserMutation, DeleteApiUserMutationVariables>) {\r\n        return Apollo.useMutation<DeleteApiUserMutation, DeleteApiUserMutationVariables>(DeleteApiUserDocument, baseOptions);\r\n      }\r\nexport type DeleteApiUserMutationHookResult = ReturnType<typeof useDeleteApiUserMutation>;\r\nexport type DeleteApiUserMutationResult = Apollo.MutationResult<DeleteApiUserMutation>;\r\nexport type DeleteApiUserMutationOptions = Apollo.BaseMutationOptions<DeleteApiUserMutation, DeleteApiUserMutationVariables>;\r\nexport const DeleteCouponDocument = gql`\r\n    mutation deleteCoupon($coupon_name: String!) {\r\n  deleteCoupon(coupon_name: $coupon_name)\r\n}\r\n    `;\r\nexport type DeleteCouponMutationFn = Apollo.MutationFunction<DeleteCouponMutation, DeleteCouponMutationVariables>;\r\n\r\n/**\r\n * __useDeleteCouponMutation__\r\n *\r\n * To run a mutation, you first call `useDeleteCouponMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useDeleteCouponMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [deleteCouponMutation, { data, loading, error }] = useDeleteCouponMutation({\r\n *   variables: {\r\n *      coupon_name: // value for 'coupon_name'\r\n *   },\r\n * });\r\n */\r\nexport function useDeleteCouponMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCouponMutation, DeleteCouponMutationVariables>) {\r\n        return Apollo.useMutation<DeleteCouponMutation, DeleteCouponMutationVariables>(DeleteCouponDocument, baseOptions);\r\n      }\r\nexport type DeleteCouponMutationHookResult = ReturnType<typeof useDeleteCouponMutation>;\r\nexport type DeleteCouponMutationResult = Apollo.MutationResult<DeleteCouponMutation>;\r\nexport type DeleteCouponMutationOptions = Apollo.BaseMutationOptions<DeleteCouponMutation, DeleteCouponMutationVariables>;\r\nexport const DeleteOptionsDocument = gql`\r\n    mutation deleteOptions($options_str: String!) {\r\n  deleteOptions(options_str: $options_str)\r\n}\r\n    `;\r\nexport type DeleteOptionsMutationFn = Apollo.MutationFunction<DeleteOptionsMutation, DeleteOptionsMutationVariables>;\r\n\r\n/**\r\n * __useDeleteOptionsMutation__\r\n *\r\n * To run a mutation, you first call `useDeleteOptionsMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useDeleteOptionsMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [deleteOptionsMutation, { data, loading, error }] = useDeleteOptionsMutation({\r\n *   variables: {\r\n *      options_str: // value for 'options_str'\r\n *   },\r\n * });\r\n */\r\nexport function useDeleteOptionsMutation(baseOptions?: Apollo.MutationHookOptions<DeleteOptionsMutation, DeleteOptionsMutationVariables>) {\r\n        return Apollo.useMutation<DeleteOptionsMutation, DeleteOptionsMutationVariables>(DeleteOptionsDocument, baseOptions);\r\n      }\r\nexport type DeleteOptionsMutationHookResult = ReturnType<typeof useDeleteOptionsMutation>;\r\nexport type DeleteOptionsMutationResult = Apollo.MutationResult<DeleteOptionsMutation>;\r\nexport type DeleteOptionsMutationOptions = Apollo.BaseMutationOptions<DeleteOptionsMutation, DeleteOptionsMutationVariables>;\r\nexport const DeleteProductDocument = gql`\r\n    mutation deleteProduct($product_id: Float!) {\r\n  deleteProduct(product_id: $product_id)\r\n}\r\n    `;\r\nexport type DeleteProductMutationFn = Apollo.MutationFunction<DeleteProductMutation, DeleteProductMutationVariables>;\r\n\r\n/**\r\n * __useDeleteProductMutation__\r\n *\r\n * To run a mutation, you first call `useDeleteProductMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useDeleteProductMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [deleteProductMutation, { data, loading, error }] = useDeleteProductMutation({\r\n *   variables: {\r\n *      product_id: // value for 'product_id'\r\n *   },\r\n * });\r\n */\r\nexport function useDeleteProductMutation(baseOptions?: Apollo.MutationHookOptions<DeleteProductMutation, DeleteProductMutationVariables>) {\r\n        return Apollo.useMutation<DeleteProductMutation, DeleteProductMutationVariables>(DeleteProductDocument, baseOptions);\r\n      }\r\nexport type DeleteProductMutationHookResult = ReturnType<typeof useDeleteProductMutation>;\r\nexport type DeleteProductMutationResult = Apollo.MutationResult<DeleteProductMutation>;\r\nexport type DeleteProductMutationOptions = Apollo.BaseMutationOptions<DeleteProductMutation, DeleteProductMutationVariables>;\r\nexport const DeleteSectionDocument = gql`\r\n    mutation deleteSection($section_id: Float!) {\r\n  deleteSection(section_id: $section_id)\r\n}\r\n    `;\r\nexport type DeleteSectionMutationFn = Apollo.MutationFunction<DeleteSectionMutation, DeleteSectionMutationVariables>;\r\n\r\n/**\r\n * __useDeleteSectionMutation__\r\n *\r\n * To run a mutation, you first call `useDeleteSectionMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useDeleteSectionMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [deleteSectionMutation, { data, loading, error }] = useDeleteSectionMutation({\r\n *   variables: {\r\n *      section_id: // value for 'section_id'\r\n *   },\r\n * });\r\n */\r\nexport function useDeleteSectionMutation(baseOptions?: Apollo.MutationHookOptions<DeleteSectionMutation, DeleteSectionMutationVariables>) {\r\n        return Apollo.useMutation<DeleteSectionMutation, DeleteSectionMutationVariables>(DeleteSectionDocument, baseOptions);\r\n      }\r\nexport type DeleteSectionMutationHookResult = ReturnType<typeof useDeleteSectionMutation>;\r\nexport type DeleteSectionMutationResult = Apollo.MutationResult<DeleteSectionMutation>;\r\nexport type DeleteSectionMutationOptions = Apollo.BaseMutationOptions<DeleteSectionMutation, DeleteSectionMutationVariables>;\r\nexport const EditTrackingDocument = gql`\r\n    mutation editTracking($new_tracking_num: String!, $order_id: Float!) {\r\n  editTracking(new_tracking_num: $new_tracking_num, order_id: $order_id)\r\n}\r\n    `;\r\nexport type EditTrackingMutationFn = Apollo.MutationFunction<EditTrackingMutation, EditTrackingMutationVariables>;\r\n\r\n/**\r\n * __useEditTrackingMutation__\r\n *\r\n * To run a mutation, you first call `useEditTrackingMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useEditTrackingMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [editTrackingMutation, { data, loading, error }] = useEditTrackingMutation({\r\n *   variables: {\r\n *      new_tracking_num: // value for 'new_tracking_num'\r\n *      order_id: // value for 'order_id'\r\n *   },\r\n * });\r\n */\r\nexport function useEditTrackingMutation(baseOptions?: Apollo.MutationHookOptions<EditTrackingMutation, EditTrackingMutationVariables>) {\r\n        return Apollo.useMutation<EditTrackingMutation, EditTrackingMutationVariables>(EditTrackingDocument, baseOptions);\r\n      }\r\nexport type EditTrackingMutationHookResult = ReturnType<typeof useEditTrackingMutation>;\r\nexport type EditTrackingMutationResult = Apollo.MutationResult<EditTrackingMutation>;\r\nexport type EditTrackingMutationOptions = Apollo.BaseMutationOptions<EditTrackingMutation, EditTrackingMutationVariables>;\r\nexport const GetAnnouncementsDocument = gql`\r\n    query getAnnouncements {\r\n  getAnnouncements {\r\n    id\r\n    text\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetAnnouncementsQuery__\r\n *\r\n * To run a query within a React component, call `useGetAnnouncementsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetAnnouncementsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetAnnouncementsQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useGetAnnouncementsQuery(baseOptions?: Apollo.QueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\r\n        return Apollo.useQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\r\n      }\r\nexport function useGetAnnouncementsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\r\n        }\r\nexport type GetAnnouncementsQueryHookResult = ReturnType<typeof useGetAnnouncementsQuery>;\r\nexport type GetAnnouncementsLazyQueryHookResult = ReturnType<typeof useGetAnnouncementsLazyQuery>;\r\nexport type GetAnnouncementsQueryResult = Apollo.QueryResult<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>;\r\nexport const GetApiUsersDocument = gql`\r\n    query getApiUsers {\r\n  getApiUsers {\r\n    uuid\r\n    username\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetApiUsersQuery__\r\n *\r\n * To run a query within a React component, call `useGetApiUsersQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetApiUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetApiUsersQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useGetApiUsersQuery(baseOptions?: Apollo.QueryHookOptions<GetApiUsersQuery, GetApiUsersQueryVariables>) {\r\n        return Apollo.useQuery<GetApiUsersQuery, GetApiUsersQueryVariables>(GetApiUsersDocument, baseOptions);\r\n      }\r\nexport function useGetApiUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetApiUsersQuery, GetApiUsersQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetApiUsersQuery, GetApiUsersQueryVariables>(GetApiUsersDocument, baseOptions);\r\n        }\r\nexport type GetApiUsersQueryHookResult = ReturnType<typeof useGetApiUsersQuery>;\r\nexport type GetApiUsersLazyQueryHookResult = ReturnType<typeof useGetApiUsersLazyQuery>;\r\nexport type GetApiUsersQueryResult = Apollo.QueryResult<GetApiUsersQuery, GetApiUsersQueryVariables>;\r\nexport const GetCouponsDocument = gql`\r\n    query getCoupons {\r\n  getCoupons {\r\n    coupon_name\r\n    coupon_id\r\n    discount\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetCouponsQuery__\r\n *\r\n * To run a query within a React component, call `useGetCouponsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetCouponsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetCouponsQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useGetCouponsQuery(baseOptions?: Apollo.QueryHookOptions<GetCouponsQuery, GetCouponsQueryVariables>) {\r\n        return Apollo.useQuery<GetCouponsQuery, GetCouponsQueryVariables>(GetCouponsDocument, baseOptions);\r\n      }\r\nexport function useGetCouponsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCouponsQuery, GetCouponsQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetCouponsQuery, GetCouponsQueryVariables>(GetCouponsDocument, baseOptions);\r\n        }\r\nexport type GetCouponsQueryHookResult = ReturnType<typeof useGetCouponsQuery>;\r\nexport type GetCouponsLazyQueryHookResult = ReturnType<typeof useGetCouponsLazyQuery>;\r\nexport type GetCouponsQueryResult = Apollo.QueryResult<GetCouponsQuery, GetCouponsQueryVariables>;\r\nexport const GetMaintenanceDocument = gql`\r\n    query getMaintenance {\r\n  getMaintenance\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetMaintenanceQuery__\r\n *\r\n * To run a query within a React component, call `useGetMaintenanceQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetMaintenanceQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetMaintenanceQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useGetMaintenanceQuery(baseOptions?: Apollo.QueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\r\n        return Apollo.useQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\r\n      }\r\nexport function useGetMaintenanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\r\n        }\r\nexport type GetMaintenanceQueryHookResult = ReturnType<typeof useGetMaintenanceQuery>;\r\nexport type GetMaintenanceLazyQueryHookResult = ReturnType<typeof useGetMaintenanceLazyQuery>;\r\nexport type GetMaintenanceQueryResult = Apollo.QueryResult<GetMaintenanceQuery, GetMaintenanceQueryVariables>;\r\nexport const GetOrderByIdDocument = gql`\r\n    query getOrderById($order_id: Float!) {\r\n  getOrderById(order_id: $order_id) {\r\n    products {\r\n      product_id\r\n      name\r\n      desc\r\n      price\r\n      stock\r\n      exp_date\r\n      quantityOrdered\r\n      productSubtotal\r\n      images {\r\n        img_id\r\n        img_url\r\n        index\r\n      }\r\n    }\r\n    order_id\r\n    tracking_num\r\n    shipping\r\n    warning\r\n    order_total\r\n    coupon\r\n    discount\r\n    date_of_purchase\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetOrderByIdQuery__\r\n *\r\n * To run a query within a React component, call `useGetOrderByIdQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetOrderByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetOrderByIdQuery({\r\n *   variables: {\r\n *      order_id: // value for 'order_id'\r\n *   },\r\n * });\r\n */\r\nexport function useGetOrderByIdQuery(baseOptions: Apollo.QueryHookOptions<GetOrderByIdQuery, GetOrderByIdQueryVariables>) {\r\n        return Apollo.useQuery<GetOrderByIdQuery, GetOrderByIdQueryVariables>(GetOrderByIdDocument, baseOptions);\r\n      }\r\nexport function useGetOrderByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrderByIdQuery, GetOrderByIdQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetOrderByIdQuery, GetOrderByIdQueryVariables>(GetOrderByIdDocument, baseOptions);\r\n        }\r\nexport type GetOrderByIdQueryHookResult = ReturnType<typeof useGetOrderByIdQuery>;\r\nexport type GetOrderByIdLazyQueryHookResult = ReturnType<typeof useGetOrderByIdLazyQuery>;\r\nexport type GetOrderByIdQueryResult = Apollo.QueryResult<GetOrderByIdQuery, GetOrderByIdQueryVariables>;\r\nexport const GetOrdersDocument = gql`\r\n    query getOrders {\r\n  getOrders {\r\n    products {\r\n      product_id\r\n      name\r\n      desc\r\n      price\r\n      stock\r\n      exp_date\r\n      quantityOrdered\r\n      productSubtotal\r\n      images {\r\n        img_id\r\n        img_url\r\n        index\r\n      }\r\n    }\r\n    order_id\r\n    tracking_num\r\n    order_total\r\n    coupon\r\n    discount\r\n    shipping\r\n    warning\r\n    date_of_purchase\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetOrdersQuery__\r\n *\r\n * To run a query within a React component, call `useGetOrdersQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetOrdersQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useGetOrdersQuery(baseOptions?: Apollo.QueryHookOptions<GetOrdersQuery, GetOrdersQueryVariables>) {\r\n        return Apollo.useQuery<GetOrdersQuery, GetOrdersQueryVariables>(GetOrdersDocument, baseOptions);\r\n      }\r\nexport function useGetOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrdersQuery, GetOrdersQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetOrdersQuery, GetOrdersQueryVariables>(GetOrdersDocument, baseOptions);\r\n        }\r\nexport type GetOrdersQueryHookResult = ReturnType<typeof useGetOrdersQuery>;\r\nexport type GetOrdersLazyQueryHookResult = ReturnType<typeof useGetOrdersLazyQuery>;\r\nexport type GetOrdersQueryResult = Apollo.QueryResult<GetOrdersQuery, GetOrdersQueryVariables>;\r\nexport const ApiGetProductDocument = gql`\r\n    query apiGetProduct($product_id: Float!) {\r\n  apiGetProduct(product_id: $product_id) {\r\n    product_id\r\n    name\r\n    desc\r\n    price\r\n    stock\r\n    exp_date\r\n    images {\r\n      img_id\r\n      img_url\r\n    }\r\n    hidden\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useApiGetProductQuery__\r\n *\r\n * To run a query within a React component, call `useApiGetProductQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useApiGetProductQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useApiGetProductQuery({\r\n *   variables: {\r\n *      product_id: // value for 'product_id'\r\n *   },\r\n * });\r\n */\r\nexport function useApiGetProductQuery(baseOptions: Apollo.QueryHookOptions<ApiGetProductQuery, ApiGetProductQueryVariables>) {\r\n        return Apollo.useQuery<ApiGetProductQuery, ApiGetProductQueryVariables>(ApiGetProductDocument, baseOptions);\r\n      }\r\nexport function useApiGetProductLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ApiGetProductQuery, ApiGetProductQueryVariables>) {\r\n          return Apollo.useLazyQuery<ApiGetProductQuery, ApiGetProductQueryVariables>(ApiGetProductDocument, baseOptions);\r\n        }\r\nexport type ApiGetProductQueryHookResult = ReturnType<typeof useApiGetProductQuery>;\r\nexport type ApiGetProductLazyQueryHookResult = ReturnType<typeof useApiGetProductLazyQuery>;\r\nexport type ApiGetProductQueryResult = Apollo.QueryResult<ApiGetProductQuery, ApiGetProductQueryVariables>;\r\nexport const GetProductShippingDocument = gql`\r\n    query getProductShipping($product_id: Float!) {\r\n  getProductShipping(product_id: $product_id) {\r\n    shipping_id\r\n    country\r\n    price\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetProductShippingQuery__\r\n *\r\n * To run a query within a React component, call `useGetProductShippingQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetProductShippingQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetProductShippingQuery({\r\n *   variables: {\r\n *      product_id: // value for 'product_id'\r\n *   },\r\n * });\r\n */\r\nexport function useGetProductShippingQuery(baseOptions: Apollo.QueryHookOptions<GetProductShippingQuery, GetProductShippingQueryVariables>) {\r\n        return Apollo.useQuery<GetProductShippingQuery, GetProductShippingQueryVariables>(GetProductShippingDocument, baseOptions);\r\n      }\r\nexport function useGetProductShippingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductShippingQuery, GetProductShippingQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetProductShippingQuery, GetProductShippingQueryVariables>(GetProductShippingDocument, baseOptions);\r\n        }\r\nexport type GetProductShippingQueryHookResult = ReturnType<typeof useGetProductShippingQuery>;\r\nexport type GetProductShippingLazyQueryHookResult = ReturnType<typeof useGetProductShippingLazyQuery>;\r\nexport type GetProductShippingQueryResult = Apollo.QueryResult<GetProductShippingQuery, GetProductShippingQueryVariables>;\r\nexport const ApiGetProductsDocument = gql`\r\n    query apiGetProducts {\r\n  apiGetProducts {\r\n    product_id\r\n    name\r\n    desc\r\n    price\r\n    stock\r\n    exp_date\r\n    images {\r\n      img_id\r\n      img_url\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useApiGetProductsQuery__\r\n *\r\n * To run a query within a React component, call `useApiGetProductsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useApiGetProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useApiGetProductsQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useApiGetProductsQuery(baseOptions?: Apollo.QueryHookOptions<ApiGetProductsQuery, ApiGetProductsQueryVariables>) {\r\n        return Apollo.useQuery<ApiGetProductsQuery, ApiGetProductsQueryVariables>(ApiGetProductsDocument, baseOptions);\r\n      }\r\nexport function useApiGetProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ApiGetProductsQuery, ApiGetProductsQueryVariables>) {\r\n          return Apollo.useLazyQuery<ApiGetProductsQuery, ApiGetProductsQueryVariables>(ApiGetProductsDocument, baseOptions);\r\n        }\r\nexport type ApiGetProductsQueryHookResult = ReturnType<typeof useApiGetProductsQuery>;\r\nexport type ApiGetProductsLazyQueryHookResult = ReturnType<typeof useApiGetProductsLazyQuery>;\r\nexport type ApiGetProductsQueryResult = Apollo.QueryResult<ApiGetProductsQuery, ApiGetProductsQueryVariables>;\r\nexport const GetProductsOptionsDocument = gql`\r\n    query getProductsOptions($product_id: Float!) {\r\n  getProductsOptions(product_id: $product_id) {\r\n    option_id\r\n    name\r\n    price\r\n    stock\r\n    index\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetProductsOptionsQuery__\r\n *\r\n * To run a query within a React component, call `useGetProductsOptionsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetProductsOptionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetProductsOptionsQuery({\r\n *   variables: {\r\n *      product_id: // value for 'product_id'\r\n *   },\r\n * });\r\n */\r\nexport function useGetProductsOptionsQuery(baseOptions: Apollo.QueryHookOptions<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>) {\r\n        return Apollo.useQuery<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>(GetProductsOptionsDocument, baseOptions);\r\n      }\r\nexport function useGetProductsOptionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>(GetProductsOptionsDocument, baseOptions);\r\n        }\r\nexport type GetProductsOptionsQueryHookResult = ReturnType<typeof useGetProductsOptionsQuery>;\r\nexport type GetProductsOptionsLazyQueryHookResult = ReturnType<typeof useGetProductsOptionsLazyQuery>;\r\nexport type GetProductsOptionsQueryResult = Apollo.QueryResult<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>;\r\nexport const GetProductsSectionsDocument = gql`\r\n    query getProductsSections($product_id: Float!) {\r\n  getProductsSections(product_id: $product_id) {\r\n    section_id\r\n    name\r\n    thumbnail\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetProductsSectionsQuery__\r\n *\r\n * To run a query within a React component, call `useGetProductsSectionsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetProductsSectionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetProductsSectionsQuery({\r\n *   variables: {\r\n *      product_id: // value for 'product_id'\r\n *   },\r\n * });\r\n */\r\nexport function useGetProductsSectionsQuery(baseOptions: Apollo.QueryHookOptions<GetProductsSectionsQuery, GetProductsSectionsQueryVariables>) {\r\n        return Apollo.useQuery<GetProductsSectionsQuery, GetProductsSectionsQueryVariables>(GetProductsSectionsDocument, baseOptions);\r\n      }\r\nexport function useGetProductsSectionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsSectionsQuery, GetProductsSectionsQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetProductsSectionsQuery, GetProductsSectionsQueryVariables>(GetProductsSectionsDocument, baseOptions);\r\n        }\r\nexport type GetProductsSectionsQueryHookResult = ReturnType<typeof useGetProductsSectionsQuery>;\r\nexport type GetProductsSectionsLazyQueryHookResult = ReturnType<typeof useGetProductsSectionsLazyQuery>;\r\nexport type GetProductsSectionsQueryResult = Apollo.QueryResult<GetProductsSectionsQuery, GetProductsSectionsQueryVariables>;\r\nexport const GetSectionByIdDocument = gql`\r\n    query getSectionById($section_id: Float!) {\r\n  getSectionById(section_id: $section_id) {\r\n    section_id\r\n    thumbnail\r\n    name\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetSectionByIdQuery__\r\n *\r\n * To run a query within a React component, call `useGetSectionByIdQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetSectionByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetSectionByIdQuery({\r\n *   variables: {\r\n *      section_id: // value for 'section_id'\r\n *   },\r\n * });\r\n */\r\nexport function useGetSectionByIdQuery(baseOptions: Apollo.QueryHookOptions<GetSectionByIdQuery, GetSectionByIdQueryVariables>) {\r\n        return Apollo.useQuery<GetSectionByIdQuery, GetSectionByIdQueryVariables>(GetSectionByIdDocument, baseOptions);\r\n      }\r\nexport function useGetSectionByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSectionByIdQuery, GetSectionByIdQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetSectionByIdQuery, GetSectionByIdQueryVariables>(GetSectionByIdDocument, baseOptions);\r\n        }\r\nexport type GetSectionByIdQueryHookResult = ReturnType<typeof useGetSectionByIdQuery>;\r\nexport type GetSectionByIdLazyQueryHookResult = ReturnType<typeof useGetSectionByIdLazyQuery>;\r\nexport type GetSectionByIdQueryResult = Apollo.QueryResult<GetSectionByIdQuery, GetSectionByIdQueryVariables>;\r\nexport const GetSectionsDocument = gql`\r\n    query getSections {\r\n  getSections {\r\n    section_id\r\n    name\r\n    thumbnail\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetSectionsQuery__\r\n *\r\n * To run a query within a React component, call `useGetSectionsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetSectionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetSectionsQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useGetSectionsQuery(baseOptions?: Apollo.QueryHookOptions<GetSectionsQuery, GetSectionsQueryVariables>) {\r\n        return Apollo.useQuery<GetSectionsQuery, GetSectionsQueryVariables>(GetSectionsDocument, baseOptions);\r\n      }\r\nexport function useGetSectionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSectionsQuery, GetSectionsQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetSectionsQuery, GetSectionsQueryVariables>(GetSectionsDocument, baseOptions);\r\n        }\r\nexport type GetSectionsQueryHookResult = ReturnType<typeof useGetSectionsQuery>;\r\nexport type GetSectionsLazyQueryHookResult = ReturnType<typeof useGetSectionsLazyQuery>;\r\nexport type GetSectionsQueryResult = Apollo.QueryResult<GetSectionsQuery, GetSectionsQueryVariables>;\r\nexport const GetSectionsProductsDocument = gql`\r\n    query getSectionsProducts($section_id: Float!) {\r\n  getSectionsProducts(section_id: $section_id) {\r\n    product_id\r\n    name\r\n    desc\r\n    price\r\n    stock\r\n    org_stock\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetSectionsProductsQuery__\r\n *\r\n * To run a query within a React component, call `useGetSectionsProductsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetSectionsProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetSectionsProductsQuery({\r\n *   variables: {\r\n *      section_id: // value for 'section_id'\r\n *   },\r\n * });\r\n */\r\nexport function useGetSectionsProductsQuery(baseOptions: Apollo.QueryHookOptions<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>) {\r\n        return Apollo.useQuery<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>(GetSectionsProductsDocument, baseOptions);\r\n      }\r\nexport function useGetSectionsProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>(GetSectionsProductsDocument, baseOptions);\r\n        }\r\nexport type GetSectionsProductsQueryHookResult = ReturnType<typeof useGetSectionsProductsQuery>;\r\nexport type GetSectionsProductsLazyQueryHookResult = ReturnType<typeof useGetSectionsProductsLazyQuery>;\r\nexport type GetSectionsProductsQueryResult = Apollo.QueryResult<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>;\r\nexport const GetSocialsDocument = gql`\r\n    query getSocials($component: String!) {\r\n  getSocials(component: $component) {\r\n    id\r\n    index\r\n    social_url\r\n    social_logo\r\n    display\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetSocialsQuery__\r\n *\r\n * To run a query within a React component, call `useGetSocialsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetSocialsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetSocialsQuery({\r\n *   variables: {\r\n *      component: // value for 'component'\r\n *   },\r\n * });\r\n */\r\nexport function useGetSocialsQuery(baseOptions: Apollo.QueryHookOptions<GetSocialsQuery, GetSocialsQueryVariables>) {\r\n        return Apollo.useQuery<GetSocialsQuery, GetSocialsQueryVariables>(GetSocialsDocument, baseOptions);\r\n      }\r\nexport function useGetSocialsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSocialsQuery, GetSocialsQueryVariables>) {\r\n          return Apollo.useLazyQuery<GetSocialsQuery, GetSocialsQueryVariables>(GetSocialsDocument, baseOptions);\r\n        }\r\nexport type GetSocialsQueryHookResult = ReturnType<typeof useGetSocialsQuery>;\r\nexport type GetSocialsLazyQueryHookResult = ReturnType<typeof useGetSocialsLazyQuery>;\r\nexport type GetSocialsQueryResult = Apollo.QueryResult<GetSocialsQuery, GetSocialsQueryVariables>;\r\nexport const InitSocialsDocument = gql`\r\n    mutation initSocials {\r\n  initSocials\r\n}\r\n    `;\r\nexport type InitSocialsMutationFn = Apollo.MutationFunction<InitSocialsMutation, InitSocialsMutationVariables>;\r\n\r\n/**\r\n * __useInitSocialsMutation__\r\n *\r\n * To run a mutation, you first call `useInitSocialsMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useInitSocialsMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [initSocialsMutation, { data, loading, error }] = useInitSocialsMutation({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useInitSocialsMutation(baseOptions?: Apollo.MutationHookOptions<InitSocialsMutation, InitSocialsMutationVariables>) {\r\n        return Apollo.useMutation<InitSocialsMutation, InitSocialsMutationVariables>(InitSocialsDocument, baseOptions);\r\n      }\r\nexport type InitSocialsMutationHookResult = ReturnType<typeof useInitSocialsMutation>;\r\nexport type InitSocialsMutationResult = Apollo.MutationResult<InitSocialsMutation>;\r\nexport type InitSocialsMutationOptions = Apollo.BaseMutationOptions<InitSocialsMutation, InitSocialsMutationVariables>;\r\nexport const RemoveImgFromProductDocument = gql`\r\n    mutation removeImgFromProduct($img_id: Float!) {\r\n  removeImgFromProduct(img_id: $img_id)\r\n}\r\n    `;\r\nexport type RemoveImgFromProductMutationFn = Apollo.MutationFunction<RemoveImgFromProductMutation, RemoveImgFromProductMutationVariables>;\r\n\r\n/**\r\n * __useRemoveImgFromProductMutation__\r\n *\r\n * To run a mutation, you first call `useRemoveImgFromProductMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useRemoveImgFromProductMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [removeImgFromProductMutation, { data, loading, error }] = useRemoveImgFromProductMutation({\r\n *   variables: {\r\n *      img_id: // value for 'img_id'\r\n *   },\r\n * });\r\n */\r\nexport function useRemoveImgFromProductMutation(baseOptions?: Apollo.MutationHookOptions<RemoveImgFromProductMutation, RemoveImgFromProductMutationVariables>) {\r\n        return Apollo.useMutation<RemoveImgFromProductMutation, RemoveImgFromProductMutationVariables>(RemoveImgFromProductDocument, baseOptions);\r\n      }\r\nexport type RemoveImgFromProductMutationHookResult = ReturnType<typeof useRemoveImgFromProductMutation>;\r\nexport type RemoveImgFromProductMutationResult = Apollo.MutationResult<RemoveImgFromProductMutation>;\r\nexport type RemoveImgFromProductMutationOptions = Apollo.BaseMutationOptions<RemoveImgFromProductMutation, RemoveImgFromProductMutationVariables>;\r\nexport const RemoveProductFromSectionDocument = gql`\r\n    mutation removeProductFromSection($product_id: Float!, $section_id: Float!) {\r\n  removeProductFromSection(product_id: $product_id, section_id: $section_id)\r\n}\r\n    `;\r\nexport type RemoveProductFromSectionMutationFn = Apollo.MutationFunction<RemoveProductFromSectionMutation, RemoveProductFromSectionMutationVariables>;\r\n\r\n/**\r\n * __useRemoveProductFromSectionMutation__\r\n *\r\n * To run a mutation, you first call `useRemoveProductFromSectionMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useRemoveProductFromSectionMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [removeProductFromSectionMutation, { data, loading, error }] = useRemoveProductFromSectionMutation({\r\n *   variables: {\r\n *      product_id: // value for 'product_id'\r\n *      section_id: // value for 'section_id'\r\n *   },\r\n * });\r\n */\r\nexport function useRemoveProductFromSectionMutation(baseOptions?: Apollo.MutationHookOptions<RemoveProductFromSectionMutation, RemoveProductFromSectionMutationVariables>) {\r\n        return Apollo.useMutation<RemoveProductFromSectionMutation, RemoveProductFromSectionMutationVariables>(RemoveProductFromSectionDocument, baseOptions);\r\n      }\r\nexport type RemoveProductFromSectionMutationHookResult = ReturnType<typeof useRemoveProductFromSectionMutation>;\r\nexport type RemoveProductFromSectionMutationResult = Apollo.MutationResult<RemoveProductFromSectionMutation>;\r\nexport type RemoveProductFromSectionMutationOptions = Apollo.BaseMutationOptions<RemoveProductFromSectionMutation, RemoveProductFromSectionMutationVariables>;\r\nexport const RemoveWarningDocument = gql`\r\n    mutation removeWarning($order_id: Float!) {\r\n  removeWarning(order_id: $order_id)\r\n}\r\n    `;\r\nexport type RemoveWarningMutationFn = Apollo.MutationFunction<RemoveWarningMutation, RemoveWarningMutationVariables>;\r\n\r\n/**\r\n * __useRemoveWarningMutation__\r\n *\r\n * To run a mutation, you first call `useRemoveWarningMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useRemoveWarningMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [removeWarningMutation, { data, loading, error }] = useRemoveWarningMutation({\r\n *   variables: {\r\n *      order_id: // value for 'order_id'\r\n *   },\r\n * });\r\n */\r\nexport function useRemoveWarningMutation(baseOptions?: Apollo.MutationHookOptions<RemoveWarningMutation, RemoveWarningMutationVariables>) {\r\n        return Apollo.useMutation<RemoveWarningMutation, RemoveWarningMutationVariables>(RemoveWarningDocument, baseOptions);\r\n      }\r\nexport type RemoveWarningMutationHookResult = ReturnType<typeof useRemoveWarningMutation>;\r\nexport type RemoveWarningMutationResult = Apollo.MutationResult<RemoveWarningMutation>;\r\nexport type RemoveWarningMutationOptions = Apollo.BaseMutationOptions<RemoveWarningMutation, RemoveWarningMutationVariables>;\r\nexport const ToggleMaintenanceDocument = gql`\r\n    mutation toggleMaintenance {\r\n  toggleMaintenance\r\n}\r\n    `;\r\nexport type ToggleMaintenanceMutationFn = Apollo.MutationFunction<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>;\r\n\r\n/**\r\n * __useToggleMaintenanceMutation__\r\n *\r\n * To run a mutation, you first call `useToggleMaintenanceMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useToggleMaintenanceMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [toggleMaintenanceMutation, { data, loading, error }] = useToggleMaintenanceMutation({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useToggleMaintenanceMutation(baseOptions?: Apollo.MutationHookOptions<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>) {\r\n        return Apollo.useMutation<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>(ToggleMaintenanceDocument, baseOptions);\r\n      }\r\nexport type ToggleMaintenanceMutationHookResult = ReturnType<typeof useToggleMaintenanceMutation>;\r\nexport type ToggleMaintenanceMutationResult = Apollo.MutationResult<ToggleMaintenanceMutation>;\r\nexport type ToggleMaintenanceMutationOptions = Apollo.BaseMutationOptions<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>;\r\nexport const ToggleProductDisplayDocument = gql`\r\n    mutation toggleProductDisplay($product_id: Float!) {\r\n  toggleProductDisplay(product_id: $product_id)\r\n}\r\n    `;\r\nexport type ToggleProductDisplayMutationFn = Apollo.MutationFunction<ToggleProductDisplayMutation, ToggleProductDisplayMutationVariables>;\r\n\r\n/**\r\n * __useToggleProductDisplayMutation__\r\n *\r\n * To run a mutation, you first call `useToggleProductDisplayMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useToggleProductDisplayMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [toggleProductDisplayMutation, { data, loading, error }] = useToggleProductDisplayMutation({\r\n *   variables: {\r\n *      product_id: // value for 'product_id'\r\n *   },\r\n * });\r\n */\r\nexport function useToggleProductDisplayMutation(baseOptions?: Apollo.MutationHookOptions<ToggleProductDisplayMutation, ToggleProductDisplayMutationVariables>) {\r\n        return Apollo.useMutation<ToggleProductDisplayMutation, ToggleProductDisplayMutationVariables>(ToggleProductDisplayDocument, baseOptions);\r\n      }\r\nexport type ToggleProductDisplayMutationHookResult = ReturnType<typeof useToggleProductDisplayMutation>;\r\nexport type ToggleProductDisplayMutationResult = Apollo.MutationResult<ToggleProductDisplayMutation>;\r\nexport type ToggleProductDisplayMutationOptions = Apollo.BaseMutationOptions<ToggleProductDisplayMutation, ToggleProductDisplayMutationVariables>;\r\nexport const ToggleSocialDisplayDocument = gql`\r\n    mutation toggleSocialDisplay($id: Float!) {\r\n  toggleSocialDisplay(id: $id)\r\n}\r\n    `;\r\nexport type ToggleSocialDisplayMutationFn = Apollo.MutationFunction<ToggleSocialDisplayMutation, ToggleSocialDisplayMutationVariables>;\r\n\r\n/**\r\n * __useToggleSocialDisplayMutation__\r\n *\r\n * To run a mutation, you first call `useToggleSocialDisplayMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useToggleSocialDisplayMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [toggleSocialDisplayMutation, { data, loading, error }] = useToggleSocialDisplayMutation({\r\n *   variables: {\r\n *      id: // value for 'id'\r\n *   },\r\n * });\r\n */\r\nexport function useToggleSocialDisplayMutation(baseOptions?: Apollo.MutationHookOptions<ToggleSocialDisplayMutation, ToggleSocialDisplayMutationVariables>) {\r\n        return Apollo.useMutation<ToggleSocialDisplayMutation, ToggleSocialDisplayMutationVariables>(ToggleSocialDisplayDocument, baseOptions);\r\n      }\r\nexport type ToggleSocialDisplayMutationHookResult = ReturnType<typeof useToggleSocialDisplayMutation>;\r\nexport type ToggleSocialDisplayMutationResult = Apollo.MutationResult<ToggleSocialDisplayMutation>;\r\nexport type ToggleSocialDisplayMutationOptions = Apollo.BaseMutationOptions<ToggleSocialDisplayMutation, ToggleSocialDisplayMutationVariables>;\r\nexport const UpdateOptionsDocument = gql`\r\n    mutation updateOptions($options_str: String!) {\r\n  updateOptions(options_str: $options_str)\r\n}\r\n    `;\r\nexport type UpdateOptionsMutationFn = Apollo.MutationFunction<UpdateOptionsMutation, UpdateOptionsMutationVariables>;\r\n\r\n/**\r\n * __useUpdateOptionsMutation__\r\n *\r\n * To run a mutation, you first call `useUpdateOptionsMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useUpdateOptionsMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [updateOptionsMutation, { data, loading, error }] = useUpdateOptionsMutation({\r\n *   variables: {\r\n *      options_str: // value for 'options_str'\r\n *   },\r\n * });\r\n */\r\nexport function useUpdateOptionsMutation(baseOptions?: Apollo.MutationHookOptions<UpdateOptionsMutation, UpdateOptionsMutationVariables>) {\r\n        return Apollo.useMutation<UpdateOptionsMutation, UpdateOptionsMutationVariables>(UpdateOptionsDocument, baseOptions);\r\n      }\r\nexport type UpdateOptionsMutationHookResult = ReturnType<typeof useUpdateOptionsMutation>;\r\nexport type UpdateOptionsMutationResult = Apollo.MutationResult<UpdateOptionsMutation>;\r\nexport type UpdateOptionsMutationOptions = Apollo.BaseMutationOptions<UpdateOptionsMutation, UpdateOptionsMutationVariables>;\r\nexport const UpdateProductDocument = gql`\r\n    mutation updateProduct($product_id: Float!, $name: String!, $desc: String!, $price: Float!, $stock: Float!) {\r\n  updateProduct(\r\n    product_id: $product_id\r\n    name: $name\r\n    desc: $desc\r\n    price: $price\r\n    stock: $stock\r\n  )\r\n}\r\n    `;\r\nexport type UpdateProductMutationFn = Apollo.MutationFunction<UpdateProductMutation, UpdateProductMutationVariables>;\r\n\r\n/**\r\n * __useUpdateProductMutation__\r\n *\r\n * To run a mutation, you first call `useUpdateProductMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useUpdateProductMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [updateProductMutation, { data, loading, error }] = useUpdateProductMutation({\r\n *   variables: {\r\n *      product_id: // value for 'product_id'\r\n *      name: // value for 'name'\r\n *      desc: // value for 'desc'\r\n *      price: // value for 'price'\r\n *      stock: // value for 'stock'\r\n *   },\r\n * });\r\n */\r\nexport function useUpdateProductMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProductMutation, UpdateProductMutationVariables>) {\r\n        return Apollo.useMutation<UpdateProductMutation, UpdateProductMutationVariables>(UpdateProductDocument, baseOptions);\r\n      }\r\nexport type UpdateProductMutationHookResult = ReturnType<typeof useUpdateProductMutation>;\r\nexport type UpdateProductMutationResult = Apollo.MutationResult<UpdateProductMutation>;\r\nexport type UpdateProductMutationOptions = Apollo.BaseMutationOptions<UpdateProductMutation, UpdateProductMutationVariables>;\r\nexport const UpdateSectionDocument = gql`\r\n    mutation updateSection($name: String!, $thumbnail: String!, $section_id: Float!) {\r\n  updateSection(name: $name, thumbnail: $thumbnail, section_id: $section_id)\r\n}\r\n    `;\r\nexport type UpdateSectionMutationFn = Apollo.MutationFunction<UpdateSectionMutation, UpdateSectionMutationVariables>;\r\n\r\n/**\r\n * __useUpdateSectionMutation__\r\n *\r\n * To run a mutation, you first call `useUpdateSectionMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useUpdateSectionMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [updateSectionMutation, { data, loading, error }] = useUpdateSectionMutation({\r\n *   variables: {\r\n *      name: // value for 'name'\r\n *      thumbnail: // value for 'thumbnail'\r\n *      section_id: // value for 'section_id'\r\n *   },\r\n * });\r\n */\r\nexport function useUpdateSectionMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSectionMutation, UpdateSectionMutationVariables>) {\r\n        return Apollo.useMutation<UpdateSectionMutation, UpdateSectionMutationVariables>(UpdateSectionDocument, baseOptions);\r\n      }\r\nexport type UpdateSectionMutationHookResult = ReturnType<typeof useUpdateSectionMutation>;\r\nexport type UpdateSectionMutationResult = Apollo.MutationResult<UpdateSectionMutation>;\r\nexport type UpdateSectionMutationOptions = Apollo.BaseMutationOptions<UpdateSectionMutation, UpdateSectionMutationVariables>;\r\nexport const UpdateSocialUrlDocument = gql`\r\n    mutation updateSocialUrl($url: String!, $id: Float!) {\r\n  updateSocialUrl(url: $url, id: $id)\r\n}\r\n    `;\r\nexport type UpdateSocialUrlMutationFn = Apollo.MutationFunction<UpdateSocialUrlMutation, UpdateSocialUrlMutationVariables>;\r\n\r\n/**\r\n * __useUpdateSocialUrlMutation__\r\n *\r\n * To run a mutation, you first call `useUpdateSocialUrlMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useUpdateSocialUrlMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [updateSocialUrlMutation, { data, loading, error }] = useUpdateSocialUrlMutation({\r\n *   variables: {\r\n *      url: // value for 'url'\r\n *      id: // value for 'id'\r\n *   },\r\n * });\r\n */\r\nexport function useUpdateSocialUrlMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSocialUrlMutation, UpdateSocialUrlMutationVariables>) {\r\n        return Apollo.useMutation<UpdateSocialUrlMutation, UpdateSocialUrlMutationVariables>(UpdateSocialUrlDocument, baseOptions);\r\n      }\r\nexport type UpdateSocialUrlMutationHookResult = ReturnType<typeof useUpdateSocialUrlMutation>;\r\nexport type UpdateSocialUrlMutationResult = Apollo.MutationResult<UpdateSocialUrlMutation>;\r\nexport type UpdateSocialUrlMutationOptions = Apollo.BaseMutationOptions<UpdateSocialUrlMutation, UpdateSocialUrlMutationVariables>;","import { useState } from \"react\";\r\nimport {\r\n    useAddImgToProductMutation,\r\n    useAddProductMutation,\r\n} from \"../../generated/graphql\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport Axios from \"axios\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nconst AddProducts = () => {\r\n    const [addProduct] = useAddProductMutation();\r\n    const [addImgToProduct] = useAddImgToProductMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\");\r\n    const [stock, setStock] = useState(\"\");\r\n    const [image_urls, setImage_urls] = useState([]);\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    const handleSubmit = async () => {\r\n        if (!name || !desc || !price || !stock || !image_urls[0]) {\r\n            inputValidation(name, desc, price, stock, image_urls);\r\n        } else {\r\n            try {\r\n                let product_id = await addProduct({\r\n                    variables: {\r\n                        name,\r\n                        desc,\r\n                        price: Number(price),\r\n                        stock: Number(stock),\r\n                    },\r\n                });\r\n\r\n                //ADD IMAGES TO PRODUCT\r\n                for (let i = 0; i < image_urls.length; i++) {\r\n                    await addImgToProduct({\r\n                        variables: {\r\n                            img_url: image_urls[i],\r\n                            product_id: Number(product_id.data!.addProduct),\r\n                        },\r\n                    });\r\n                }\r\n\r\n                setRedirect(true);\r\n            } catch {\r\n                M.toast({ html: \"Could not add product\" });\r\n            }\r\n        }\r\n        document.getElementById(\"submit-btn\")?.classList.remove(\"disabled\");\r\n    };\r\n\r\n    const addImages = async (files: any) => {\r\n        {\r\n            for (let i = 0; i < files.length; i++) {\r\n                const form = new FormData();\r\n\r\n                if (\r\n                    !process.env.REACT_APP_CLOUDINARY_CLOUD_NAME ||\r\n                    !process.env.REACT_APP_CLOUDINARY_API_KEY\r\n                ) {\r\n                    M.toast({ html: \"env err\" });\r\n                    return;\r\n                }\r\n\r\n                form.append(\r\n                    \"api_key\",\r\n                    `${process.env.REACT_APP_CLOUDINARY_API_KEY}`\r\n                ); //get api key from cloudinary\r\n\r\n                form.append(\"file\", files[i]);\r\n                form.append(\"tags\", `codeinfuse, medium, gist`);\r\n                form.append(\"upload_preset\", \"re5zmdqn\");\r\n                let t = (Date.now() / 1000) | 0;\r\n                form.append(\"timestamp\", `${t}`);\r\n\r\n                // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n                let res = await Axios.post(\r\n                    `https://api.cloudinary.com/v1_1/${process.env.REACT_APP_CLOUDINARY_CLOUD_NAME}/image/upload`,\r\n                    form,\r\n                    {\r\n                        headers: {\r\n                            \"X-Requested-With\": \"XMLHttpRequest\",\r\n                        },\r\n                    }\r\n                );\r\n\r\n                let tmp: any = image_urls;\r\n                tmp.push(res.data.secure_url);\r\n                setImage_urls(tmp);\r\n            }\r\n            setRefresh(!refresh);\r\n        }\r\n    };\r\n    if (redirect) {\r\n        return (\r\n            <Redirect to={{ pathname: \"/products\", state: { reload: true } }} />\r\n        );\r\n    }\r\n    console.log(process.env.REACT_APP_CLOUDINARY_CLOUD_NAME)\r\n\r\n    return (\r\n        <div className=\"container\" style={{ width: \"50%\" }}>\r\n            <div className=\"row\">\r\n                <h5>Add A Product</h5>\r\n            </div>\r\n\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => setName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"name\">Name</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product name\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <textarea\r\n                            id=\"desc\"\r\n                            value={desc}\r\n                            className=\"materialize-textarea\"\r\n                            onChange={e => setDesc(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"desc\">Description</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product description\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"price\"\r\n                            type=\"text\"\r\n                            value={price}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                                if (!e.target.value.match(/\\D/g)) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"price\">Price</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product price\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"stock\"\r\n                            type=\"text\"\r\n                            value={stock}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                                if (!e.target.value.match(/\\D/g)) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"stock\">Stock</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a stock amount\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"container\">\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"space-between\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            id=\"submit-btn\"\r\n                            className=\"btn green\"\r\n                            onClick={() => {\r\n                                document\r\n                                    .getElementById(\"submit-btn\")!\r\n                                    .classList.add(\"disabled\");\r\n                                handleSubmit();\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </button>\r\n\r\n                        <Dropzone onDrop={async files => addImages(files)}>\r\n                            {({ getRootProps, getInputProps }) => (\r\n                                <div {...getRootProps()}>\r\n                                    <input {...getInputProps()} />\r\n                                    <button className=\"btn black\">\r\n                                        Add Images\r\n                                    </button>\r\n                                </div>\r\n                            )}\r\n                        </Dropzone>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n            {image_urls.length === 0 ? (\r\n                <></>\r\n            ) : (\r\n                <>\r\n                    {image_urls.map((_val, i) => {\r\n                        return <img src={image_urls[i] as any} />;\r\n                    })}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\nexport default AddProducts;\r\n\r\nconst inputValidation = (\r\n    name: any,\r\n    desc: any,\r\n    price: any,\r\n    stock: any,\r\n    image_urls: any\r\n) => {\r\n    let ids = [\"name\", \"desc\", \"price\", \"stock\"],\r\n        doc = document;\r\n\r\n    for (let i = 0; i < ids.length; i++) {\r\n        try {\r\n            doc.getElementById(ids[i])!.classList.remove(\"invalid\");\r\n        } catch {}\r\n    }\r\n\r\n    if (!name) {\r\n        doc.getElementById(\"name\")!.classList.add(\"invalid\");\r\n    }\r\n    if (!desc) {\r\n        doc.getElementById(\"desc\")!.classList.add(\"invalid\");\r\n    }\r\n    if (!price) {\r\n        doc.getElementById(\"price\")!.classList.add(\"invalid\");\r\n    }\r\n    if (!stock) {\r\n        doc.getElementById(\"stock\")!.classList.add(\"invalid\");\r\n    }\r\n\r\n    if (!image_urls[0]) {\r\n        M.toast({ html: \"Please add an image to continue\" });\r\n    }\r\n};\r\n","export const GetProductId = () => {\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        return Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        return Number(window.location.href.split(\":\")[3]);\r\n    }\r\n};\r\n","import {\r\n    useAddProductToSectionMutation,\r\n    useRemoveProductFromSectionMutation,\r\n    useUpdateProductMutation,\r\n    useDeleteProductMutation,\r\n    useAddImgToProductMutation,\r\n    useRemoveImgFromProductMutation,\r\n    useAddOptionToProductMutation,\r\n    useToggleProductDisplayMutation,\r\n    useDeleteOptionsMutation,\r\n    useUpdateOptionsMutation,\r\n    useAddShippingToProductMutation,\r\n} from \"../../generated/graphql\";\r\n\r\nconst ProductsMutations = () => {\r\n    const [addProductToSection] = useAddProductToSectionMutation();\r\n    const [removeProductFromSection] = useRemoveProductFromSectionMutation();\r\n    const [updateProduct] = useUpdateProductMutation();\r\n    const [deleteProduct] = useDeleteProductMutation();\r\n    const [addImgToProduct] = useAddImgToProductMutation();\r\n    const [deleteImg] = useRemoveImgFromProductMutation();\r\n    const [ADD_OPT_TO_PRODUCT] = useAddOptionToProductMutation();\r\n    const [toggleDisplay] = useToggleProductDisplayMutation();\r\n    const [deleteOptions] = useDeleteOptionsMutation();\r\n    const [UPDATE_OPTS] = useUpdateOptionsMutation();\r\n    const [addShippingToProduct] = useAddShippingToProductMutation();\r\n\r\n    return {\r\n        addProductToSection,\r\n        removeProductFromSection,\r\n        updateProduct,\r\n        deleteProduct,\r\n        addImgToProduct,\r\n        deleteImg,\r\n        ADD_OPT_TO_PRODUCT,\r\n        toggleDisplay,\r\n        deleteOptions,\r\n        UPDATE_OPTS,\r\n        addShippingToProduct,\r\n    };\r\n};\r\n\r\nexport default ProductsMutations;\r\n","import { useGetProductsSectionsQuery } from \"../../../generated/graphql\";\r\nimport { GetProductId } from \"../GetProductId\";\r\n\r\nexport const GetProductsSections = () => {\r\n    var product_id = GetProductId();\r\n    const { data, loading } = useGetProductsSectionsQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    let pdata = data,\r\n        ploading = loading;\r\n\r\n    return {\r\n        pdata,\r\n        ploading,\r\n    };\r\n};\r\n","import { useGetProductsOptionsQuery } from \"../../../generated/graphql\";\r\nimport { GetProductId } from \"../GetProductId\";\r\n\r\nexport const GetProductsOptions = () => {\r\n    var product_id = GetProductId();\r\n    const { data, loading } = useGetProductsOptionsQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    let odata = data,\r\n        oloading = loading;\r\n\r\n    return {\r\n        odata,\r\n        oloading,\r\n    };\r\n};\r\n","import { useGetProductShippingQuery } from \"../../../generated/graphql\";\r\nimport { GetProductId } from \"../GetProductId\";\r\n\r\nexport const GetProductShipping = () => {\r\n    var product_id = GetProductId();\r\n    const getProductShipping = useGetProductShippingQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n    let shdata = getProductShipping.data,\r\n        shloading = getProductShipping.loading;\r\n\r\n    return { shdata, shloading };\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useApiGetProductQuery } from \"../../generated/graphql\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { GetProductId } from \"./GetProductId\";\r\nimport ProductsMutations from \"./ProductsMutations\";\r\nimport { GetProductsSections } from \"./QueryHooks/GetProductsSections\";\r\nimport { GetProductsOptions } from \"./QueryHooks/GetProductOptions\";\r\nimport { GetProductShipping } from \"./QueryHooks/GetProductShipping\";\r\nimport { GetSections } from \"./QueryHooks/GetSections\";\r\n\r\nconst EditProduct = () => {\r\n    var product_id = GetProductId();\r\n    const {\r\n        addProductToSection,\r\n        removeProductFromSection,\r\n        updateProduct,\r\n        deleteProduct,\r\n        addImgToProduct,\r\n        deleteImg,\r\n        ADD_OPT_TO_PRODUCT,\r\n        toggleDisplay,\r\n        deleteOptions,\r\n        UPDATE_OPTS,\r\n        addShippingToProduct,\r\n    } = ProductsMutations();\r\n\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\"); //price in cents\r\n    const [stock, setStock] = useState(\"\");\r\n    const [image_urls, setImage_urls] = useState([]);\r\n    const [image_ids, setImage_ids] = useState([]);\r\n\r\n    const [sections, setSections] = useState([{}] as any[]);\r\n    const [removedSections, setRemovedSections] = useState([] as number[]);\r\n\r\n    const [optionValues, setOptionValues] = useState([\r\n        {\r\n            id: \"\",\r\n            name: \"\",\r\n            init: true,\r\n            price: \"\",\r\n        },\r\n    ] as any[]);\r\n\r\n    const [options, updateOptions] = useState([] as any);\r\n    const [removedOptions, setRemovedOptions] = useState([] as number[]);\r\n\r\n    const [shipping, updateShipping] = useState([] as any);\r\n    const [removedShipping, setRemovedShipping] = useState([] as number[]);\r\n\r\n    const [shippingValues, setShippingValues] = useState([\r\n        {\r\n            id: \"\",\r\n            country: \"\",\r\n            init: true,\r\n            price: \"\",\r\n        },\r\n    ] as any[]);\r\n\r\n    const { sdata, sloading } = GetSections();\r\n    const { pdata, ploading } = GetProductsSections();\r\n    const { odata, oloading } = GetProductsOptions();\r\n    const { shdata, shloading } = GetProductShipping();\r\n\r\n    const { data, loading, error } = useApiGetProductQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    function handleOptionsOnDragEnd(result: any) {\r\n        if (!result.destination) return;\r\n\r\n        const items = Array.from(options);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        updateOptions(items);\r\n\r\n        //reorder values state\r\n        let values = optionValues;\r\n\r\n        const [reorderedValue] = values.splice(result.source.index, 1);\r\n        values.splice(result.destination.index, 0, reorderedValue);\r\n\r\n        setOptionValues(values);\r\n    }\r\n\r\n    function handleShippingOnDragEnd(result: any) {\r\n        if (!result.destination) return;\r\n\r\n        const items = Array.from(shipping);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        updateShipping(items);\r\n\r\n        //reorder values state\r\n        let values = shippingValues;\r\n\r\n        const [reorderedValue] = values.splice(result.source.index, 1);\r\n        values.splice(result.destination.index, 0, reorderedValue);\r\n\r\n        setShippingValues(values);\r\n    }\r\n\r\n    const onChipDeleteCB = (_e: any, i: any) => {\r\n        console.log(\"deleted\");\r\n        let section_name = i.innerHTML.slice(0, i.innerHTML.indexOf(\"<\"));\r\n\r\n        let index = -1;\r\n        for (let j = 0; j < sections.length; j++) {\r\n            if (sections[j].name === section_name) {\r\n                index = j;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (index !== -1) {\r\n            let tmp = sections;\r\n            tmp.splice(index, 1);\r\n            setSections(tmp);\r\n        } else {\r\n            // cylcle through pdata, get one where name is = to section name save to removed state\r\n            for (let j = 0; j < pdata!.getProductsSections.length; j++) {\r\n                if (pdata!.getProductsSections[j].name === section_name) {\r\n                    console.log(\"removing\");\r\n                    let tmp = removedSections;\r\n                    tmp.push(pdata!.getProductsSections[j].section_id!);\r\n                    setRemovedSections(tmp);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const onChipAddCB = (_e: any, i: any) => {\r\n        let section_name = i.innerHTML.slice(0, i.innerHTML.indexOf(\"<\"));\r\n\r\n        let tmp = sections;\r\n        let section_id = -1;\r\n        for (let j = 0; j < sdata!.getSections.length; j++) {\r\n            if (sdata!.getSections[j].name === section_name) {\r\n                section_id = sdata!.getSections[j].section_id;\r\n                break;\r\n            }\r\n        }\r\n        if (section_id !== -1) {\r\n            tmp.push({ name: section_name, section_id });\r\n            setSections(tmp);\r\n        } else {\r\n            i.innerHTML = `CHIP DOES NOT EXIST<i class=\"material-icons close\">close</i>`;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        M.Modal.init(document.querySelectorAll(\".modal\"));\r\n        M.Dropdown.init(document.querySelectorAll(\".dropdown-trigger\"));\r\n        let autoCompleteData: any = {},\r\n            initialChips = [] as any[];\r\n\r\n        if (\r\n            !sloading &&\r\n            !!sdata &&\r\n            !ploading &&\r\n            !!pdata &&\r\n            !oloading &&\r\n            !!odata &&\r\n            !shloading &&\r\n            !!shdata\r\n        ) {\r\n            if (!!optionValues[0] && optionValues[0].init) {\r\n                let values = [{}],\r\n                    options = [{}];\r\n\r\n                if (odata.getProductsOptions.length !== 0) {\r\n                    for (let i = 0; i < odata.getProductsOptions.length; i++) {\r\n                        let opt = odata.getProductsOptions[i];\r\n\r\n                        values[i] = {\r\n                            name: ``,\r\n                            price: ``,\r\n                            stock: ``,\r\n                        };\r\n\r\n                        options[i] = {\r\n                            id: `${opt.option_id}`,\r\n                            name: `${opt.name}`,\r\n                            price: `${opt.price}`,\r\n                            stock: `${opt.stock}`,\r\n                            opt_index: opt.index,\r\n                        };\r\n                    }\r\n                    updateOptions(options);\r\n                    setOptionValues(values);\r\n                }\r\n            }\r\n\r\n            if (!!shippingValues[0] && shippingValues[0].init) {\r\n                let values = [{}],\r\n                    shipping = [{}];\r\n                if (shdata.getProductShipping.length !== 0) {\r\n                    for (let i = 0; i < shdata.getProductShipping.length; i++) {\r\n                        let sh = shdata.getProductShipping[i];\r\n\r\n                        values[i] = { country: \"\", price: \"\" };\r\n                        shipping[i] = {\r\n                            id: `${sh.shipping_id}`,\r\n                            country: `${sh.country}`,\r\n                            price: `${sh.price}`,\r\n                        };\r\n                    }\r\n\r\n                    updateShipping(shipping);\r\n                    setShippingValues(values);\r\n                }\r\n            }\r\n\r\n            sdata.getSections.forEach((_val, i) => {\r\n                autoCompleteData[`${sdata?.getSections[i].name}`] = null;\r\n            });\r\n\r\n            let options;\r\n\r\n            if (\r\n                !pdata.getProductsSections ||\r\n                pdata.getProductsSections.length !== 0\r\n            ) {\r\n                pdata.getProductsSections.forEach((_val, i) => {\r\n                    initialChips[i] = {\r\n                        tag: pdata.getProductsSections[i].name,\r\n                    };\r\n                });\r\n            }\r\n\r\n            if (initialChips.length !== 0) {\r\n                options = {\r\n                    autocompleteOptions: {\r\n                        data: autoCompleteData,\r\n                    },\r\n                    data: initialChips,\r\n                    onChipAdd: onChipAddCB,\r\n                    onChipDelete: onChipDeleteCB,\r\n                };\r\n            } else {\r\n                options = {\r\n                    autocompleteOptions: {\r\n                        data: autoCompleteData,\r\n                    },\r\n                    onChipAdd: onChipAddCB,\r\n                    onChipDelete: onChipDeleteCB,\r\n                };\r\n            }\r\n\r\n            M.Chips.init(document.querySelectorAll(\".chips\"), options);\r\n        }\r\n    });\r\n\r\n    if (loading || sloading || ploading || oloading || shloading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    console.log(\"odata :>> \", odata);\r\n    console.log(\"shdata :>> \", shdata);\r\n\r\n    if (error) {\r\n        return <Redirect to=\"/products\" />;\r\n    }\r\n\r\n    const addImages = async (files: any) => {\r\n        {\r\n            M.toast({ html: \"Adding images please wait...\" });\r\n            toggleDisabledClass([\"img_btn\", \"submit-btn\", \"delete-button\"]);\r\n\r\n            for (let i = 0; i < files.length; i++) {\r\n                const form = new FormData();\r\n\r\n                if (\r\n                    !process.env.REACT_APP_CLOUDINARY_CLOUD_NAME ||\r\n                    !process.env.REACT_APP_CLOUDINARY_API_KEY\r\n                ) {\r\n                    M.toast({ html: \"env err\" });\r\n                    return;\r\n                }\r\n\r\n                form.append(\r\n                    \"api_key\",\r\n                    `${process.env.REACT_APP_CLOUDINARY_API_KEY}`\r\n                ); //get api key from cloudinary\r\n\r\n                form.append(\"file\", files[i]);\r\n                form.append(\"tags\", `codeinfuse, medium, gist`);\r\n                form.append(\"upload_preset\", \"re5zmdqn\");\r\n                let t = (Date.now() / 1000) | 0;\r\n                form.append(\"timestamp\", `${t}`);\r\n\r\n                // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n                try {\r\n                    let res = await Axios.post(\r\n                        `https://api.cloudinary.com/v1_1/${process.env.REACT_APP_CLOUDINARY_CLOUD_NAME}/image/upload`,\r\n                        form,\r\n                        {\r\n                            headers: {\r\n                                \"X-Requested-With\": \"XMLHttpRequest\",\r\n                            },\r\n                        }\r\n                    );\r\n                    let tmp: any = image_urls;\r\n                    tmp.push(res.data.secure_url);\r\n                    setImage_urls(tmp);\r\n                } catch (error) {\r\n                    M.toast({ html: `Error: ${error}` });\r\n                }\r\n            }\r\n\r\n            toggleDisabledClass([\"img_btn\", \"submit-btn\", \"delete-button\"]);\r\n            setRefresh(!refresh);\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        // add sections to products\r\n        if (sections.length !== 1) {\r\n            for (let j = 1; j < sections.length; j++) {\r\n                let res = await addProductToSection({\r\n                    variables: {\r\n                        product_id,\r\n                        section_id: sections[j].section_id,\r\n                    },\r\n                });\r\n\r\n                if (!res.data || !res.data.addProductToSection) {\r\n                    M.toast({\r\n                        html: `An Error occurred while adding product to section => ${sections[j].name}`,\r\n                    });\r\n\r\n                    M.toast({\r\n                        html: `If you got this error you added a section that does not exist`,\r\n                    });\r\n\r\n                    M.toast({\r\n                        html: `Please use the autoselect functionality`,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        // remove product from sections\r\n        if (removedSections.length !== 0) {\r\n            for (let j = 0; j < removedSections.length; j++) {\r\n                let res = await removeProductFromSection({\r\n                    variables: {\r\n                        product_id,\r\n                        section_id: removedSections[j],\r\n                    },\r\n                });\r\n\r\n                if (!res.data || !res.data.removeProductFromSection) {\r\n                    M.toast({ html: \"Could not remove product from Section\" });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (removedOptions.length !== 0) {\r\n            let options_str = JSON.stringify(removedOptions);\r\n            await deleteOptions({ variables: { options_str } });\r\n        }\r\n\r\n        await updateProduct({\r\n            variables: {\r\n                product_id,\r\n                name: name || product.name,\r\n                desc: desc || product.desc,\r\n                price: Number(price) || product.price,\r\n                stock: Number(stock) || product.stock,\r\n            },\r\n        });\r\n\r\n        for (let i = 0; i < image_urls.length; i++) {\r\n            try {\r\n                await addImgToProduct({\r\n                    variables: {\r\n                        img_url: image_urls[i],\r\n                        product_id: data?.apiGetProduct.product_id!,\r\n                    },\r\n                });\r\n            } catch (err) {\r\n                M.toast({\r\n                    html: `Error occured while trying to add an image: ${err}`,\r\n                });\r\n                return;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < image_ids.length; i++) {\r\n            try {\r\n                await deleteImg({\r\n                    variables: {\r\n                        img_id: image_ids[i],\r\n                    },\r\n                });\r\n            } catch (e) {\r\n                M.toast({\r\n                    html: `Error occured while trying to remove an image: ${e}`,\r\n                });\r\n                return;\r\n            }\r\n        }\r\n\r\n        // add options\r\n        if (options.length !== 0) {\r\n            // get indexes though dom\r\n            let ul = document.getElementById(\"options-DD\")!;\r\n\r\n            //create options array to pass into mutation\r\n            let options = [{}] as any[];\r\n            let updatedOptions = [{}] as any[];\r\n\r\n            for (let i = 0; i < ul.children.length; i++) {\r\n                let name: any = document.getElementById(`name-${i}`)!;\r\n                let price: any = document.getElementById(`price-${i}`)!;\r\n                let stock: any = document.getElementById(`stock-${i}`);\r\n\r\n                if (name.labels[0].innerHTML.toLowerCase() === \"option\") {\r\n                    if (!name.value || !stock.value) {\r\n                        M.toast({ html: \"please add missing values\" });\r\n                        return;\r\n                    }\r\n                    let tmp = price.value;\r\n                    if (!tmp) {\r\n                        tmp = data?.apiGetProduct.price;\r\n                    }\r\n\r\n                    options.unshift({\r\n                        name: name.value,\r\n                        price: Number(tmp),\r\n                        stock: Number(stock.value),\r\n                        index: i,\r\n                    });\r\n                } else {\r\n                    let tmp = price.value;\r\n                    if (!tmp) {\r\n                        tmp = data?.apiGetProduct.price;\r\n                    }\r\n\r\n                    //get current index from ul\r\n                    let option_id =\r\n                        ul.children[i].attributes[\"data-rbd-draggable-id\"]\r\n                            .value;\r\n\r\n                    updatedOptions.unshift({\r\n                        name: name.value,\r\n                        price: Number(tmp),\r\n                        stock: Number(stock.value),\r\n                        index: i,\r\n                        option_id,\r\n                    });\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < options.length; i++) {\r\n                if (!options[i].name) {\r\n                    options.splice(i, 1);\r\n                }\r\n            }\r\n\r\n            let options_str = JSON.stringify(options);\r\n\r\n            let res = await ADD_OPT_TO_PRODUCT({\r\n                variables: {\r\n                    options_str,\r\n                    product_id,\r\n                },\r\n            });\r\n\r\n            options_str = JSON.stringify(updatedOptions);\r\n\r\n            console.log(\"updatedOptions :>> \", updatedOptions);\r\n            await UPDATE_OPTS({\r\n                variables: {\r\n                    options_str,\r\n                },\r\n            });\r\n\r\n            if (!res.data?.addOptionToProduct) {\r\n                M.toast({ html: \"An Error has occured\" });\r\n                M.toast({ html: \"Please try refreshing the page\" });\r\n                M.toast({ html: \"If error persist check heroku logs\" });\r\n                return;\r\n            }\r\n        }\r\n\r\n        debugger;\r\n\r\n        if (shipping.length !== 0) {\r\n            let shipping_str = JSON.stringify(shippingValues);\r\n            console.log(\"shipping_str :>> \", shipping_str);\r\n\r\n            let response = await addShippingToProduct({\r\n                variables: {\r\n                    product_id,\r\n                    shipping_str,\r\n                },\r\n            });\r\n\r\n            if (!response.data || !response.data.addShippingToProduct) {\r\n                M.toast({ html: \"An Error has occured\" });\r\n                M.toast({ html: \"Please try refreshing the page\" });\r\n                M.toast({ html: \"If error persist check heroku logs\" });\r\n                return;\r\n            }\r\n            console.log(\"response :>> \", response);\r\n        }\r\n        // window.location.reload();\r\n    };\r\n\r\n    let product = data!.apiGetProduct;\r\n\r\n    return (\r\n        <div className=\"container\" style={{ width: \"50%\" }}>\r\n            <div className=\"row\">\r\n                <h5>Edit Product</h5>\r\n                <h5\r\n                    className=\"right\"\r\n                    onClick={async () => {\r\n                        await toggleDisplay({ variables: { product_id } });\r\n                        window.location.reload();\r\n                    }}\r\n                >\r\n                    {data?.apiGetProduct.hidden ? (\r\n                        <>Status: Hidden</>\r\n                    ) : (\r\n                        <>Status: Shown</>\r\n                    )}\r\n                </h5>\r\n            </div>\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field product-input\">\r\n                        <input\r\n                            className=\"browser-default\"\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => {\r\n                                setName(e.target.value as any);\r\n                            }}\r\n                        />\r\n                        <label id=\"name-label\" htmlFor=\"name\">\r\n                            {product.name}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"input-field product-input\">\r\n                        <textarea\r\n                            className=\"browser-default materialize-textarea\"\r\n                            id=\"desc\"\r\n                            value={desc}\r\n                            onChange={e => setDesc(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"desc\">{product.desc}</label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"input-field product-input\">\r\n                        <input\r\n                            className=\"browser-default\"\r\n                            id=\"price\"\r\n                            type=\"text\"\r\n                            value={price}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"price\">\r\n                            ${Number(product.price / 100).toFixed(2)}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"input-field product-input\">\r\n                        <input\r\n                            className=\"browser-default\"\r\n                            id=\"stock\"\r\n                            type=\"text\"\r\n                            value={stock}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"stock\">\r\n                            STOCK =&gt; {product.stock}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"chips chips-initial\" id=\"chips-initial\">\r\n                        <span>Sections: </span>\r\n                        <input className=\"custom-class\" />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"container\">\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                            }}\r\n                        >\r\n                            <span>Option</span>\r\n                            <span>Price</span>\r\n                        </div>\r\n\r\n                        <DragDropContext onDragEnd={handleOptionsOnDragEnd}>\r\n                            <Droppable droppableId=\"options\">\r\n                                {provided => (\r\n                                    <ul\r\n                                        id=\"options-DD\"\r\n                                        {...provided.droppableProps}\r\n                                        ref={provided.innerRef}\r\n                                    >\r\n                                        {options.map(\r\n                                            (\r\n                                                { id, name, price, stock },\r\n                                                index: any\r\n                                            ) => {\r\n                                                // sortByProp(options, \"index\");\r\n\r\n                                                return (\r\n                                                    <Draggable\r\n                                                        key={`${id}`}\r\n                                                        draggableId={`${id}`}\r\n                                                        index={index}\r\n                                                    >\r\n                                                        {prov => (\r\n                                                            <li\r\n                                                                ref={\r\n                                                                    prov.innerRef\r\n                                                                }\r\n                                                                {...prov.draggableProps}\r\n                                                                {...prov.dragHandleProps}\r\n                                                            >\r\n                                                                <div\r\n                                                                    style={{\r\n                                                                        width:\r\n                                                                            \"100%\",\r\n                                                                        display:\r\n                                                                            \"flex\",\r\n                                                                        justifyContent:\r\n                                                                            \"space-between\",\r\n                                                                        backgroundColor:\r\n                                                                            \"white\",\r\n\r\n                                                                        margin: 0,\r\n                                                                        borderBottom:\r\n                                                                            \"1px solid #f2f3f7\",\r\n                                                                    }}\r\n                                                                    className=\"row\"\r\n                                                                >\r\n                                                                    <div className=\"col s5 noselect\">\r\n                                                                        <div className=\"input-field product-input\">\r\n                                                                            <input\r\n                                                                                className=\"browser-default\"\r\n                                                                                id={`name-${index}`}\r\n                                                                                type=\"text\"\r\n                                                                                value={\r\n                                                                                    !optionValues[\r\n                                                                                        index\r\n                                                                                    ]\r\n                                                                                        ? \"\"\r\n                                                                                        : optionValues[\r\n                                                                                              index\r\n                                                                                          ]\r\n                                                                                              .name\r\n                                                                                }\r\n                                                                                onChange={e => {\r\n                                                                                    if (\r\n                                                                                        e.target.value.match(\r\n                                                                                            /^ /\r\n                                                                                        )\r\n                                                                                    ) {\r\n                                                                                        let tmp = optionValues;\r\n                                                                                        tmp[\r\n                                                                                            index\r\n                                                                                        ].name = e.target.value.substring(\r\n                                                                                            1\r\n                                                                                        );\r\n\r\n                                                                                        setOptionValues(\r\n                                                                                            tmp\r\n                                                                                        );\r\n                                                                                        setRefresh(\r\n                                                                                            !refresh\r\n                                                                                        );\r\n                                                                                    } else {\r\n                                                                                        let tmp = optionValues;\r\n                                                                                        tmp[\r\n                                                                                            index\r\n                                                                                        ].name =\r\n                                                                                            e.target.value;\r\n\r\n                                                                                        setOptionValues(\r\n                                                                                            tmp\r\n                                                                                        );\r\n                                                                                        setRefresh(\r\n                                                                                            !refresh\r\n                                                                                        );\r\n                                                                                    }\r\n                                                                                }}\r\n                                                                            />\r\n                                                                            <label\r\n                                                                                htmlFor={`name-${index}`}\r\n                                                                            >\r\n                                                                                {\r\n                                                                                    name\r\n                                                                                }\r\n                                                                            </label>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                    <div className=\"col s2 offset-s1 noselect\">\r\n                                                                        <div className=\"input-field product-input\">\r\n                                                                            <input\r\n                                                                                className=\"browser-default\"\r\n                                                                                id={`price-${index}`}\r\n                                                                                type=\"text\"\r\n                                                                                value={\r\n                                                                                    !optionValues[\r\n                                                                                        index\r\n                                                                                    ]\r\n                                                                                        ? \"\"\r\n                                                                                        : optionValues[\r\n                                                                                              index\r\n                                                                                          ]\r\n                                                                                              .price\r\n                                                                                }\r\n                                                                                onChange={e =>\r\n                                                                                    updateOptionValue(\r\n                                                                                        \"price\",\r\n                                                                                        index,\r\n                                                                                        e,\r\n                                                                                        optionValues,\r\n                                                                                        setOptionValues,\r\n                                                                                        refresh,\r\n                                                                                        setRefresh\r\n                                                                                    )\r\n                                                                                }\r\n                                                                            />\r\n                                                                            <label\r\n                                                                                htmlFor={`price-${index}`}\r\n                                                                            >\r\n                                                                                $\r\n                                                                                {Number(\r\n                                                                                    price /\r\n                                                                                        100\r\n                                                                                ).toFixed(\r\n                                                                                    2\r\n                                                                                )}\r\n                                                                            </label>\r\n                                                                        </div>\r\n                                                                    </div>\r\n\r\n                                                                    <div className=\"col s3 noselect\">\r\n                                                                        <div className=\"input-field product-input\">\r\n                                                                            <input\r\n                                                                                className=\"browser-default\"\r\n                                                                                id={`stock-${index}`}\r\n                                                                                type=\"text\"\r\n                                                                                value={\r\n                                                                                    !optionValues[\r\n                                                                                        index\r\n                                                                                    ]\r\n                                                                                        ? \"\"\r\n                                                                                        : optionValues[\r\n                                                                                              index\r\n                                                                                          ]\r\n                                                                                              .stock\r\n                                                                                }\r\n                                                                                onChange={e =>\r\n                                                                                    updateOptionValue(\r\n                                                                                        \"stock\",\r\n                                                                                        index,\r\n                                                                                        e,\r\n                                                                                        optionValues,\r\n                                                                                        setOptionValues,\r\n                                                                                        refresh,\r\n                                                                                        setRefresh\r\n                                                                                    )\r\n                                                                                }\r\n                                                                            />\r\n\r\n                                                                            <label\r\n                                                                                htmlFor={`stock-${index}`}\r\n                                                                            >\r\n                                                                                {stock ? (\r\n                                                                                    <>\r\n                                                                                        STOCK\r\n                                                                                        =&gt;{\" \"}\r\n                                                                                        {\r\n                                                                                            stock\r\n                                                                                        }\r\n                                                                                    </>\r\n                                                                                ) : (\r\n                                                                                    <>\r\n                                                                                        STOCK\r\n                                                                                    </>\r\n                                                                                )}\r\n                                                                            </label>\r\n                                                                        </div>\r\n                                                                    </div>\r\n\r\n                                                                    <i className=\"material-icons noselect\">\r\n                                                                        drag_handle\r\n                                                                    </i>\r\n                                                                    <i\r\n                                                                        className=\"material-icons red-text noselect\"\r\n                                                                        onClick={() => {\r\n                                                                            let length = odata!\r\n                                                                                .getProductsOptions!\r\n                                                                                .length;\r\n                                                                            for (\r\n                                                                                let i = 0;\r\n                                                                                i <\r\n                                                                                length;\r\n                                                                                i++\r\n                                                                            ) {\r\n                                                                                if (\r\n                                                                                    odata!\r\n                                                                                        .getProductsOptions[\r\n                                                                                        i\r\n                                                                                    ]\r\n                                                                                        .option_id ===\r\n                                                                                    Number(\r\n                                                                                        id\r\n                                                                                    )\r\n                                                                                ) {\r\n                                                                                    let tmp = removedOptions;\r\n                                                                                    tmp.push(\r\n                                                                                        Number(\r\n                                                                                            id\r\n                                                                                        )\r\n                                                                                    );\r\n                                                                                    setRemovedOptions(\r\n                                                                                        tmp\r\n                                                                                    );\r\n\r\n                                                                                    break;\r\n                                                                                }\r\n                                                                            }\r\n\r\n                                                                            for (\r\n                                                                                let i = 0;\r\n                                                                                i <\r\n                                                                                options.length;\r\n                                                                                i++\r\n                                                                            ) {\r\n                                                                                if (\r\n                                                                                    options[\r\n                                                                                        i\r\n                                                                                    ]\r\n                                                                                        .id ===\r\n                                                                                    id\r\n                                                                                ) {\r\n                                                                                    let tmp = options;\r\n                                                                                    console.log(\r\n                                                                                        \"tmp b4 :>> \",\r\n                                                                                        tmp\r\n                                                                                    );\r\n                                                                                    tmp.splice(\r\n                                                                                        i,\r\n                                                                                        1\r\n                                                                                    );\r\n                                                                                    console.log(\r\n                                                                                        \"tmp :>> \",\r\n                                                                                        tmp\r\n                                                                                    );\r\n\r\n                                                                                    updateOptions(\r\n                                                                                        tmp\r\n                                                                                    );\r\n\r\n                                                                                    tmp = optionValues;\r\n\r\n                                                                                    tmp.splice(\r\n                                                                                        i,\r\n                                                                                        1\r\n                                                                                    );\r\n                                                                                    setOptionValues(\r\n                                                                                        tmp\r\n                                                                                    );\r\n\r\n                                                                                    setRefresh(\r\n                                                                                        !refresh\r\n                                                                                    );\r\n                                                                                }\r\n                                                                            }\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        delete\r\n                                                                    </i>\r\n                                                                </div>\r\n                                                            </li>\r\n                                                        )}\r\n                                                    </Draggable>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                        {provided.placeholder}\r\n                                    </ul>\r\n                                )}\r\n                            </Droppable>\r\n                        </DragDropContext>\r\n\r\n                        <button\r\n                            className=\"add-option\"\r\n                            onClick={() => {\r\n                                //updated state\r\n                                let q = options;\r\n                                let tmp = q;\r\n                                tmp.push({\r\n                                    id: `opt-${Number(\r\n                                        Math.random() * (100 - 5) + 5\r\n                                    ).toFixed(2)}`,\r\n                                    name: \"Option\",\r\n                                    price: data?.apiGetProduct.price,\r\n                                });\r\n\r\n                                updateOptions(tmp);\r\n\r\n                                q = optionValues;\r\n                                tmp = q;\r\n\r\n                                tmp.push({\r\n                                    name: \"\",\r\n                                    price: \"\",\r\n                                    stock: \"\",\r\n                                });\r\n\r\n                                //remove init value\r\n                                if (tmp[0].init) {\r\n                                    tmp.splice(0, 1);\r\n                                }\r\n\r\n                                setOptionValues(tmp);\r\n\r\n                                setRefresh(!refresh);\r\n                            }}\r\n                        >\r\n                            <i className=\"material-icons\">add</i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"container\">\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                            }}\r\n                        >\r\n                            <span>Shipping</span>\r\n                        </div>\r\n\r\n                        <DragDropContext onDragEnd={handleShippingOnDragEnd}>\r\n                            <Droppable droppableId=\"shipping\">\r\n                                {provided => (\r\n                                    <ul\r\n                                        id=\"shipping-DD\"\r\n                                        {...provided.droppableProps}\r\n                                        ref={provided.innerRef}\r\n                                    >\r\n                                        {shipping.map(\r\n                                            (\r\n                                                { id, country, price },\r\n                                                index: any\r\n                                            ) => {\r\n                                                console.log(`index`, index);\r\n                                                return (\r\n                                                    <Draggable\r\n                                                        key={`${id}`}\r\n                                                        draggableId={`${id}`}\r\n                                                        index={index}\r\n                                                    >\r\n                                                        {prov => (\r\n                                                            <li\r\n                                                                ref={\r\n                                                                    prov.innerRef\r\n                                                                }\r\n                                                                {...prov.draggableProps}\r\n                                                                {...prov.dragHandleProps}\r\n                                                            >\r\n                                                                <div\r\n                                                                    style={{\r\n                                                                        width:\r\n                                                                            \"100%\",\r\n                                                                        display:\r\n                                                                            \"flex\",\r\n                                                                        justifyContent:\r\n                                                                            \"space-between\",\r\n                                                                        backgroundColor:\r\n                                                                            \"white\",\r\n\r\n                                                                        margin: 0,\r\n                                                                        borderBottom:\r\n                                                                            \"1px solid #f2f3f7\",\r\n                                                                    }}\r\n                                                                    className=\"row\"\r\n                                                                >\r\n                                                                    <div className=\"col s3\">\r\n                                                                        <div className=\"input-field product-input\">\r\n                                                                            <input\r\n                                                                                className=\"browser-default\"\r\n                                                                                id={`shipping_country-${index}`}\r\n                                                                                type=\"text\"\r\n                                                                                value={\r\n                                                                                    shippingValues[\r\n                                                                                        index\r\n                                                                                    ]\r\n                                                                                        .country\r\n                                                                                }\r\n                                                                                onChange={e => {\r\n                                                                                    let tmp = shippingValues;\r\n                                                                                    tmp[\r\n                                                                                        index\r\n                                                                                    ].country =\r\n                                                                                        e.target.value;\r\n                                                                                    setShippingValues(\r\n                                                                                        tmp\r\n                                                                                    );\r\n                                                                                    setRefresh(\r\n                                                                                        !refresh\r\n                                                                                    );\r\n                                                                                }}\r\n                                                                            />\r\n                                                                            <label\r\n                                                                                htmlFor={`shipping_country-${index}`}\r\n                                                                            >\r\n                                                                                {\r\n                                                                                    country\r\n                                                                                }{\" \"}\r\n                                                                                US\r\n                                                                                OR\r\n                                                                                EL\r\n                                                                            </label>\r\n                                                                        </div>\r\n                                                                    </div>\r\n\r\n                                                                    <div className=\"col s5 noselect\">\r\n                                                                        <div className=\"input-field product-input\">\r\n                                                                            <input\r\n                                                                                className=\"browser-default\"\r\n                                                                                id={`shipping_price-${index}`}\r\n                                                                                type=\"text\"\r\n                                                                                value={\r\n                                                                                    shippingValues[\r\n                                                                                        index\r\n                                                                                    ]\r\n                                                                                        .price\r\n                                                                                }\r\n                                                                                onChange={e => {\r\n                                                                                    let tmp = shippingValues;\r\n                                                                                    tmp[\r\n                                                                                        index\r\n                                                                                    ].price =\r\n                                                                                        e.target.value;\r\n                                                                                    setShippingValues(\r\n                                                                                        tmp\r\n                                                                                    );\r\n                                                                                    setRefresh(\r\n                                                                                        !refresh\r\n                                                                                    );\r\n                                                                                }}\r\n                                                                            />\r\n                                                                            <label\r\n                                                                                htmlFor={`shipping_price-${index}`}\r\n                                                                            >\r\n                                                                                {\r\n                                                                                    price\r\n                                                                                }\r\n                                                                            </label>\r\n                                                                        </div>\r\n                                                                    </div>\r\n\r\n                                                                    <i className=\"material-icons noselect\">\r\n                                                                        drag_handle\r\n                                                                    </i>\r\n                                                                    <i\r\n                                                                        className=\"material-icons red-text noselect\"\r\n                                                                        onClick={() => {\r\n                                                                            //if there's data set removed options\r\n                                                                            console.log(\r\n                                                                                \"id :>> \",\r\n                                                                                id\r\n                                                                            );\r\n                                                                            // else remove from state\r\n                                                                            for (\r\n                                                                                let j = 0;\r\n                                                                                j <\r\n                                                                                shipping.length;\r\n                                                                                j++\r\n                                                                            ) {\r\n                                                                                if (\r\n                                                                                    shipping[\r\n                                                                                        j\r\n                                                                                    ]\r\n                                                                                        .id ===\r\n                                                                                    id\r\n                                                                                ) {\r\n                                                                                    let tmp = shipping;\r\n                                                                                    tmp.splice(\r\n                                                                                        j,\r\n                                                                                        1\r\n                                                                                    );\r\n\r\n                                                                                    updateShipping(\r\n                                                                                        tmp\r\n                                                                                    );\r\n\r\n                                                                                    tmp = shippingValues;\r\n                                                                                    tmp.splice(\r\n                                                                                        j,\r\n                                                                                        1\r\n                                                                                    );\r\n\r\n                                                                                    setShippingValues(\r\n                                                                                        tmp\r\n                                                                                    );\r\n\r\n                                                                                    setRefresh(\r\n                                                                                        !refresh\r\n                                                                                    );\r\n                                                                                }\r\n                                                                            }\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        delete\r\n                                                                    </i>\r\n                                                                </div>\r\n                                                            </li>\r\n                                                        )}\r\n                                                    </Draggable>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                        {provided.placeholder}\r\n                                    </ul>\r\n                                )}\r\n                            </Droppable>\r\n                        </DragDropContext>\r\n\r\n                        <button\r\n                            className=\"add-option\"\r\n                            onClick={() => {\r\n                                let q = shipping;\r\n                                let tmp = q;\r\n                                tmp.push({\r\n                                    id: `shipping-${Number(\r\n                                        Math.random() * (100 - 5) + 5\r\n                                    ).toFixed(2)}`,\r\n                                    country: \"Country\",\r\n                                    price: \"Shipping Price\",\r\n                                });\r\n\r\n                                updateShipping(tmp);\r\n\r\n                                q = shippingValues;\r\n                                tmp = q;\r\n\r\n                                tmp.push({ country: \"\", price: \"\" });\r\n\r\n                                //remove init value\r\n                                if (tmp[0].init) {\r\n                                    tmp.splice(0, 1);\r\n                                }\r\n\r\n                                setShippingValues(tmp);\r\n                                setRefresh(!refresh);\r\n                            }}\r\n                        >\r\n                            <i className=\"material-icons\">add</i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                    }}\r\n                >\r\n                    <button\r\n                        className=\"btn green\"\r\n                        id=\"submit-btn\"\r\n                        onClick={() => handleSubmit()}\r\n                    >\r\n                        Submit\r\n                    </button>\r\n\r\n                    <Dropzone onDrop={async files => addImages(files)}>\r\n                        {({ getRootProps, getInputProps }) => (\r\n                            <span {...getRootProps()}>\r\n                                <input {...getInputProps()} />\r\n                                <button className=\"btn black\" id=\"img_btn\">\r\n                                    Add Images\r\n                                </button>\r\n                            </span>\r\n                        )}\r\n                    </Dropzone>\r\n\r\n                    <button\r\n                        className=\"btn modal-trigger red\"\r\n                        id=\"delete-button\"\r\n                        data-target=\"modal1\"\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"products-grid\" style={{ marginTop: \"32px\" }}>\r\n                    <>\r\n                        {data?.apiGetProduct.images!.map((_val, i) => {\r\n                            return (\r\n                                <div\r\n                                    className=\"card\"\r\n                                    style={{ margin: \"0px 16px 32px 16px\" }}\r\n                                    id={`card-${i}`}\r\n                                    key={i}\r\n                                >\r\n                                    <span\r\n                                        className=\"close-icon noselect\"\r\n                                        onClick={async () => {\r\n                                            let tmp: any = image_ids;\r\n                                            tmp.push(\r\n                                                data.apiGetProduct.images![i]\r\n                                                    .img_id\r\n                                            );\r\n                                            setImage_ids(tmp);\r\n                                            document.getElementById(\r\n                                                `card-${i}`\r\n                                            )!.style.display = \"none\";\r\n                                        }}\r\n                                    >\r\n                                        <i className=\"material-icons white-text\">\r\n                                            close\r\n                                        </i>\r\n                                    </span>\r\n                                    <div className=\"card-image noselect\">\r\n                                        <img\r\n                                            src={\r\n                                                data?.apiGetProduct.images![i]\r\n                                                    .img_url ||\r\n                                                \"https://materializecss.com/images/sample-1.jpg\"\r\n                                            }\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </>\r\n\r\n                    {image_urls.length === 0 ? (\r\n                        <></>\r\n                    ) : (\r\n                        <>\r\n                            {image_urls.map((_val, i) => {\r\n                                return (\r\n                                    <div\r\n                                        className=\"card\"\r\n                                        style={{ margin: \"0px 16px 32px 16px\" }}\r\n                                    >\r\n                                        <div className=\"card-image noselect\">\r\n                                            <img src={image_urls[i] as any} />\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </form>\r\n\r\n            <div id=\"modal1\" className=\"modal\">\r\n                <div className=\"modal-content\">\r\n                    <h4>Are you sure you want to delete this product?</h4>\r\n                    <p>This will also delete all of the users orders.</p>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                    <button\r\n                        id=\"delete-button\"\r\n                        className=\"btn right red\"\r\n                        onClick={async () => {\r\n                            toggleDisabledClass([\"delete-button\"]);\r\n\r\n                            let tmp = await deleteProduct({\r\n                                variables: { product_id },\r\n                            });\r\n\r\n                            if (tmp.data?.deleteProduct) {\r\n                                window.location.reload();\r\n                            } else {\r\n                                M.toast({ html: \"Could not delete product\" });\r\n                                toggleDisabledClass([\"delete-button\"]);\r\n                            }\r\n                        }}\r\n                    >\r\n                        Delete Product\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst toggleDisabledClass = (idList: string[]) => {\r\n    for (let i = 0; i < idList.length; i++) {\r\n        try {\r\n            document.getElementById(idList[i])!.classList.toggle(\"disabled\");\r\n        } catch {}\r\n    }\r\n};\r\n\r\nconst updateOptionValue = (\r\n    prop,\r\n    index,\r\n    e,\r\n    optionValues,\r\n    setOptionValues,\r\n    refresh,\r\n    setRefresh\r\n) => {\r\n    if (!e.target.value && e.target.value !== \".\") {\r\n        let tmp = optionValues;\r\n\r\n        tmp[index][prop] = e.target.value;\r\n\r\n        setOptionValues(tmp);\r\n    }\r\n\r\n    if (!e.target.value.match(/\\D/g)) {\r\n        let tmp = optionValues;\r\n\r\n        tmp[index][prop] = e.target.value;\r\n\r\n        setOptionValues(tmp);\r\n        setRefresh(!refresh);\r\n    }\r\n};\r\n\r\nexport default EditProduct;\r\n","import { useGetSectionsQuery } from \"../../../generated/graphql\";\r\n\r\nexport const GetSections = () => {\r\n    const { data, loading } = useGetSectionsQuery();\r\n\r\n    let sloading = loading;\r\n    let sdata = data;\r\n    return { sdata, sloading };\r\n};\r\n","const PreviewFAB = () => {\r\n    return (\r\n        <div className=\"fixed-action-btn\" style={{ bottom: 100, right: 100 }}>\r\n            <a\r\n                className=\"btn-floating btn-large red tooltipped\"\r\n                data-position=\"left\"\r\n                data-tooltip=\"Click me to preview your changes\"\r\n                id=\"menu\"\r\n            >\r\n                <i className=\"large material-icons blue\">remove_red_eye</i>\r\n            </a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PreviewFAB;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { FaInstagram, FaEnvelope, FaTwitter, FaFacebook } from \"react-icons/fa\";\r\nimport {\r\n    useToggleSocialDisplayMutation,\r\n    useUpdateSocialUrlMutation,\r\n} from \"../../generated/graphql\";\r\nimport PreviewFAB from \"./PreviewFAB\";\r\n\r\ninterface Props {\r\n    data: [\r\n        {\r\n            id: number;\r\n            index: number;\r\n            social_logo: string;\r\n            social_url: string;\r\n            display: string;\r\n        }\r\n    ];\r\n    refresh: boolean;\r\n    setRefresh: (value: React.SetStateAction<boolean>) => void;\r\n}\r\n\r\nconst Socials: React.FC<Props> = ({ data, refresh, setRefresh }) => {\r\n    console.log(\"data :>> \", data);\r\n\r\n    const [updateSocialUrl] = useUpdateSocialUrlMutation();\r\n    const [toggleSocialDisplay] = useToggleSocialDisplayMutation();\r\n\r\n    const [socialMap, setSocialIcons] = useState<{ [key: string]: string[] }>({\r\n        socials: [\"I\", \"E\", \"T\", \"F\"],\r\n    });\r\n\r\n    const [socials, setSocials] = useState(data);\r\n    const [newSocials, setNewSocials] = useState([\r\n        { social_url: \"\" },\r\n        { social_url: \"\" },\r\n        { social_url: \"\" },\r\n        { social_url: \"\" },\r\n    ]);\r\n\r\n    return (\r\n        <>\r\n            <PreviewFAB />\r\n\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h3 className=\"white-text noselect\">Social Links</h3>\r\n                    </span>\r\n\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped responsive\">\r\n                            <thead></thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Icon</th>\r\n                                    <th>URL</th>\r\n                                    <th></th>\r\n                                    <th>Display</th>\r\n                                    <th>Index</th>\r\n                                </tr>\r\n\r\n                                {socials.map((_val, i) => {\r\n                                    return (\r\n                                        <tr key={i}>\r\n                                            <td>\r\n                                                <SocialIcon\r\n                                                    social_logo={\r\n                                                        socials[i].social_logo\r\n                                                    }\r\n                                                />\r\n                                            </td>\r\n                                            <td>\r\n                                                <div className=\"input-field\">\r\n                                                    <input\r\n                                                        id={`social-input${i}`}\r\n                                                        type=\"text\"\r\n                                                        className=\"validate\"\r\n                                                        value={\r\n                                                            newSocials[i]\r\n                                                                .social_url\r\n                                                        }\r\n                                                        onChange={async e => {\r\n                                                            let updatedState = newSocials;\r\n                                                            updatedState[\r\n                                                                i\r\n                                                            ].social_url =\r\n                                                                e.target.value;\r\n\r\n                                                            setNewSocials(\r\n                                                                updatedState\r\n                                                            );\r\n                                                            setRefresh(\r\n                                                                !refresh\r\n                                                            );\r\n                                                        }}\r\n                                                    />\r\n                                                    <label\r\n                                                        htmlFor={`social-input${i}`}\r\n                                                    >\r\n                                                        {socials[i].social_url}\r\n                                                    </label>\r\n                                                    <span\r\n                                                        id=\"coupon-helper\"\r\n                                                        className=\"helper-text\"\r\n                                                        data-error=\" \"\r\n                                                    ></span>\r\n                                                </div>\r\n                                            </td>\r\n\r\n                                            <td>\r\n                                                <button\r\n                                                    id={`update-social-${i}`}\r\n                                                    className=\"btn black\"\r\n                                                    onClick={async () => {\r\n                                                        let d = document;\r\n                                                        d.getElementById(\r\n                                                            `update-social-${i}`\r\n                                                        )!.classList.add(\r\n                                                            \"disabled\"\r\n                                                        );\r\n                                                        let tmp = await updateSocialUrl(\r\n                                                            {\r\n                                                                variables: {\r\n                                                                    id:\r\n                                                                        socials[\r\n                                                                            i\r\n                                                                        ].id,\r\n                                                                    url:\r\n                                                                        newSocials[\r\n                                                                            i\r\n                                                                        ]\r\n                                                                            .social_url,\r\n                                                                },\r\n                                                            }\r\n                                                        );\r\n\r\n                                                        if (\r\n                                                            tmp.data\r\n                                                                ?.updateSocialUrl\r\n                                                        ) {\r\n                                                            window.location.reload();\r\n                                                        } else {\r\n                                                            M.toast({\r\n                                                                html: `An error has occured.`,\r\n                                                            });\r\n                                                        }\r\n                                                        d.getElementById(\r\n                                                            `update-social-${i}`\r\n                                                        )!.classList.remove(\r\n                                                            \"disabled\"\r\n                                                        );\r\n                                                    }}\r\n                                                >\r\n                                                    UPDATE\r\n                                                </button>\r\n                                            </td>\r\n\r\n                                            <td>\r\n                                                {socials[i].display ? (\r\n                                                    <button\r\n                                                        className=\"btn green\"\r\n                                                        onClick={async () => {\r\n                                                            let tmp = await toggleSocialDisplay(\r\n                                                                {\r\n                                                                    variables: {\r\n                                                                        id:\r\n                                                                            socials[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .id,\r\n                                                                    },\r\n                                                                }\r\n                                                            );\r\n\r\n                                                            if (\r\n                                                                !tmp.data ||\r\n                                                                !tmp.data\r\n                                                                    .toggleSocialDisplay\r\n                                                            ) {\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"An error occured\",\r\n                                                                });\r\n                                                            } else {\r\n                                                                window.location.reload();\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        VISIBLE\r\n                                                    </button>\r\n                                                ) : (\r\n                                                    <button\r\n                                                        className=\"btn red\"\r\n                                                        onClick={async () => {\r\n                                                            let tmp = await toggleSocialDisplay(\r\n                                                                {\r\n                                                                    variables: {\r\n                                                                        id:\r\n                                                                            socials[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .id,\r\n                                                                    },\r\n                                                                }\r\n                                                            );\r\n\r\n                                                            if (\r\n                                                                !tmp.data ||\r\n                                                                !tmp.data\r\n                                                                    .toggleSocialDisplay\r\n                                                            ) {\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"An error occured\",\r\n                                                                });\r\n                                                            } else {\r\n                                                                window.location.reload();\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        HIDDEN\r\n                                                    </button>\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                <a\r\n                                                    className=\"dropdown-trigger btn\"\r\n                                                    href=\"#\"\r\n                                                    data-target=\"dropdown1\"\r\n                                                >\r\n                                                    Drop Me!\r\n                                                </a>\r\n\r\n                                                <ul\r\n                                                    id=\"dropdown1\"\r\n                                                    className=\"dropdown-content\"\r\n                                                >\r\n                                                    <IndexDropdown\r\n                                                        socials={socials}\r\n                                                    />\r\n                                                </ul>\r\n                                            </td>\r\n                                        </tr>\r\n                                    );\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst IndexDropdown: React.FC<{\r\n    socials: [\r\n        {\r\n            id: number;\r\n            index: number;\r\n            social_logo: string;\r\n            social_url: string;\r\n            display: string;\r\n        }\r\n    ];\r\n}> = ({ socials }) => {\r\n    let indices = [0, 1, 2, 3];\r\n    return (\r\n        <>\r\n            {indices.map((_val, ii) => {\r\n                return (\r\n                    <li className=\"\" style={{ minWidth: 50 }}>\r\n                        <span>\r\n                            <span className=\"left black-text\">\r\n                                {socials.map((_val, j) => {\r\n                                    if (socials[j].index === indices[ii]) {\r\n                                        return (\r\n                                            <SocialIcon\r\n                                                social_logo={\r\n                                                    socials[j].social_logo\r\n                                                }\r\n                                            />\r\n                                        );\r\n                                    }\r\n                                })}\r\n                            </span>\r\n                            <span className=\"right black-text\">\r\n                                {indices[ii]}\r\n                            </span>\r\n                        </span>\r\n                    </li>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nconst SocialIcon: React.FC<{ social_logo: string }> = ({ social_logo }) => {\r\n    switch (social_logo) {\r\n        case \"I\": {\r\n            return (\r\n                <FaInstagram\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        case \"E\": {\r\n            return (\r\n                <FaEnvelope\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n        case \"T\": {\r\n            return (\r\n                <FaTwitter\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n        case \"F\": {\r\n            return (\r\n                <FaFacebook\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        default: {\r\n            return <>ERROR</>;\r\n        }\r\n    }\r\n};\r\n\r\nexport default Socials;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useGetSocialsQuery,\r\n    useInitSocialsMutation,\r\n} from \"../../generated/graphql\";\r\nimport { Sorting } from \"../../Sorting\";\r\nimport Socials from \"./Socials\";\r\n\r\nconst initSocials = async (INIT_SOCIALS: any) => {\r\n    let tmp = await INIT_SOCIALS();\r\n    if (tmp.data?.initSocials) {\r\n        window.location.reload();\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n\r\nconst EditSocials = () => {\r\n    const { sortByProp } = Sorting();\r\n    const [INIT_SOCIALS] = useInitSocialsMutation();\r\n    const [refresh, setRefresh] = useState(false);\r\n    const { data, loading, error } = useGetSocialsQuery({\r\n        variables: { component: \"footer\" },\r\n    });\r\n\r\n    useEffect(() => {\r\n        M.FloatingActionButton.init(\r\n            document.querySelectorAll(\".fixed-action-btn\")\r\n        );\r\n        M.Dropdown.init(document.querySelectorAll(\".dropdown-trigger\"));\r\n        M.Tooltip.init(document.querySelectorAll(\".tooltipped\"));\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (error) {\r\n        return <>error</>;\r\n    }\r\n\r\n    if (!data || data.getSocials.length === 0) {\r\n        let tmp = initSocials(INIT_SOCIALS);\r\n        if (!tmp) {\r\n            return <>error occured while initializing Socials</>;\r\n        }\r\n        return <>NO data</>;\r\n    }\r\n\r\n    sortByProp(data.getSocials, \"index\");\r\n\r\n    return (\r\n        <Socials\r\n            data={data.getSocials as any}\r\n            setRefresh={setRefresh}\r\n            refresh={refresh}\r\n        />\r\n    );\r\n};\r\n\r\nexport default EditSocials;\r\n","export const Sorting = () => {\r\n    const sortByProp = (arr: any, prop: string, invert?: boolean) => {\r\n        let props = [] as any[];\r\n        arr.forEach((_val: any, i: any) => {\r\n            props[i] = arr[i][prop];\r\n        });\r\n\r\n        props.sort();\r\n        if (invert) {\r\n            props.reverse();\r\n        }\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let j = i;\r\n            while (arr[i][prop] !== props[i]) {\r\n                let tmp = arr.slice(j, j + 2);\r\n                tmp.reverse();\r\n                arr[j] = tmp[0];\r\n                arr[j + 1] = tmp[1];\r\n                j = j + 1;\r\n\r\n                if (j === arr.length - 1) {\r\n                    j = i;\r\n                }\r\n\r\n                if (!arr[arr.length - 1]) {\r\n                    // remove undef index sometimes introduced by tmp.reverse()\r\n                    arr.pop();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!invert) {\r\n            return arr;\r\n        } else {\r\n            return arr;\r\n        }\r\n    };\r\n\r\n    return {\r\n        sortByProp,\r\n    };\r\n};\r\n","import {\r\n    useGetOrderByIdQuery,\r\n    useRemoveWarningMutation,\r\n} from \"../../generated/graphql\";\r\nimport { useEffect, useState, useMemo } from \"react\";\r\n\r\nconst calcProdSubtotal = (products: any[]) => {\r\n    let Subtotal: any = 0,\r\n        sTotal: any = 100;\r\n\r\n    for (let i = 0; i < products.length; i++) {\r\n        Subtotal += products[i].productSubtotal!;\r\n        console.log(\r\n            \"products[i].quantityOrdered :>> \",\r\n            products[i].quantityOrdered\r\n        );\r\n        sTotal += products[i].quantityOrdered * 50;\r\n    }\r\n\r\n    let productsSubtotal = Number(Subtotal / 100).toFixed(2);\r\n\r\n    if (sTotal > 500) {\r\n        sTotal = 500;\r\n    }\r\n\r\n    let shippingTotal = Number(sTotal / 100).toFixed(2);\r\n\r\n    return { productsSubtotal, shippingTotal };\r\n};\r\n\r\nconst getOrderId = () => {\r\n    console.log(\"gettings order id\");\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        return window.location.href.split(\":\")[2];\r\n    } else {\r\n        return window.location.href.split(\":\")[3];\r\n    }\r\n};\r\n\r\nconst OrderDetails = () => {\r\n    const id = useMemo(() => getOrderId(), [getOrderId]);\r\n\r\n    const { data, loading, error } = useGetOrderByIdQuery({\r\n        variables: {\r\n            order_id: Number(id),\r\n        },\r\n    });\r\n\r\n    const [removeWarning] = useRemoveWarningMutation();\r\n\r\n    const [state, setState] = useState(false);\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data) {\r\n        return (\r\n            <div className=\"centered\">\r\n                <h3>No data was found</h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <div className=\"centered\">\r\n                <h3>An Error has occured.</h3>\r\n                <h3>{error.message}</h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    const { productsSubtotal, shippingTotal } = calcProdSubtotal(\r\n        data.getOrderById.products!\r\n    );\r\n\r\n    let amountOff = Number(\r\n        (data.getOrderById.order_total! *\r\n            Number(\"0.\" + data.getOrderById.discount)) /\r\n            100\r\n    ).toFixed(2);\r\n\r\n    let str, dateOfPurchase;\r\n    if (data.getOrderById.date_of_purchase) {\r\n        str = data.getOrderById.date_of_purchase.split(\" \");\r\n        dateOfPurchase = `${str[0]} ${str[1]} ${str[2]} ${str[3]}`;\r\n    }\r\n\r\n    let shipping = JSON.parse(data.getOrderById.shipping!);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {!data.getOrderById.warning ? (\r\n                <></>\r\n            ) : (\r\n                <>\r\n                    <div id=\"modal1\" className=\"modal\">\r\n                        <div className=\"modal-content\">\r\n                            <h4>\r\n                                Are you sure you want to remove this warning?\r\n                            </h4>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <a\r\n                                href=\"#!\"\r\n                                className=\"modal-close btn red\"\r\n                                onClick={async () => {\r\n                                    let tmp = await removeWarning({\r\n                                        variables: {\r\n                                            order_id: Number(id),\r\n                                        },\r\n                                    });\r\n                                    if (tmp.data?.removeWarning) {\r\n                                        window.location.reload();\r\n                                    } else {\r\n                                        M.toast({\r\n                                            html: \"An Error has occurred\",\r\n                                        });\r\n                                        M.toast({\r\n                                            html:\r\n                                                \"Please try again later or contact me on discord\",\r\n                                        });\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Remove\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col s12 \">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-content\">\r\n                                    <span\r\n                                        className=\"card-title \"\r\n                                        style={{ fontWeight: \"bold\" }}\r\n                                    >\r\n                                        <span className=\"red-text\">\r\n                                            {data.getOrderById.warning}\r\n                                        </span>\r\n                                        <span className=\"right\">\r\n                                            <a\r\n                                                className=\"btn modal-trigger black\"\r\n                                                href=\"#modal1\"\r\n                                            >\r\n                                                Remove Warning\r\n                                            </a>\r\n                                        </span>\r\n                                    </span>\r\n\r\n                                    <p className=\"flow-text bold\">\r\n                                        What to do:\r\n                                    </p>\r\n\r\n                                    <p\r\n                                        className=\"flow-text\"\r\n                                        style={{ marginLeft: \"32px\" }}\r\n                                    >\r\n                                        Double check the order. Ensure the\r\n                                        customer paid the correct amount\r\n                                    </p>\r\n\r\n                                    <p\r\n                                        className=\"flow-text\"\r\n                                        style={{ marginLeft: \"32px\" }}\r\n                                    >\r\n                                        This error will be thrown anytime there\r\n                                        is the slightest difference in\r\n                                        calculations.\r\n                                    </p>\r\n\r\n                                    <p\r\n                                        className=\"flow-text\"\r\n                                        style={{ marginLeft: \"32px\" }}\r\n                                    >\r\n                                        If the difference is greater than a\r\n                                        couple of pennies please contact me\r\n                                        through discord.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n            {state ? (\r\n                <>\r\n                    <div className=\"row\">\r\n                        <div className=\"col offset-s6 s6\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-content\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col s10 offset-s1\">\r\n                                            <span className=\"card-title\">\r\n                                                Order Summary\r\n                                            </span>\r\n\r\n                                            <div\r\n                                                className=\"divider\"\r\n                                                style={{\r\n                                                    marginTop: \"4px\",\r\n                                                    marginBottom: \"4px\",\r\n                                                }}\r\n                                            ></div>\r\n\r\n                                            <div>\r\n                                                <span className=\"left\">\r\n                                                    Products Total\r\n                                                </span>\r\n                                                <span className=\"right\">\r\n                                                    ${productsSubtotal}\r\n                                                </span>\r\n                                            </div>\r\n\r\n                                            <br />\r\n\r\n                                            <div>\r\n                                                <span className=\"left\">\r\n                                                    Tax\r\n                                                </span>\r\n                                                <span className=\"right\">\r\n                                                    $\r\n                                                    {Number(\r\n                                                        Number(\r\n                                                            productsSubtotal\r\n                                                        ) * 0.095\r\n                                                    ).toFixed(2)}\r\n                                                </span>\r\n                                            </div>\r\n\r\n                                            <br />\r\n\r\n                                            <div>\r\n                                                <span className=\"left\">\r\n                                                    Shipping\r\n                                                </span>\r\n                                                <span className=\"right\">\r\n                                                    ${shippingTotal}\r\n                                                </span>\r\n                                            </div>\r\n\r\n                                            <br />\r\n\r\n                                            <>\r\n                                                {!data.getOrderById.coupon ? (\r\n                                                    <></>\r\n                                                ) : (\r\n                                                    <>\r\n                                                        <div\r\n                                                            className=\"divider\"\r\n                                                            style={{\r\n                                                                marginTop:\r\n                                                                    \"4px\",\r\n                                                                marginBottom:\r\n                                                                    \"4px\",\r\n                                                            }}\r\n                                                        ></div>\r\n                                                        <span className=\"left\">\r\n                                                            Coupon(\r\n                                                            {\r\n                                                                data\r\n                                                                    .getOrderById\r\n                                                                    .coupon\r\n                                                            }\r\n                                                            )\r\n                                                        </span>\r\n                                                        <span className=\"right\">\r\n                                                            {\r\n                                                                data\r\n                                                                    .getOrderById\r\n                                                                    .discount\r\n                                                            }\r\n                                                            % (\r\n                                                            <span className=\"red-text bold\">\r\n                                                                -${amountOff}\r\n                                                            </span>\r\n                                                            )\r\n                                                        </span>\r\n                                                    </>\r\n                                                )}\r\n                                            </>\r\n\r\n                                            <br />\r\n                                            <div\r\n                                                className=\"divider\"\r\n                                                style={{\r\n                                                    marginTop: \"4px\",\r\n                                                    marginBottom: \"4px\",\r\n                                                }}\r\n                                            ></div>\r\n                                            <span className=\"left bold\">\r\n                                                Order Total\r\n                                            </span>\r\n                                            <span className=\"right bold\">\r\n                                                $\r\n                                                {Number(\r\n                                                    data.getOrderById\r\n                                                        .order_total! / 100\r\n                                                ).toFixed(2)}\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n\r\n            <div style={{ marginTop: \"16px\" }}>\r\n                <div className=\"row z-depth-1\">\r\n                    <div\r\n                        className=\"col s12\"\r\n                        style={{\r\n                            padding: \"0px\",\r\n                            backgroundColor: \"white\",\r\n                        }}\r\n                    >\r\n                        <div\r\n                            className=\"card-header row\"\r\n                            style={{\r\n                                borderLeft: \"5px solid #ff0000\",\r\n                                paddingTop: \"13px\",\r\n                                paddingBottom: \"13px\",\r\n                                paddingRight: \"25px\",\r\n                                paddingLeft: \"20px\",\r\n                                margin: \"0px\",\r\n                                zIndex: 4,\r\n                                position: \"relative\",\r\n                            }}\r\n                        >\r\n                            <span\r\n                                className=\"hide-on-small-only\"\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    width: \"41.7%\",\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    style={{\r\n                                        color: \"#1d252c\",\r\n                                        paddingRight: \"1rem\",\r\n                                        fontWeight: 700,\r\n                                    }}\r\n                                >\r\n                                    Order ID\r\n                                </span>\r\n                                <span>CR-{data.getOrderById.order_id}</span>\r\n                            </span>\r\n\r\n                            <span\r\n                                className=\"hide-on-med-and-up\"\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    width: \"50%\",\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    style={{\r\n                                        color: \"#1d252c\",\r\n                                        paddingRight: \"1rem\",\r\n                                        fontWeight: 700,\r\n                                    }}\r\n                                >\r\n                                    Order ID\r\n                                </span>\r\n                                <span>CR-{data.getOrderById.order_id}</span>\r\n                            </span>\r\n\r\n                            <span\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    width: \"17%\",\r\n                                }}\r\n                                className=\"hide-on-med-and-down\"\r\n                            >\r\n                                {data.getOrderById.date_of_purchase ? (\r\n                                    <span>{dateOfPurchase}</span>\r\n                                ) : (\r\n                                    <></>\r\n                                )}\r\n                            </span>\r\n\r\n                            <span\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    width: \"30.3%\",\r\n                                    fontWeight: 700,\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    style={{\r\n                                        display: \"flex\",\r\n                                        justifyContent: \"space-between\",\r\n                                    }}\r\n                                >\r\n                                    <span>\r\n                                        $\r\n                                        {Number(\r\n                                            data.getOrderById.order_total! / 100\r\n                                        ).toFixed(2)}{\" \"}\r\n                                        {data.getOrderById.discount ? (\r\n                                            <span>\r\n                                                (\r\n                                                <span\r\n                                                    style={{\r\n                                                        color: \"rgb(255, 0, 0)\",\r\n                                                    }}\r\n                                                >\r\n                                                    -$\r\n                                                    {amountOff}\r\n                                                </span>\r\n                                                )\r\n                                            </span>\r\n                                        ) : (\r\n                                            <></>\r\n                                        )}\r\n                                    </span>\r\n                                    <span>\r\n                                        <span\r\n                                            style={{ color: \"#0457c8\" }}\r\n                                            className=\"right\"\r\n                                            onClick={() => setState(!state)}\r\n                                        >\r\n                                            Payment Details\r\n                                        </span>\r\n                                    </span>\r\n                                </span>\r\n                            </span>\r\n                        </div>\r\n\r\n                        <div className=\"divider\"></div>\r\n\r\n                        <div\r\n                            className=\"card-body\"\r\n                            style={{\r\n                                backgroundColor: \"white\",\r\n                                zIndex: 2,\r\n                                position: \"relative\",\r\n                            }}\r\n                        >\r\n                            {data.getOrderById.products!.map(\r\n                                (_val: any, j: any) => {\r\n                                    return (\r\n                                        <>\r\n                                            <div className=\"row\" key={j}>\r\n                                                <div className=\"col m4\">\r\n                                                    <img\r\n                                                        style={{\r\n                                                            width: \"100%\",\r\n                                                        }}\r\n                                                        src={\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .images![0]\r\n                                                                .img_url\r\n                                                        }\r\n                                                    />\r\n                                                </div>\r\n                                                <div\r\n                                                    style={{\r\n                                                        display: \"flex\",\r\n                                                        flexDirection: \"column\",\r\n                                                        justifyContent:\r\n                                                            \"space-between\",\r\n                                                        height: \"100%\",\r\n                                                        paddingLeft: 0,\r\n                                                    }}\r\n                                                    className=\"col m2 offset-m1 hide-on-small-only\"\r\n                                                >\r\n                                                    <p\r\n                                                        className=\"flow-text\"\r\n                                                        style={{\r\n                                                            fontSize: \"16px\",\r\n                                                            fontWeight: \"bold\",\r\n                                                        }}\r\n                                                    >\r\n                                                        {\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .name!\r\n                                                        }\r\n                                                    </p>\r\n                                                    <p className=\"hide-on-small-only\">\r\n                                                        Qty:{\" \"}\r\n                                                        {\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .quantityOrdered\r\n                                                        }{\" \"}\r\n                                                        ($\r\n                                                        {Number(\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .productSubtotal! /\r\n                                                                100\r\n                                                        ).toFixed(2)}{\" \"}\r\n                                                        {data.getOrderById\r\n                                                            .products![j]\r\n                                                            .quantityOrdered ===\r\n                                                        1 ? (\r\n                                                            <></>\r\n                                                        ) : (\r\n                                                            <>\r\n                                                                @ $\r\n                                                                {Number(\r\n                                                                    data\r\n                                                                        .getOrderById\r\n                                                                        .products![\r\n                                                                        j\r\n                                                                    ].price /\r\n                                                                        100\r\n                                                                ).toFixed(\r\n                                                                    2\r\n                                                                )}{\" \"}\r\n                                                                each\r\n                                                            </>\r\n                                                        )}\r\n                                                        )\r\n                                                    </p>\r\n                                                </div>\r\n\r\n                                                <div className=\"col offset-m1 m3\">\r\n                                                    <>\r\n                                                        {j === 0 ? (\r\n                                                            <>\r\n                                                                {!shipping ? (\r\n                                                                    <p className=\"bold\">\r\n                                                                        No\r\n                                                                        shipping\r\n                                                                        information\r\n                                                                        was\r\n                                                                        found,\r\n                                                                        check\r\n                                                                        paypal,\r\n                                                                        or\r\n                                                                        contact\r\n                                                                        the\r\n                                                                        user.\r\n                                                                    </p>\r\n                                                                ) : (\r\n                                                                    <div\r\n                                                                        style={{\r\n                                                                            width:\r\n                                                                                \"100%\",\r\n                                                                            borderLeft:\r\n                                                                                \" 4px solid #ff0000\",\r\n                                                                            paddingLeft:\r\n                                                                                \"15px\",\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <p className=\"bold\">\r\n                                                                            {!shipping.name ? (\r\n                                                                                <>\r\n                                                                                    No\r\n                                                                                    name\r\n                                                                                    was\r\n                                                                                    found\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    {\r\n                                                                                        shipping.name\r\n                                                                                    }\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.line1\r\n                                                                            }\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.city\r\n                                                                            }\r\n                                                                            ,{\" \"}\r\n                                                                            {\r\n                                                                                shipping.state\r\n                                                                            }{\" \"}\r\n                                                                            {\r\n                                                                                shipping.postal_code\r\n                                                                            }\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.country\r\n                                                                            }\r\n                                                                        </p>\r\n                                                                    </div>\r\n                                                                )}\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            <> </>\r\n                                                        )}\r\n                                                    </>\r\n                                                </div>\r\n\r\n                                                <div\r\n                                                    style={{\r\n                                                        display: \"flex\",\r\n                                                        justifyContent:\r\n                                                            \"center\",\r\n                                                    }}\r\n                                                    className=\"col s12 hide-on-med-and-up\"\r\n                                                >\r\n                                                    <p\r\n                                                        className=\"flow-text\"\r\n                                                        style={{\r\n                                                            fontSize: \"16px\",\r\n                                                            fontWeight: \"bold\",\r\n                                                        }}\r\n                                                    >\r\n                                                        {\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .name\r\n                                                        }\r\n                                                    </p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </>\r\n                                    );\r\n                                }\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OrderDetails;\r\n","import { useState } from \"react\";\r\nimport {\r\n    useGetOrdersQuery,\r\n    useEditTrackingMutation,\r\n} from \"../../generated/graphql\";\r\nimport { Sorting } from \"../../Sorting\";\r\n\r\nconst Orders = () => {\r\n    const { data, loading, error } = useGetOrdersQuery();\r\n    const [EditTracking] = useEditTrackingMutation();\r\n    const { sortByProp } = Sorting();\r\n\r\n    const [state, setState] = useState({ tracking: [] as any[] });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let sortedOrders = sortByProp(data.getOrders, \"order_id\", true);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Order ID</th>\r\n                        <th>Tracking Number</th>\r\n                        <th>Products Ordered</th>\r\n                        <th>Order Total</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {sortedOrders.map((_val: any, i: any) => {\r\n                        let order: any = sortedOrders[i];\r\n\r\n                        if (order.warning) {\r\n                            M.toast({\r\n                                html: `Order #${order.order_id} has a warning`,\r\n                            });\r\n                        }\r\n\r\n                        return (\r\n                            <tr className={order.warning ? \"red\" : \"\"} key={i}>\r\n                                <td>{order?.order_id}</td>\r\n                                <td>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col s7\">\r\n                                            <div className=\"row\">\r\n                                                <div className=\"input-field\">\r\n                                                    <input\r\n                                                        id={`tracking-${i}`}\r\n                                                        type=\"text\"\r\n                                                        value={\r\n                                                            state.tracking[i]\r\n                                                        }\r\n                                                        onChange={e => {\r\n                                                            let tmp: any[] =\r\n                                                                state.tracking;\r\n                                                            tmp[i] =\r\n                                                                e.target.value;\r\n                                                            setState({\r\n                                                                ...state,\r\n                                                                tracking: tmp,\r\n                                                            });\r\n                                                        }}\r\n                                                    />\r\n                                                    <label\r\n                                                        htmlFor={`tracking-${i}`}\r\n                                                    >\r\n                                                        {order?.tracking_num ? (\r\n                                                            <>\r\n                                                                {\r\n                                                                    order.tracking_num\r\n                                                                }\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            <>NONE</>\r\n                                                        )}\r\n                                                    </label>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div\r\n                                            className=\"col s4 offset-s1\"\r\n                                            style={{\r\n                                                marginTop: \"25px\",\r\n                                            }}\r\n                                        >\r\n                                            <button\r\n                                                className=\"btn black\"\r\n                                                onClick={async () => {\r\n                                                    if (state.tracking[i]) {\r\n                                                        let tmp = await EditTracking(\r\n                                                            {\r\n                                                                variables: {\r\n                                                                    order_id:\r\n                                                                        order.order_id,\r\n                                                                    new_tracking_num:\r\n                                                                        state\r\n                                                                            .tracking[\r\n                                                                            i\r\n                                                                        ],\r\n                                                                },\r\n                                                            }\r\n                                                        );\r\n\r\n                                                        if (!!tmp) {\r\n                                                            if (\r\n                                                                tmp.data\r\n                                                                    ?.editTracking\r\n                                                            ) {\r\n                                                                window.location.reload();\r\n                                                            } else {\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"Failed\",\r\n                                                                });\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"Contact me on discord\",\r\n                                                                });\r\n                                                            }\r\n                                                        } else {\r\n                                                            M.toast({\r\n                                                                html: \"Failed\",\r\n                                                            });\r\n                                                            M.toast({\r\n                                                                html:\r\n                                                                    \"Contact me on discord\",\r\n                                                            });\r\n                                                        }\r\n                                                    } else {\r\n                                                        console.log(\r\n                                                            \"undefined\"\r\n                                                        );\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                Submit\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </td>\r\n                                <td>\r\n                                    {order?.products!.map(\r\n                                        (_val2: any, j: any) => {\r\n                                            return (\r\n                                                <div className=\"row\" key={j}>\r\n                                                    {order.products[j].name} x{\" \"}\r\n                                                    {\r\n                                                        order.products[j]\r\n                                                            .quantityOrdered\r\n                                                    }\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                    )}\r\n                                </td>\r\n\r\n                                <td>\r\n                                    $\r\n                                    {Number(order.order_total / 100).toFixed(2)}\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <a\r\n                                        href={`#/order-details:${order.order_id}`}\r\n                                    >\r\n                                        See Details\r\n                                    </a>\r\n                                </td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Orders;\r\n","import \"../../css/products.scss\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useApiGetProductsQuery } from \"../../generated/graphql\";\r\n\r\nconst Products = () => {\r\n    const location: any = useLocation();\r\n    if (!!location.state) {\r\n        if (location.state.reload) {\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const { data, loading, error } = useApiGetProductsQuery();\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"data\", data);\r\n\r\n    return (\r\n        <div className=\"container\" style={{ marginTop: \"50px\" }}>\r\n            <nav\r\n                className=\"z-depth-0 black-text \"\r\n                style={{ backgroundColor: \"transparent\" }}\r\n            >\r\n                <div className=\"nav-wrapper\">\r\n                    <h5\r\n                        className=\"left\"\r\n                        style={{\r\n                            marginBottom: \"48px\",\r\n                            marginLeft: \"16px\",\r\n                            marginRight: \"16px\",\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"26px\",\r\n                            color: \"#14161a\",\r\n                        }}\r\n                    >\r\n                        Products\r\n                    </h5>\r\n                    <ul className=\"right\">\r\n                        <li>\r\n                            <a href=\"#/add-products\">\r\n                                <i className=\"material-icons black-text\">add</i>\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n\r\n            <div className=\"products-grid\">\r\n                {data?.apiGetProducts.map((_val, i) => {\r\n                    let product: any = data.apiGetProducts[i];\r\n                    return (\r\n                        <div\r\n                            className=\"card\"\r\n                            style={{ margin: \"0px 16px 32px 16px\" }}\r\n                            key={i}\r\n                        >\r\n                            {/* image here */}\r\n                            <div className=\"card-image\">\r\n                                {!product.images[0] ||\r\n                                !product.images[0].img_url ? (\r\n                                    <img src=\"https://materializecss.com/images/sample-1.jpg\" />\r\n                                ) : (\r\n                                    <img\r\n                                        src={product.images[0].img_url}\r\n                                        style={{ maxHeight: \"280px\" }}\r\n                                    />\r\n                                )}\r\n\r\n                                <a\r\n                                    href={`#/edit-product:${product.product_id}`}\r\n                                    className=\"btn-floating btn-large halfway-fab large blue-grey darken-4\"\r\n                                >\r\n                                    <i className=\"large material-icons\">edit</i>\r\n                                </a>\r\n                            </div>\r\n\r\n                            <div className=\"card-content\">\r\n                                <span className=\"card-title\">\r\n                                    {product.name}\r\n                                </span>\r\n                                <p className=\"product-price\">\r\n                                    ${Number(product.price / 100).toFixed(2)}\r\n                                </p>\r\n                                <p>{product.desc}</p>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Products;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useAddAnnouncementMutation,\r\n    useDeleteAnnouncementMutation,\r\n    useGetAnnouncementsQuery,\r\n} from \"../../generated/graphql\";\r\nimport M from \"materialize-css\";\r\n\r\nconst Announcements = () => {\r\n    const { data, loading, error } = useGetAnnouncementsQuery();\r\n    const [ADD_ANNOUNCE] = useAddAnnouncementMutation();\r\n    const [DELETE_ANNOUNCE] = useDeleteAnnouncementMutation();\r\n\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [text, setText] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        M.AutoInit();\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let announcements: any = data!.getAnnouncements;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"center-align\">Announcements</h1>\r\n\r\n            {announcements.length === 0 ? (\r\n                <h4 className=\"center-align\">NONE</h4>\r\n            ) : (\r\n                <>\r\n                    {announcements.map((_val: any, i: any) => {\r\n                        return (\r\n                            <div\r\n                                className=\"container\"\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                }}\r\n                                key={i}\r\n                            >\r\n                                <h4 className=\"center-align\">\r\n                                    {announcements[i].text}\r\n                                </h4>\r\n\r\n                                <i\r\n                                    className=\"material-icons red-text noselect\"\r\n                                    onClick={async () => {\r\n                                        try {\r\n                                            await DELETE_ANNOUNCE({\r\n                                                variables: {\r\n                                                    id: announcements[i].id,\r\n                                                },\r\n                                            });\r\n                                            window.location.reload();\r\n                                        } catch {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html:\r\n                                                    \"Could not add Announcement\",\r\n                                            });\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    delete\r\n                                </i>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </>\r\n            )}\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                <button\r\n                    className=\"btn black\"\r\n                    onClick={() => {\r\n                        setRefresh(true);\r\n                    }}\r\n                >\r\n                    Add an Announcement\r\n                </button>\r\n            </div>\r\n            {refresh ? (\r\n                <>\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"text_1\"\r\n                            className=\"validate\"\r\n                            type=\"text\"\r\n                            value={text}\r\n                            onChange={e => setText(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"text_1\">Announcement Text</label>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn green\"\r\n                            onClick={async () => {\r\n                                if (!!text) {\r\n                                    try {\r\n                                        await ADD_ANNOUNCE({\r\n                                            variables: {\r\n                                                text,\r\n                                            },\r\n                                        });\r\n\r\n                                        window.location.reload();\r\n                                    } catch {\r\n                                        M.toast({\r\n                                            html: \"An error occured\",\r\n                                        });\r\n                                        M.toast({\r\n                                            html: \"Could not add Announcement\",\r\n                                        });\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >\r\n                            Confirm\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Announcements;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useAddCouponMutation,\r\n    useDeleteCouponMutation,\r\n    useGetCouponsQuery,\r\n} from \"../../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nconst Coupons = () => {\r\n    const { data, loading, error } = useGetCouponsQuery();\r\n    const [addCoupon] = useAddCouponMutation();\r\n    const [deleteCoupon] = useDeleteCouponMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [discount, setDiscount] = useState(\"\");\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [fresh, setFresh] = useState(false);\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n\r\n        M.AutoInit();\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"center-align\">Active Coupons</h1>\r\n            {data?.getCoupons.length === 0 ? (\r\n                <h4 className=\"center-align\">NONE</h4>\r\n            ) : (\r\n                <>\r\n                    {data?.getCoupons.map((_val, i) => {\r\n                        return (\r\n                            <div\r\n                                className=\"container\"\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                }}\r\n                                key={i}\r\n                            >\r\n                                <h4 className=\"center-align\">\r\n                                    {data.getCoupons[i].coupon_name}\r\n                                </h4>\r\n                                <h5 className=\"center-align\">\r\n                                    -\r\n                                    {data.getCoupons[i].discount\r\n                                        ? data.getCoupons[i].discount\r\n                                        : 0}\r\n                                    %\r\n                                </h5>\r\n                                <i\r\n                                    className=\"material-icons red-text\"\r\n                                    onClick={async () => {\r\n                                        let tmp = await deleteCoupon({\r\n                                            variables: {\r\n                                                coupon_name:\r\n                                                    data.getCoupons[i]\r\n                                                        .coupon_name,\r\n                                            },\r\n                                        });\r\n\r\n                                        if (!tmp!.data!.deleteCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n\r\n                                            M.toast({\r\n                                                html: \"Could not delete coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    delete\r\n                                </i>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </>\r\n            )}\r\n\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                <button\r\n                    className=\"btn black\"\r\n                    onClick={() => {\r\n                        setRefresh(true);\r\n                    }}\r\n                >\r\n                    Add a coupon\r\n                </button>\r\n            </div>\r\n\r\n            {refresh ? (\r\n                <>\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                            marginTop: \"24px\",\r\n                        }}\r\n                    >\r\n                        <a\r\n                            className=\"dropdown-trigger btn black\"\r\n                            href=\"#\"\r\n                            data-target=\"dropdown1\"\r\n                        >\r\n                            {fresh ? (\r\n                                <>Coupon Type: Free Shipping</>\r\n                            ) : (\r\n                                <>Coupon Type: Discount</>\r\n                            )}\r\n                        </a>\r\n                    </div>\r\n\r\n                    <ul id=\"dropdown1\" className=\"dropdown-content\">\r\n                        <li\r\n                            onClick={() => {\r\n                                setFresh(false);\r\n                            }}\r\n                        >\r\n                            discount\r\n                        </li>\r\n                        <li\r\n                            onClick={() => {\r\n                                setFresh(true);\r\n                                setDiscount(\"FREE_SHIPPING\");\r\n                            }}\r\n                        >\r\n                            free shipping\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <div className=\"row\" style={{ marginTop: \"32px\" }}>\r\n                        <div className=\"col s6\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"coupon_name\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={name}\r\n                                    onChange={e =>\r\n                                        setName(e.target.value.toLowerCase())\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"coupon_name\">Coupon Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a coupon name\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col s6\">\r\n                            {fresh ? (\r\n                                <></>\r\n                            ) : (\r\n                                <div className=\"input-field\">\r\n                                    <input\r\n                                        id=\"discount\"\r\n                                        type=\"text\"\r\n                                        className=\"validate\"\r\n                                        minLength={0}\r\n                                        maxLength={2}\r\n                                        value={discount}\r\n                                        onChange={e => {\r\n                                            if (!e.target.value) {\r\n                                                setDiscount(\"0\");\r\n                                            }\r\n                                            if (e.target.value.match(/\\d/g)) {\r\n                                                setDiscount(e.target.value);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <label htmlFor=\"discount\">\r\n                                        Discount(Percentage in Numbers)\r\n                                    </label>\r\n                                    <span\r\n                                        className=\"helper-text\"\r\n                                        data-error=\"Please enter a discount amount\"\r\n                                    ></span>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn green center-align\"\r\n                            onClick={async () => {\r\n                                if (\r\n                                    name.length === 0 ||\r\n                                    discount.length === 0\r\n                                ) {\r\n                                    if (name.length === 0) {\r\n                                        document\r\n                                            .getElementById(\"coupon_name\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n                                    if (!fresh && discount.length === 0) {\r\n                                        document\r\n                                            .getElementById(\"discount\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n                                } else {\r\n                                    if (!fresh) {\r\n                                        let tmp = await addCoupon({\r\n                                            variables: {\r\n                                                coupon_name: name,\r\n                                                discount,\r\n                                            },\r\n                                        });\r\n                                        if (!tmp!.data!.addCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html: \"Could not add coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    } else {\r\n                                        let tmp = await addCoupon({\r\n                                            variables: {\r\n                                                coupon_name: name,\r\n                                                discount: \"FREE_SHIPPING\",\r\n                                            },\r\n                                        });\r\n                                        console.log(\"tmp :>> \", tmp);\r\n                                        if (!tmp!.data!.addCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html: \"Could not add coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >\r\n                            confirm\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Coupons;\r\n","import {\r\n    useGetApiUsersQuery,\r\n    useDeleteApiUserMutation,\r\n    useAddApiUserMutation,\r\n} from \"../../generated/graphql\";\r\nimport \"../../css/table.scss\";\r\nimport { useState } from \"react\";\r\n\r\nconst EditUsers = () => {\r\n    const { data, loading, error } = useGetApiUsersQuery();\r\n    const [deleteApiUser] = useDeleteApiUserMutation();\r\n    const [addApiUser] = useAddApiUserMutation();\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <>An error has occurred</>;\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h3 className=\"white-text noselect\">Api Users</h3>\r\n                    </span>\r\n\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <div className=\"container\">\r\n                            <table className=\"striped responsive\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th></th>\r\n                                        <th>Username</th>\r\n                                        <th></th>\r\n                                        <th></th>\r\n                                    </tr>\r\n\r\n                                    {data.getApiUsers.map((_val, i) => {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td></td>\r\n                                                <td>\r\n                                                    {\r\n                                                        data.getApiUsers[i]\r\n                                                            .username\r\n                                                    }\r\n                                                </td>\r\n                                                <td>\r\n                                                    <i\r\n                                                        className=\"material-icons red-text noselect\"\r\n                                                        onClick={async () => {\r\n                                                            // delete user\r\n                                                            let tmp = await deleteApiUser(\r\n                                                                {\r\n                                                                    variables: {\r\n                                                                        uuid:\r\n                                                                            data\r\n                                                                                .getApiUsers[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .uuid,\r\n                                                                    },\r\n                                                                }\r\n                                                            );\r\n\r\n                                                            if (\r\n                                                                tmp.data\r\n                                                                    ?.deleteApiUser\r\n                                                            ) {\r\n                                                                window.location.reload();\r\n                                                            } else {\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"An Error has occured\",\r\n                                                                });\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        delete\r\n                                                    </i>\r\n                                                </td>\r\n                                                <td></td>\r\n                                            </tr>\r\n                                        );\r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col s4\">\r\n                                <div className=\"input-field\">\r\n                                    <input\r\n                                        id=\"username\"\r\n                                        type=\"text\"\r\n                                        className=\"validate\"\r\n                                        value={username}\r\n                                        onChange={e =>\r\n                                            setUsername(e.target.value)\r\n                                        }\r\n                                    />\r\n                                    <label htmlFor=\"username\">Username</label>\r\n                                    <span\r\n                                        id=\"coupon-helper\"\r\n                                        className=\"helper-text\"\r\n                                        data-error=\"Please enter a username\"\r\n                                    ></span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col s4\">\r\n                                <div className=\"input-field\">\r\n                                    <input\r\n                                        id=\"pass\"\r\n                                        type=\"text\"\r\n                                        className=\"validate\"\r\n                                        value={password}\r\n                                        onChange={e =>\r\n                                            setPassword(e.target.value)\r\n                                        }\r\n                                    />\r\n                                    <label htmlFor=\"pass\">Password</label>\r\n                                    <span\r\n                                        id=\"coupon-helper\"\r\n                                        className=\"helper-text\"\r\n                                        data-error=\"Please enter a password\"\r\n                                    ></span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col s3\">\r\n                                <button\r\n                                    style={{ width: \"100%\" }}\r\n                                    className=\"btn right footerBtn green\"\r\n                                    onClick={async () => {\r\n                                        document\r\n                                            .getElementById(\"pass\")!\r\n                                            .classList.remove(\"invalid\");\r\n                                        document\r\n                                            .getElementById(\"username\")!\r\n                                            .classList.remove(\"invalid\");\r\n                                        if (!password || !username) {\r\n                                            if (!password) {\r\n                                                document\r\n                                                    .getElementById(\"pass\")!\r\n                                                    .classList.add(\"invalid\");\r\n                                            }\r\n\r\n                                            if (!username) {\r\n                                                document\r\n                                                    .getElementById(\"username\")!\r\n                                                    .classList.add(\"invalid\");\r\n                                            }\r\n                                        } else {\r\n                                            let tmp = await addApiUser({\r\n                                                variables: {\r\n                                                    username,\r\n                                                    password,\r\n                                                },\r\n                                            });\r\n                                            if (tmp.data?.addApiUser) {\r\n                                                window.location.reload();\r\n                                            } else {\r\n                                                M.toast({\r\n                                                    html:\r\n                                                        \"An Error has occurred\",\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    Create a user\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditUsers;\r\n","import {\r\n    useGetMaintenanceQuery,\r\n    useToggleMaintenanceMutation,\r\n} from \"../../generated/graphql\";\r\n\r\nconst Maintenance = () => {\r\n    const { data, loading, error } = useGetMaintenanceQuery();\r\n    const [toggleMaintenance] = useToggleMaintenanceMutation();\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    } else if (!data || error) {\r\n        return (\r\n            <div className=\"container\">\r\n                <h5>Maintenance: ERR</h5>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"centered\" style={{ marginTop: \"32px\" }}>\r\n                <h4>\r\n                    <span className=\"switch\">\r\n                        Maintenance:{\" \"}\r\n                        {data.getMaintenance ? (\r\n                            <label>\r\n                                Off\r\n                                <input type=\"checkbox\" checked />\r\n                                <span\r\n                                    className=\"lever\"\r\n                                    onClick={async () => {\r\n                                        await toggleMaintenance();\r\n                                        window.location.reload();\r\n                                    }}\r\n                                ></span>\r\n                                On\r\n                            </label>\r\n                        ) : (\r\n                            <label>\r\n                                Off\r\n                                <input type=\"checkbox\" />\r\n                                <span\r\n                                    className=\"lever\"\r\n                                    onClick={async () => {\r\n                                        await toggleMaintenance();\r\n                                        window.location.reload();\r\n                                    }}\r\n                                ></span>\r\n                                On\r\n                            </label>\r\n                        )}\r\n                    </span>\r\n                </h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Maintenance;\r\n","import Announcements from \"./Announcements\";\r\nimport Coupons from \"./Coupons\";\r\nimport EditUsers from \"./EditUsers\";\r\nimport Maintenance from \"./Maintenance\";\r\n\r\nconst Utils = () => {\r\n    return (\r\n        <div>\r\n            <Maintenance />\r\n\r\n            <Divider />\r\n\r\n            <Coupons />\r\n\r\n            <Divider />\r\n\r\n            <Announcements />\r\n\r\n            <Divider />\r\n\r\n            <EditUsers />\r\n\r\n            <Divider />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Divider = () => {\r\n    return (\r\n        <div className=\"centered\">\r\n            <div className=\"container\" style={{ margin: 45 }}>\r\n                <div className=\"divider\" style={{ color: \"black\" }}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Utils;\r\n","import { useLocation } from \"react-router\";\r\nimport { useGetSectionsQuery } from \"../../generated/graphql\";\r\nconst Sections = () => {\r\n    const location: any = useLocation();\r\n\r\n    console.log(`location`, location);\r\n\r\n    if (!!location.state) {\r\n        if (location.state.reload) {\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const { data, loading, error } = useGetSectionsQuery();\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (error) {\r\n        M.toast({ html: `${error}` });\r\n\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <nav\r\n                className=\"z-depth-0 black-text \"\r\n                style={{ backgroundColor: \"transparent\" }}\r\n            >\r\n                <div className=\"nav-wrapper\">\r\n                    <h5\r\n                        className=\"left\"\r\n                        style={{\r\n                            marginBottom: \"48px\",\r\n                            marginLeft: \"16px\",\r\n                            marginRight: \"16px\",\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"26px\",\r\n                            color: \"#14161a\",\r\n                        }}\r\n                    >\r\n                        Sections\r\n                    </h5>\r\n                    <ul className=\"right\">\r\n                        <li>\r\n                            <a href=\"#/add-sections\">\r\n                                <i className=\"material-icons black-text\">add</i>\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n\r\n            <div className=\"products-grid\">\r\n                {!!data ? (\r\n                    data.getSections.map((_val, i) => {\r\n                        return (\r\n                            <div\r\n                                className=\"card\"\r\n                                style={{ margin: \"0px, 16px, 32px, 16px\" }}\r\n                                key={i}\r\n                            >\r\n                                <div className=\"card-image\">\r\n                                    <img src={data.getSections[i].thumbnail} />\r\n                                    <a\r\n                                        href={`#/edit-section:${data.getSections[i].section_id}`}\r\n                                        className=\"btn-floating btn-large halfway-fab large blue-grey darken-4\"\r\n                                    >\r\n                                        <i className=\"large material-icons\">\r\n                                            edit\r\n                                        </i>\r\n                                    </a>\r\n                                </div>\r\n\r\n                                <div className=\"card-content\">\r\n                                    <span className=\"card-title\">\r\n                                        {data.getSections[i].name}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })\r\n                ) : (\r\n                    <></>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sections;\r\n","import { useState } from \"react\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport Axios from \"axios\";\r\nimport { useAddSectionMutation } from \"../../generated/graphql\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nconst AddSection = () => {\r\n    const [addSection] = useAddSectionMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [imgUrl, setImgUrl] = useState(\"\");\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    const handleSubmit = async () => {\r\n        if (!name || !imgUrl) {\r\n            if (!name) {\r\n                M.toast({ html: \"Please add a Section name\" });\r\n            }\r\n            if (!imgUrl) {\r\n                M.toast({ html: \"Please add a img\" });\r\n            }\r\n        } else {\r\n            let res = await addSection({\r\n                variables: {\r\n                    name,\r\n                    thumbnail: imgUrl,\r\n                },\r\n            });\r\n\r\n            if (!res.data || !res.data.addSection) {\r\n                M.toast({ html: \"An Error has occurred\" });\r\n            } else {\r\n                setRedirect(true);\r\n            }\r\n        }\r\n\r\n        if (document.getElementById(\"submit-btn\")) {\r\n            document.getElementById(\"submit-btn\")!.classList.remove(\"disabled\");\r\n        }\r\n    };\r\n\r\n    const addImage = async (file: any) => {\r\n        const form = new FormData();\r\n\r\n        if (\r\n            !process.env.REACT_APP_CLOUDINARY_CLOUD_NAME ||\r\n            !process.env.REACT_APP_CLOUDINARY_API_KEY\r\n        ) {\r\n            M.toast({ html: \"env err\" });\r\n            return;\r\n        }\r\n\r\n        form.append(\"api_key\", `${process.env.REACT_APP_CLOUDINARY_API_KEY}`); //get api key from cloudinary\r\n        form.append(\"file\", file);\r\n        form.append(\"tags\", `codeinfuse, medium, gist`);\r\n        form.append(\"upload_preset\", \"re5zmdqn\");\r\n        let t = (Date.now() / 1000) | 0;\r\n        form.append(\"timestamp\", `${t}`);\r\n\r\n        // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n        let res = await Axios.post(\r\n            `https://api.cloudinary.com/v1_1/${process.env.REACT_APP_CLOUDINARY_CLOUD_NAME}/image/upload`,\r\n            form,\r\n            {\r\n                headers: {\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                },\r\n            }\r\n        );\r\n        setImgUrl(res.data.secure_url);\r\n    };\r\n\r\n    if (redirect) {\r\n        return (\r\n            <Redirect to={{ pathname: \"/sections\", state: { reload: true } }} />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <h5>Add A Section</h5>\r\n            </div>\r\n\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => setName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"name\">Section Name (Required)</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a section name\"\r\n                        ></span>\r\n                    </div>\r\n                    <div className=\"container\">\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                            }}\r\n                        >\r\n                            <button\r\n                                id=\"submit-btn\"\r\n                                className=\"btn green\"\r\n                                onClick={() => {\r\n                                    document\r\n                                        .getElementById(\"submit-btn\")!\r\n                                        .classList.add(\"disabled\");\r\n                                    handleSubmit();\r\n                                }}\r\n                            >\r\n                                Submit\r\n                            </button>\r\n\r\n                            <Dropzone onDrop={async ([file]) => addImage(file)}>\r\n                                {({ getRootProps, getInputProps }) => (\r\n                                    <div {...getRootProps()}>\r\n                                        <input {...getInputProps()} />\r\n                                        <button className=\"btn black\">\r\n                                            ONLY 1 IMAGE (Required)\r\n                                        </button>\r\n                                        <br />\r\n                                        <span>Multiple images coming soon</span>\r\n                                    </div>\r\n                                )}\r\n                            </Dropzone>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n            {!imgUrl ? (\r\n                <></>\r\n            ) : (\r\n                <>\r\n                    <img src={imgUrl} alt=\"thumbnail\" />\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddSection;\r\n","import { useState } from \"react\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport { Redirect } from \"react-router\";\r\nimport {\r\n    useDeleteSectionMutation,\r\n    useGetSectionByIdQuery,\r\n    useUpdateSectionMutation,\r\n} from \"../../generated/graphql\";\r\nimport Axios from \"axios\";\r\n\r\nconst getSectionId = () => {\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        return Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        return Number(window.location.href.split(\":\")[3]);\r\n    }\r\n};\r\n\r\nconst EditSection = () => {\r\n    let section_id = getSectionId();\r\n    const [name, setName] = useState(\"\");\r\n    const [imgUrl, setImgUrl] = useState(\"\");\r\n    const [updateSection] = useUpdateSectionMutation();\r\n    const [deleteSection] = useDeleteSectionMutation();\r\n\r\n    const { data, loading, error } = useGetSectionByIdQuery({\r\n        variables: {\r\n            section_id,\r\n        },\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (error || !data) {\r\n        return (\r\n            <Redirect to={{ pathname: \"/sections\", state: { reload: true } }} />\r\n        );\r\n    }\r\n\r\n    const replaceImage = async (file: any) => {\r\n        const form = new FormData();\r\n\r\n        if (\r\n            !process.env.REACT_APP_CLOUDINARY_CLOUD_NAME ||\r\n            !process.env.REACT_APP_CLOUDINARY_API_KEY\r\n        ) {\r\n            M.toast({ html: \"env err\" });\r\n            return;\r\n        }\r\n\r\n        form.append(\"api_key\", `${process.env.REACT_APP_CLOUDINARY_API_KEY}`); //get api key from cloudinary\r\n\r\n        form.append(\"file\", file);\r\n        form.append(\"tags\", `codeinfuse, medium, gist`);\r\n        form.append(\"upload_preset\", \"re5zmdqn\");\r\n        let t = (Date.now() / 1000) | 0;\r\n        form.append(\"timestamp\", `${t}`);\r\n\r\n        // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n        let res = await Axios.post(\r\n            `https://api.cloudinary.com/v1_1/${process.env.REACT_APP_CLOUDINARY_CLOUD_NAME}/image/upload`,\r\n            form,\r\n            {\r\n                headers: {\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                },\r\n            }\r\n        );\r\n\r\n        setImgUrl(res.data.secure_url);\r\n    };\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    const handleSubmit = async () => {\r\n        //update section\r\n        let res = await updateSection({\r\n            variables: {\r\n                section_id,\r\n                name,\r\n                thumbnail: imgUrl,\r\n            },\r\n        });\r\n\r\n        if (!res.data || !res.data.updateSection) {\r\n            M.toast({ html: \"an error has occured\" });\r\n        } else {\r\n            window.location.reload();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <h5>Edit Section</h5>\r\n            </div>\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            className=\"input-field\"\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => {\r\n                                setName(e.target.value);\r\n                            }}\r\n                        />\r\n                        <label id=\"name-label\" htmlFor=\"name\">\r\n                            {data.getSectionById.name}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                    }}\r\n                >\r\n                    <button\r\n                        className=\"btn green\"\r\n                        id=\"submit-btn\"\r\n                        onClick={() => handleSubmit()}\r\n                    >\r\n                        Submit\r\n                    </button>\r\n\r\n                    <Dropzone onDrop={async ([file]) => replaceImage(file)}>\r\n                        {({ getRootProps, getInputProps }) => (\r\n                            <span {...getRootProps()}>\r\n                                <input {...getInputProps()} />\r\n                                <button className=\"btn black\" id=\"img_btn\">\r\n                                    Replace Image\r\n                                </button>\r\n                            </span>\r\n                        )}\r\n                    </Dropzone>\r\n\r\n                    <button\r\n                        className=\"btn modal-trigger red\"\r\n                        id=\"delete-button\"\r\n                        data-target=\"modal1\"\r\n                        onClick={async () => {\r\n                            let res = await deleteSection({\r\n                                variables: {\r\n                                    section_id,\r\n                                },\r\n                            });\r\n\r\n                            if (!res.data || !res.data.deleteSection) {\r\n                                M.toast({ html: \"an error occured\" });\r\n                            } else {\r\n                                window.location.reload();\r\n                            }\r\n                        }}\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n            </form>\r\n\r\n            {!imgUrl ? (\r\n                <img src={data.getSectionById.thumbnail} alt=\"thumbnail\" />\r\n            ) : (\r\n                <img src={imgUrl} alt=\"thumbnail\" />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditSection;\r\n","import { Redirect, Switch } from \"react-router\";\r\nimport { Route } from \"react-router-dom\";\r\nimport AddProducts from \"../components/Products/AddProducts\";\r\nimport EditProduct from \"../components/Products/EditProduct\";\r\nimport EditSocials from \"../components/Social/EditSocials\";\r\nimport OrderDetails from \"../components/Orders/OrderDetails\";\r\nimport Orders from \"../components/Orders/Orders\";\r\nimport Products from \"../components/Products/Products\";\r\nimport Utils from \"../components/UserUtils/Utils\";\r\nimport AuthRoute from \"./AuthRoute\";\r\nimport Sections from \"../components/Sections/Sections\";\r\nimport AddSection from \"../components/Sections/AddSection\";\r\nimport EditSection from \"../components/Sections/EditSection\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <AuthRoute exact path=\"/orders\" component={Orders} />\r\n            <AuthRoute exact path=\"/products\" component={Products} />\r\n            <AuthRoute exact path=\"/add-products\" component={AddProducts} />\r\n            <AuthRoute exact path=\"/edit-product:id\" component={EditProduct} />\r\n            <AuthRoute exact path=\"/utils\" component={Utils} />\r\n            <AuthRoute exact path=\"/edit-socials\" component={EditSocials} />\r\n            <AuthRoute exact path=\"/sections\" component={Sections} />\r\n            <AuthRoute exact path=\"/add-sections\" component={AddSection} />\r\n            <AuthRoute exact path=\"/edit-section:id\" component={EditSection} />\r\n            <AuthRoute\r\n                exact\r\n                path=\"/order-details:id\"\r\n                component={OrderDetails}\r\n            />\r\n            <Route render={() => <Redirect to=\"/products\" />} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import { useState } from \"react\";\r\nimport { useApiLoginMutation } from \"../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nimport { setAccessToken } from \"../accessToken\";\r\n\r\nconst Login = () => {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [Login] = useApiLoginMutation();\r\n    const handleSubmit = async () => {\r\n        try {\r\n            let res = await Login({\r\n                variables: {\r\n                    username,\r\n                    password,\r\n                },\r\n            });\r\n            console.log(\"res :>> \", res);\r\n            if (res && res.data) {\r\n                let tmp = res.data.apiLogin.accessToken as any;\r\n                setAccessToken(tmp!);\r\n                localStorage.setItem(\"urd\", res.data.apiLogin.refreshToken!);\r\n                window.location.reload();\r\n            }\r\n        } catch (err) {\r\n            console.log(\"err :>> \", err);\r\n            M.toast({ html: \"Failed Login\" });\r\n            M.toast({ html: \"server is likely down\" });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"login-wrapper\"\r\n            style={{\r\n                backgroundColor: \"#000\",\r\n                minHeight: \"100vh\",\r\n                minWidth: \"100vw\",\r\n            }}\r\n        >\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s12\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-content\">\r\n                                <div>\r\n                                    <h5 className=\"center-align\">Login</h5>\r\n                                    <form>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"username\"\r\n                                                    type=\"text\"\r\n                                                    value={username}\r\n                                                    onChange={e =>\r\n                                                        setUsername(\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                                <label htmlFor=\"username\">\r\n                                                    Username\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"password\"\r\n                                                    type=\"password\"\r\n                                                    value={password}\r\n                                                    onChange={e =>\r\n                                                        setPassword(\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                                <label htmlFor=\"password\">\r\n                                                    Password\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div\r\n                                            className=\"row\"\r\n                                            style={{\r\n                                                display: \"flex\",\r\n                                                justifyContent: \"center\",\r\n                                            }}\r\n                                        >\r\n                                            <button\r\n                                                className=\"btn\"\r\n                                                style={{\r\n                                                    minWidth: \"150px\",\r\n                                                    backgroundColor: \"#4285f4\",\r\n                                                    color: \"#fff\",\r\n                                                }}\r\n                                                onClick={() => handleSubmit()}\r\n                                            >\r\n                                                Login\r\n                                            </button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import { checkAuth } from \"../routes/AuthRoute\";\nimport PageWrapper from \"./PageWrapper\";\nimport Routes from \"../routes/Routes\";\nimport Login from \"./Login\";\nimport {\n    HashRouter as Router,\n    Route,\n    Redirect,\n    Switch,\n} from \"react-router-dom\";\n\nconst App = () => {\n    return (\n        <Router>\n            <div className=\"App\">\n                {checkAuth() ? (\n                    <PageWrapper children={<Routes />} />\n                ) : (\n                    <Switch>\n                        <Route exact path=\"/login\" component={Login} />\n                        <Route render={() => <Redirect to=\"/login\" />} />\n                    </Switch>\n                )}\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","let URI = \"\";\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n    URI = \"https://shrouded-plains-70355.herokuapp.com\";\r\n} else {\r\n    URI = \"http://localhost:4000\";\r\n}\r\n\r\nexport default URI;\r\n","import { useEffect, useState } from \"react\";\r\nimport { setAccessToken } from \"./accessToken\";\r\nimport App from \"./components/App\";\r\nimport URI from \"./URI\";\r\n\r\nconst AppWrapper = () => {\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        //get new accessToken & refreshToken with fetch to URI/refresh_token\r\n        let tmp = localStorage.getItem(\"urd\") as string;\r\n        fetch(`${URI}/api_refresh_token`, {\r\n            method: \"POST\",\r\n            credentials: \"include\",\r\n            headers: {\r\n                refreshToken: tmp,\r\n            },\r\n        }).then(async res => {\r\n            const { accessToken, refreshToken } = await res.json();\r\n            setAccessToken(accessToken);\r\n            localStorage.setItem(\"urd\", refreshToken);\r\n            setLoading(false);\r\n        });\r\n    });\r\n\r\n    if (loading) {\r\n        return <>loading..</>;\r\n    }\r\n\r\n    return <App />;\r\n};\r\n\r\nexport default AppWrapper;\r\n","import ReactDOM from \"react-dom\";\nimport AppWrapper from \"./AppWrapper\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport jwtDecode from \"jwt-decode\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport URI from \"./URI\";\n\nconst cache = new InMemoryCache({});\nconst requestLink = new ApolloLink(\n    (operation, forward) =>\n        new Observable(observer => {\n            let handle: any;\n            Promise.resolve(operation)\n                .then(operation => {\n                    const accessToken = getAccessToken();\n                    operation.setContext({\n                        headers: {\n                            authorization: accessToken\n                                ? `bearer ${accessToken}`\n                                : \"\",\n                        },\n                    });\n                })\n                .then(() => {\n                    handle = forward(operation).subscribe({\n                        next: observer.next.bind(observer),\n                        error: observer.error.bind(observer),\n                        complete: observer.complete.bind(observer),\n                    });\n                })\n                .catch(observer.error.bind(observer));\n\n            return () => {\n                if (handle) handle.unsubscribe();\n            };\n        })\n);\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new TokenRefreshLink({\n            accessTokenField: \"accessToken\",\n            isTokenValidOrUndefined: () => {\n                const token = getAccessToken();\n\n                if (!token) {\n                    return true;\n                }\n\n                try {\n                    const { exp } = jwtDecode(token) as any;\n                    if (Date.now() >= exp * 1000) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } catch {\n                    return false;\n                }\n            },\n            fetchAccessToken: () => {\n                return fetch(`${URI}/refresh_token`, {\n                    method: \"POST\",\n                    credentials: \"include\",\n                });\n            },\n            handleFetch: (accessToken: string) => {\n                setAccessToken(accessToken);\n            },\n            handleError: (err: any) => {\n                console.warn(\"Your refresh token is invalid, Try to relogin\");\n                console.error(err);\n            },\n        }) as any,\n        onError(({ graphQLErrors, networkError }) => {\n            console.log(graphQLErrors);\n            console.log(networkError);\n        }),\n        requestLink,\n        new HttpLink({\n            uri: `${URI}/graphql`,\n            credentials: \"include\",\n        }),\n    ]),\n    cache,\n});\n\nReactDOM.render(\n    <ApolloProvider client={client as any}>\n        <AppWrapper />\n    </ApolloProvider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}