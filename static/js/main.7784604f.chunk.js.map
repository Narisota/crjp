{"version":3,"sources":["accessToken.ts","routes/AuthRoute.tsx","components/Navbar.tsx","components/PageWrapper.tsx","generated/graphql.tsx","components/Products/AddProducts.tsx","components/Products/EditProduct.tsx","components/Social/PreviewFAB.tsx","components/Social/Socials.tsx","components/Social/EditSocials.tsx","Sorting.ts","components/Orders/OrderDetails.tsx","components/Orders/Orders.tsx","components/Products/Products.tsx","components/UserUtils/Announcements.tsx","components/UserUtils/Coupons.tsx","components/UserUtils/EditUsers.tsx","components/UserUtils/Maintenance.tsx","components/UserUtils/Utils.tsx","components/Sections/Sections.tsx","components/Sections/AddSection.tsx","components/Sections/EditSection.tsx","routes/Routes.tsx","components/Login.tsx","components/App.tsx","URI.ts","AppWrapper.tsx","index.tsx"],"names":["accessToken","setAccessToken","s","getAccessToken","checkAuth","token","exp","jwtDecode","Date","now","AuthRoute","Component","component","rest","render","props","to","Navbar","className","style","borderBottom","display","justifyContent","id","href","PageWrapper","children","AddAnnouncementDocument","gql","AddApiUserDocument","AddCouponDocument","AddImgToProductDocument","useAddImgToProductMutation","baseOptions","Apollo","AddProductDocument","AddProductToSectionDocument","AddSectionDocument","ApiLoginDocument","DeleteAnnouncementDocument","DeleteApiUserDocument","DeleteCouponDocument","DeleteProductDocument","DeleteSectionDocument","EditTrackingDocument","GetAnnouncementsDocument","GetApiUsersDocument","GetCouponsDocument","GetMaintenanceDocument","GetOrderByIdDocument","GetOrdersDocument","GetProductDocument","GetProductsDocument","GetProductsSectionsDocument","GetSectionByIdDocument","GetSectionsDocument","useGetSectionsQuery","GetSocialsDocument","InitSocialsDocument","RemoveImgFromProductDocument","RemoveProductFromSectionDocument","RemoveWarningDocument","ToggleMaintenanceDocument","ToggleSocialDisplayDocument","UpdateProductDocument","UpdateSectionDocument","UpdateSocialUrlDocument","AddProducts","addProduct","addImgToProduct","useState","name","setName","desc","setDesc","price","setPrice","stock","setStock","image_urls","setImage_urls","refresh","setRefresh","redirect","setRedirect","handleSubmit","a","inputValidation","variables","Number","product_id","i","length","img_url","data","M","toast","html","document","getElementById","classList","remove","addImages","files","form","FormData","append","t","Axios","post","headers","res","tmp","push","secure_url","pathname","state","reload","width","type","value","onChange","e","target","htmlFor","data-error","match","onClick","add","onDrop","getRootProps","getInputProps","map","_val","src","ids","doc","GetProductsSections","window","location","split","pdata","ploading","loading","toggleDisabledClass","idList","toggle","EditProduct","sdata","sloading","GetSections","error","useAddProductToSectionMutation","addProductToSection","useRemoveProductFromSectionMutation","removeProductFromSection","useUpdateProductMutation","updateProduct","useDeleteProductMutation","deleteProduct","useRemoveImgFromProductMutation","deleteImg","image_ids","setImage_ids","sections","setSections","removedSections","setRemovedSections","onChipDeleteCB","_e","console","log","section_name","innerHTML","slice","indexOf","index","j","splice","getProductsSections","section_id","onChipAddCB","getSections","useEffect","Modal","init","querySelectorAll","options","autoCompleteData","initialChips","forEach","tag","autocompleteOptions","onChipAdd","onChipDelete","Chips","product","getProduct","img_id","toFixed","data-target","marginTop","images","margin","PreviewFAB","bottom","right","data-position","data-tooltip","IndexDropdown","socials","indices","ii","minWidth","social_logo","SocialIcon","height","Socials","updateSocialUrl","useToggleSocialDisplayMutation","toggleSocialDisplay","social_url","newSocials","setNewSocials","updatedState","d","url","initSocials","INIT_SOCIALS","EditSocials","sortByProp","arr","prop","invert","sort","reverse","pop","useGetSocialsQuery","FloatingActionButton","Dropdown","Tooltip","getSocials","getOrderId","OrderDetails","useMemo","order_id","useRemoveWarningMutation","removeWarning","setState","elems","message","str","dateOfPurchase","products","Subtotal","sTotal","productSubtotal","quantityOrdered","productsSubtotal","shippingTotal","calcProdSubtotal","getOrderById","amountOff","order_total","discount","date_of_purchase","shipping","JSON","parse","warning","fontWeight","marginLeft","marginBottom","coupon","padding","backgroundColor","borderLeft","paddingTop","paddingBottom","paddingRight","paddingLeft","zIndex","position","color","flexDirection","fontSize","line1","city","postal_code","country","Orders","useEditTrackingMutation","EditTracking","tracking","sortedOrders","getOrders","order","tracking_num","new_tracking_num","editTracking","_val2","Products","useLocation","marginRight","getProducts","maxHeight","Announcements","useAddAnnouncementMutation","ADD_ANNOUNCE","useDeleteAnnouncementMutation","DELETE_ANNOUNCE","text","setText","AutoInit","announcements","getAnnouncements","Coupons","useAddCouponMutation","addCoupon","useDeleteCouponMutation","deleteCoupon","setDiscount","fresh","setFresh","getCoupons","coupon_name","toLowerCase","minLength","maxLength","EditUsers","useDeleteApiUserMutation","deleteApiUser","useAddApiUserMutation","addApiUser","username","setUsername","password","setPassword","getApiUsers","uuid","Maintenance","useToggleMaintenanceMutation","toggleMaintenance","getMaintenance","checked","Divider","Utils","Sections","thumbnail","AddSection","addSection","imgUrl","setImgUrl","addImage","file","alt","EditSection","updateSection","useDeleteSectionMutation","deleteSection","useGetSectionByIdQuery","replaceImage","getSectionById","Routes","exact","path","Login","apiLogin","localStorage","setItem","refreshToken","minHeight","App","URI","AppWrapper","setLoading","getItem","fetch","method","credentials","then","json","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","subscribe","next","bind","complete","catch","unsubscribe","client","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","handleFetch","handleError","err","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM"],"mappings":"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","file":"static/js/main.7784604f.chunk.js","sourcesContent":["export let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n    accessToken = s;\r\n};\r\n\r\nexport const getAccessToken = () => {\r\n    return accessToken;\r\n};\r\n","import { Route, RouteProps, Redirect } from \"react-router-dom\";\r\nimport { getAccessToken } from \"../accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = (): boolean => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token) as any;\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\ninterface IAuthRouteProps extends RouteProps {\r\n    component: any;\r\n}\r\n\r\nconst AuthRoute: React.FC<IAuthRouteProps> = ({\r\n    component: Component,\r\n    ...rest\r\n}) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            checkAuth() ? (\r\n                <Component {...props} />\r\n            ) : (\r\n                <Redirect to=\"/dashboard\" />\r\n            )\r\n        }\r\n    />\r\n);\r\nexport default AuthRoute;\r\n","const Navbar = () => {\r\n    return (\r\n        <div>\r\n            <nav\r\n                className=\"white z-depth-0\"\r\n                style={{ borderBottom: \"1px solid #dfe0e6\" }}\r\n            >\r\n                <div className=\"nav-wrapper\">\r\n                    <div\r\n                        className=\"row\"\r\n                        style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                    >\r\n                        <ul id=\"nav-mobile\" className=\"center \">\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/orders\">\r\n                                    Orders\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/products\">\r\n                                    Products\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/sections\">\r\n                                    Sections\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/utils\">\r\n                                    Utils\r\n                                </a>\r\n                            </li>\r\n\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/edit-socials\">\r\n                                    Edit Socials\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import \"../css/pageWrapper.scss\";\r\nimport Navbar from \"./Navbar\";\r\ninterface Props {\r\n    children?: any;\r\n}\r\n\r\nconst PageWrapper: React.FC<Props> = ({ children }) => {\r\n    return (\r\n        <div className=\"pageWrapper\">\r\n            <Navbar />\r\n            {children ? children : <></>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageWrapper;\r\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getUsersOrders: Array<GetOrdersResponse>;\n  getOrders: Array<GetOrdersResponse>;\n  getOrderById: GetOrdersResponse;\n  getProducts: Array<ProductsWithImages>;\n  getProduct: ProductsWithImages;\n  getApiUsers: Array<ApiUser>;\n  getCurrUser: Users;\n  getCoupons: Array<Coupons>;\n  getAnnouncements: Array<Announcements>;\n  getMaintenance: Scalars['Boolean'];\n  getSocials: Array<Socials>;\n  getSections: Array<Sections>;\n  getSectionById: Sections;\n  getProductsSections: Array<SectionsOrNull>;\n};\n\n\nexport type QueryGetOrderByIdArgs = {\n  order_id: Scalars['Float'];\n};\n\n\nexport type QueryGetProductArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type QueryGetSocialsArgs = {\n  component: Scalars['String'];\n};\n\n\nexport type QueryGetSectionByIdArgs = {\n  section_id: Scalars['Float'];\n};\n\n\nexport type QueryGetProductsSectionsArgs = {\n  product_id: Scalars['Float'];\n};\n\nexport type GetOrdersResponse = {\n  __typename?: 'GetOrdersResponse';\n  products?: Maybe<Array<OrdersProductsWithImages>>;\n  order_id: Scalars['Float'];\n  tracking_num?: Maybe<Scalars['String']>;\n  order_total?: Maybe<Scalars['Float']>;\n  coupon?: Maybe<Scalars['String']>;\n  discount?: Maybe<Scalars['String']>;\n  shipping?: Maybe<Scalars['String']>;\n  warning?: Maybe<Scalars['String']>;\n  date_of_purchase?: Maybe<Scalars['String']>;\n};\n\nexport type OrdersProductsWithImages = {\n  __typename?: 'OrdersProductsWithImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  org_stock?: Maybe<Scalars['Int']>;\n  exp_date?: Maybe<Scalars['String']>;\n  quantityOrdered: Scalars['Float'];\n  productSubtotal?: Maybe<Scalars['Float']>;\n  images?: Maybe<Array<Images>>;\n};\n\nexport type Images = {\n  __typename?: 'Images';\n  img_id: Scalars['Float'];\n  img_url: Scalars['String'];\n  index: Scalars['Float'];\n};\n\nexport type ProductsWithImages = {\n  __typename?: 'ProductsWithImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  org_stock?: Maybe<Scalars['Int']>;\n  exp_date?: Maybe<Scalars['String']>;\n  images?: Maybe<Array<Images>>;\n};\n\nexport type ApiUser = {\n  __typename?: 'ApiUser';\n  uuid: Scalars['Float'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type Users = {\n  __typename?: 'Users';\n  uuid: Scalars['Float'];\n  user_id?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n};\n\nexport type Coupons = {\n  __typename?: 'Coupons';\n  coupon_id: Scalars['String'];\n  coupon_name: Scalars['String'];\n  discount?: Maybe<Scalars['String']>;\n};\n\nexport type Announcements = {\n  __typename?: 'Announcements';\n  id: Scalars['String'];\n  text: Scalars['String'];\n};\n\nexport type Socials = {\n  __typename?: 'Socials';\n  id: Scalars['Int'];\n  index: Scalars['Int'];\n  component: Scalars['String'];\n  display: Scalars['Boolean'];\n  social_logo: Scalars['String'];\n  social_url: Scalars['String'];\n};\n\nexport type Sections = {\n  __typename?: 'Sections';\n  section_id: Scalars['Int'];\n  name: Scalars['String'];\n  thumbnail: Scalars['String'];\n};\n\nexport type SectionsOrNull = {\n  __typename?: 'SectionsOrNull';\n  section_id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  thumbnail?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  editTracking: Scalars['Boolean'];\n  paypalCheckout: Scalars['String'];\n  addPaypalOrder: Scalars['Boolean'];\n  checkout: Scalars['String'];\n  addProduct: Scalars['String'];\n  deleteProduct: Scalars['Boolean'];\n  updateProduct: Scalars['Boolean'];\n  addImgToProduct: Scalars['Boolean'];\n  removeImgFromProduct: Scalars['Boolean'];\n  apiLogin: AuthResponse;\n  deleteApiUser: Scalars['Boolean'];\n  addApiUser: Scalars['Boolean'];\n  removeWarning: Scalars['Boolean'];\n  login: AuthResponse;\n  addCoupon: Scalars['Boolean'];\n  deleteCoupon: Scalars['Boolean'];\n  validateCoupon: Scalars['String'];\n  addAnnouncement: Scalars['Boolean'];\n  deleteAnnouncement: Scalars['Boolean'];\n  toggleMaintenance: Scalars['Boolean'];\n  maintenanceLogin: AuthResponse;\n  updateSocialUrl: Scalars['Boolean'];\n  toggleSocialDisplay: Scalars['Boolean'];\n  initSocials: Scalars['Boolean'];\n  addSection: Scalars['Boolean'];\n  deleteSection: Scalars['Boolean'];\n  addProductToSection: Scalars['String'];\n  removeProductFromSection: Scalars['Boolean'];\n  updateSection: Scalars['Boolean'];\n};\n\n\nexport type MutationEditTrackingArgs = {\n  order_id: Scalars['Float'];\n  new_tracking_num: Scalars['String'];\n};\n\n\nexport type MutationPaypalCheckoutArgs = {\n  coupon: Scalars['String'];\n  products: Scalars['String'];\n};\n\n\nexport type MutationAddPaypalOrderArgs = {\n  purchase_units: Scalars['String'];\n  products: Scalars['String'];\n  coupon: Scalars['String'];\n  user_id: Scalars['String'];\n};\n\n\nexport type MutationCheckoutArgs = {\n  coupon: Scalars['String'];\n  billing_info: Scalars['String'];\n  shipping_info: Scalars['String'];\n  products: Scalars['String'];\n  user_id: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationAddProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationDeleteProductArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationUpdateProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  product_id: Scalars['Float'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddImgToProductArgs = {\n  product_id: Scalars['Float'];\n  img_url: Scalars['String'];\n};\n\n\nexport type MutationRemoveImgFromProductArgs = {\n  img_id: Scalars['Float'];\n};\n\n\nexport type MutationApiLoginArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationDeleteApiUserArgs = {\n  uuid: Scalars['Float'];\n};\n\n\nexport type MutationAddApiUserArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationRemoveWarningArgs = {\n  order_id: Scalars['Float'];\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  user_id: Scalars['String'];\n};\n\n\nexport type MutationAddCouponArgs = {\n  discount: Scalars['String'];\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationDeleteCouponArgs = {\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationValidateCouponArgs = {\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationAddAnnouncementArgs = {\n  text: Scalars['String'];\n};\n\n\nexport type MutationDeleteAnnouncementArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationMaintenanceLoginArgs = {\n  password: Scalars['String'];\n  access_id: Scalars['String'];\n};\n\n\nexport type MutationUpdateSocialUrlArgs = {\n  id: Scalars['Float'];\n  url: Scalars['String'];\n};\n\n\nexport type MutationToggleSocialDisplayArgs = {\n  id: Scalars['Float'];\n};\n\n\nexport type MutationAddSectionArgs = {\n  thumbnail: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationDeleteSectionArgs = {\n  section_id: Scalars['Float'];\n};\n\n\nexport type MutationAddProductToSectionArgs = {\n  section_id: Scalars['Float'];\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationRemoveProductFromSectionArgs = {\n  section_id: Scalars['Float'];\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationUpdateSectionArgs = {\n  section_id: Scalars['Float'];\n  thumbnail: Scalars['String'];\n  name: Scalars['String'];\n};\n\nexport type AuthResponse = {\n  __typename?: 'AuthResponse';\n  accessToken?: Maybe<Scalars['String']>;\n  refreshToken?: Maybe<Scalars['String']>;\n};\n\nexport type AddAnnouncementMutationVariables = Exact<{\n  text: Scalars['String'];\n}>;\n\n\nexport type AddAnnouncementMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addAnnouncement'>\n);\n\nexport type AddApiUserMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type AddApiUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addApiUser'>\n);\n\nexport type AddCouponMutationVariables = Exact<{\n  coupon_name: Scalars['String'];\n  discount: Scalars['String'];\n}>;\n\n\nexport type AddCouponMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addCoupon'>\n);\n\nexport type AddImgToProductMutationVariables = Exact<{\n  img_url: Scalars['String'];\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type AddImgToProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addImgToProduct'>\n);\n\nexport type AddProductMutationVariables = Exact<{\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Float'];\n  stock: Scalars['Float'];\n}>;\n\n\nexport type AddProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProduct'>\n);\n\nexport type AddProductToSectionMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n  section_id: Scalars['Float'];\n}>;\n\n\nexport type AddProductToSectionMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProductToSection'>\n);\n\nexport type AddSectionMutationVariables = Exact<{\n  name: Scalars['String'];\n  thumbnail: Scalars['String'];\n}>;\n\n\nexport type AddSectionMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addSection'>\n);\n\nexport type ApiLoginMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type ApiLoginMutation = (\n  { __typename?: 'Mutation' }\n  & { apiLogin: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type DeleteAnnouncementMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type DeleteAnnouncementMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteAnnouncement'>\n);\n\nexport type DeleteApiUserMutationVariables = Exact<{\n  uuid: Scalars['Float'];\n}>;\n\n\nexport type DeleteApiUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteApiUser'>\n);\n\nexport type DeleteCouponMutationVariables = Exact<{\n  coupon_name: Scalars['String'];\n}>;\n\n\nexport type DeleteCouponMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteCoupon'>\n);\n\nexport type DeleteProductMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type DeleteProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteProduct'>\n);\n\nexport type DeleteSectionMutationVariables = Exact<{\n  section_id: Scalars['Float'];\n}>;\n\n\nexport type DeleteSectionMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteSection'>\n);\n\nexport type EditTrackingMutationVariables = Exact<{\n  new_tracking_num: Scalars['String'];\n  order_id: Scalars['Float'];\n}>;\n\n\nexport type EditTrackingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'editTracking'>\n);\n\nexport type GetAnnouncementsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAnnouncementsQuery = (\n  { __typename?: 'Query' }\n  & { getAnnouncements: Array<(\n    { __typename?: 'Announcements' }\n    & Pick<Announcements, 'id' | 'text'>\n  )> }\n);\n\nexport type GetApiUsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetApiUsersQuery = (\n  { __typename?: 'Query' }\n  & { getApiUsers: Array<(\n    { __typename?: 'ApiUser' }\n    & Pick<ApiUser, 'uuid' | 'username'>\n  )> }\n);\n\nexport type GetCouponsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetCouponsQuery = (\n  { __typename?: 'Query' }\n  & { getCoupons: Array<(\n    { __typename?: 'Coupons' }\n    & Pick<Coupons, 'coupon_name' | 'coupon_id' | 'discount'>\n  )> }\n);\n\nexport type GetMaintenanceQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetMaintenanceQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'getMaintenance'>\n);\n\nexport type GetOrderByIdQueryVariables = Exact<{\n  order_id: Scalars['Float'];\n}>;\n\n\nexport type GetOrderByIdQuery = (\n  { __typename?: 'Query' }\n  & { getOrderById: (\n    { __typename?: 'GetOrdersResponse' }\n    & Pick<GetOrdersResponse, 'order_id' | 'tracking_num' | 'shipping' | 'warning' | 'order_total' | 'coupon' | 'discount' | 'date_of_purchase'>\n    & { products?: Maybe<Array<(\n      { __typename?: 'OrdersProductsWithImages' }\n      & Pick<OrdersProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date' | 'quantityOrdered' | 'productSubtotal'>\n      & { images?: Maybe<Array<(\n        { __typename?: 'Images' }\n        & Pick<Images, 'img_id' | 'img_url' | 'index'>\n      )>> }\n    )>> }\n  ) }\n);\n\nexport type GetOrdersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetOrdersQuery = (\n  { __typename?: 'Query' }\n  & { getOrders: Array<(\n    { __typename?: 'GetOrdersResponse' }\n    & Pick<GetOrdersResponse, 'order_id' | 'tracking_num' | 'order_total' | 'coupon' | 'discount' | 'shipping' | 'warning' | 'date_of_purchase'>\n    & { products?: Maybe<Array<(\n      { __typename?: 'OrdersProductsWithImages' }\n      & Pick<OrdersProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date' | 'quantityOrdered' | 'productSubtotal'>\n      & { images?: Maybe<Array<(\n        { __typename?: 'Images' }\n        & Pick<Images, 'img_id' | 'img_url' | 'index'>\n      )>> }\n    )>> }\n  )> }\n);\n\nexport type GetProductQueryVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type GetProductQuery = (\n  { __typename?: 'Query' }\n  & { getProduct: (\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  ) }\n);\n\nexport type GetProductsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProductsQuery = (\n  { __typename?: 'Query' }\n  & { getProducts: Array<(\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  )> }\n);\n\nexport type GetProductsSectionsQueryVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type GetProductsSectionsQuery = (\n  { __typename?: 'Query' }\n  & { getProductsSections: Array<(\n    { __typename?: 'SectionsOrNull' }\n    & Pick<SectionsOrNull, 'section_id' | 'name' | 'thumbnail'>\n  )> }\n);\n\nexport type GetSectionByIdQueryVariables = Exact<{\n  section_id: Scalars['Float'];\n}>;\n\n\nexport type GetSectionByIdQuery = (\n  { __typename?: 'Query' }\n  & { getSectionById: (\n    { __typename?: 'Sections' }\n    & Pick<Sections, 'section_id' | 'thumbnail' | 'name'>\n  ) }\n);\n\nexport type GetSectionsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetSectionsQuery = (\n  { __typename?: 'Query' }\n  & { getSections: Array<(\n    { __typename?: 'Sections' }\n    & Pick<Sections, 'section_id' | 'name' | 'thumbnail'>\n  )> }\n);\n\nexport type GetSocialsQueryVariables = Exact<{\n  component: Scalars['String'];\n}>;\n\n\nexport type GetSocialsQuery = (\n  { __typename?: 'Query' }\n  & { getSocials: Array<(\n    { __typename?: 'Socials' }\n    & Pick<Socials, 'id' | 'index' | 'social_url' | 'social_logo' | 'display'>\n  )> }\n);\n\nexport type InitSocialsMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type InitSocialsMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'initSocials'>\n);\n\nexport type RemoveImgFromProductMutationVariables = Exact<{\n  img_id: Scalars['Float'];\n}>;\n\n\nexport type RemoveImgFromProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeImgFromProduct'>\n);\n\nexport type RemoveProductFromSectionMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n  section_id: Scalars['Float'];\n}>;\n\n\nexport type RemoveProductFromSectionMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeProductFromSection'>\n);\n\nexport type RemoveWarningMutationVariables = Exact<{\n  order_id: Scalars['Float'];\n}>;\n\n\nexport type RemoveWarningMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeWarning'>\n);\n\nexport type ToggleMaintenanceMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ToggleMaintenanceMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'toggleMaintenance'>\n);\n\nexport type ToggleSocialDisplayMutationVariables = Exact<{\n  id: Scalars['Float'];\n}>;\n\n\nexport type ToggleSocialDisplayMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'toggleSocialDisplay'>\n);\n\nexport type UpdateProductMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Float'];\n  stock: Scalars['Float'];\n}>;\n\n\nexport type UpdateProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateProduct'>\n);\n\nexport type UpdateSectionMutationVariables = Exact<{\n  name: Scalars['String'];\n  thumbnail: Scalars['String'];\n  section_id: Scalars['Float'];\n}>;\n\n\nexport type UpdateSectionMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateSection'>\n);\n\nexport type UpdateSocialUrlMutationVariables = Exact<{\n  url: Scalars['String'];\n  id: Scalars['Float'];\n}>;\n\n\nexport type UpdateSocialUrlMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateSocialUrl'>\n);\n\n\nexport const AddAnnouncementDocument = gql`\n    mutation addAnnouncement($text: String!) {\n  addAnnouncement(text: $text)\n}\n    `;\nexport type AddAnnouncementMutationFn = Apollo.MutationFunction<AddAnnouncementMutation, AddAnnouncementMutationVariables>;\n\n/**\n * __useAddAnnouncementMutation__\n *\n * To run a mutation, you first call `useAddAnnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddAnnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addAnnouncementMutation, { data, loading, error }] = useAddAnnouncementMutation({\n *   variables: {\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useAddAnnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AddAnnouncementMutation, AddAnnouncementMutationVariables>) {\n        return Apollo.useMutation<AddAnnouncementMutation, AddAnnouncementMutationVariables>(AddAnnouncementDocument, baseOptions);\n      }\nexport type AddAnnouncementMutationHookResult = ReturnType<typeof useAddAnnouncementMutation>;\nexport type AddAnnouncementMutationResult = Apollo.MutationResult<AddAnnouncementMutation>;\nexport type AddAnnouncementMutationOptions = Apollo.BaseMutationOptions<AddAnnouncementMutation, AddAnnouncementMutationVariables>;\nexport const AddApiUserDocument = gql`\n    mutation addApiUser($username: String!, $password: String!) {\n  addApiUser(username: $username, password: $password)\n}\n    `;\nexport type AddApiUserMutationFn = Apollo.MutationFunction<AddApiUserMutation, AddApiUserMutationVariables>;\n\n/**\n * __useAddApiUserMutation__\n *\n * To run a mutation, you first call `useAddApiUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddApiUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addApiUserMutation, { data, loading, error }] = useAddApiUserMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useAddApiUserMutation(baseOptions?: Apollo.MutationHookOptions<AddApiUserMutation, AddApiUserMutationVariables>) {\n        return Apollo.useMutation<AddApiUserMutation, AddApiUserMutationVariables>(AddApiUserDocument, baseOptions);\n      }\nexport type AddApiUserMutationHookResult = ReturnType<typeof useAddApiUserMutation>;\nexport type AddApiUserMutationResult = Apollo.MutationResult<AddApiUserMutation>;\nexport type AddApiUserMutationOptions = Apollo.BaseMutationOptions<AddApiUserMutation, AddApiUserMutationVariables>;\nexport const AddCouponDocument = gql`\n    mutation addCoupon($coupon_name: String!, $discount: String!) {\n  addCoupon(coupon_name: $coupon_name, discount: $discount)\n}\n    `;\nexport type AddCouponMutationFn = Apollo.MutationFunction<AddCouponMutation, AddCouponMutationVariables>;\n\n/**\n * __useAddCouponMutation__\n *\n * To run a mutation, you first call `useAddCouponMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCouponMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCouponMutation, { data, loading, error }] = useAddCouponMutation({\n *   variables: {\n *      coupon_name: // value for 'coupon_name'\n *      discount: // value for 'discount'\n *   },\n * });\n */\nexport function useAddCouponMutation(baseOptions?: Apollo.MutationHookOptions<AddCouponMutation, AddCouponMutationVariables>) {\n        return Apollo.useMutation<AddCouponMutation, AddCouponMutationVariables>(AddCouponDocument, baseOptions);\n      }\nexport type AddCouponMutationHookResult = ReturnType<typeof useAddCouponMutation>;\nexport type AddCouponMutationResult = Apollo.MutationResult<AddCouponMutation>;\nexport type AddCouponMutationOptions = Apollo.BaseMutationOptions<AddCouponMutation, AddCouponMutationVariables>;\nexport const AddImgToProductDocument = gql`\n    mutation addImgToProduct($img_url: String!, $product_id: Float!) {\n  addImgToProduct(img_url: $img_url, product_id: $product_id)\n}\n    `;\nexport type AddImgToProductMutationFn = Apollo.MutationFunction<AddImgToProductMutation, AddImgToProductMutationVariables>;\n\n/**\n * __useAddImgToProductMutation__\n *\n * To run a mutation, you first call `useAddImgToProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddImgToProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addImgToProductMutation, { data, loading, error }] = useAddImgToProductMutation({\n *   variables: {\n *      img_url: // value for 'img_url'\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useAddImgToProductMutation(baseOptions?: Apollo.MutationHookOptions<AddImgToProductMutation, AddImgToProductMutationVariables>) {\n        return Apollo.useMutation<AddImgToProductMutation, AddImgToProductMutationVariables>(AddImgToProductDocument, baseOptions);\n      }\nexport type AddImgToProductMutationHookResult = ReturnType<typeof useAddImgToProductMutation>;\nexport type AddImgToProductMutationResult = Apollo.MutationResult<AddImgToProductMutation>;\nexport type AddImgToProductMutationOptions = Apollo.BaseMutationOptions<AddImgToProductMutation, AddImgToProductMutationVariables>;\nexport const AddProductDocument = gql`\n    mutation addProduct($name: String!, $desc: String!, $price: Float!, $stock: Float!) {\n  addProduct(name: $name, desc: $desc, price: $price, stock: $stock)\n}\n    `;\nexport type AddProductMutationFn = Apollo.MutationFunction<AddProductMutation, AddProductMutationVariables>;\n\n/**\n * __useAddProductMutation__\n *\n * To run a mutation, you first call `useAddProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProductMutation, { data, loading, error }] = useAddProductMutation({\n *   variables: {\n *      name: // value for 'name'\n *      desc: // value for 'desc'\n *      price: // value for 'price'\n *      stock: // value for 'stock'\n *   },\n * });\n */\nexport function useAddProductMutation(baseOptions?: Apollo.MutationHookOptions<AddProductMutation, AddProductMutationVariables>) {\n        return Apollo.useMutation<AddProductMutation, AddProductMutationVariables>(AddProductDocument, baseOptions);\n      }\nexport type AddProductMutationHookResult = ReturnType<typeof useAddProductMutation>;\nexport type AddProductMutationResult = Apollo.MutationResult<AddProductMutation>;\nexport type AddProductMutationOptions = Apollo.BaseMutationOptions<AddProductMutation, AddProductMutationVariables>;\nexport const AddProductToSectionDocument = gql`\n    mutation addProductToSection($product_id: Float!, $section_id: Float!) {\n  addProductToSection(product_id: $product_id, section_id: $section_id)\n}\n    `;\nexport type AddProductToSectionMutationFn = Apollo.MutationFunction<AddProductToSectionMutation, AddProductToSectionMutationVariables>;\n\n/**\n * __useAddProductToSectionMutation__\n *\n * To run a mutation, you first call `useAddProductToSectionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProductToSectionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProductToSectionMutation, { data, loading, error }] = useAddProductToSectionMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *      section_id: // value for 'section_id'\n *   },\n * });\n */\nexport function useAddProductToSectionMutation(baseOptions?: Apollo.MutationHookOptions<AddProductToSectionMutation, AddProductToSectionMutationVariables>) {\n        return Apollo.useMutation<AddProductToSectionMutation, AddProductToSectionMutationVariables>(AddProductToSectionDocument, baseOptions);\n      }\nexport type AddProductToSectionMutationHookResult = ReturnType<typeof useAddProductToSectionMutation>;\nexport type AddProductToSectionMutationResult = Apollo.MutationResult<AddProductToSectionMutation>;\nexport type AddProductToSectionMutationOptions = Apollo.BaseMutationOptions<AddProductToSectionMutation, AddProductToSectionMutationVariables>;\nexport const AddSectionDocument = gql`\n    mutation addSection($name: String!, $thumbnail: String!) {\n  addSection(name: $name, thumbnail: $thumbnail)\n}\n    `;\nexport type AddSectionMutationFn = Apollo.MutationFunction<AddSectionMutation, AddSectionMutationVariables>;\n\n/**\n * __useAddSectionMutation__\n *\n * To run a mutation, you first call `useAddSectionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddSectionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addSectionMutation, { data, loading, error }] = useAddSectionMutation({\n *   variables: {\n *      name: // value for 'name'\n *      thumbnail: // value for 'thumbnail'\n *   },\n * });\n */\nexport function useAddSectionMutation(baseOptions?: Apollo.MutationHookOptions<AddSectionMutation, AddSectionMutationVariables>) {\n        return Apollo.useMutation<AddSectionMutation, AddSectionMutationVariables>(AddSectionDocument, baseOptions);\n      }\nexport type AddSectionMutationHookResult = ReturnType<typeof useAddSectionMutation>;\nexport type AddSectionMutationResult = Apollo.MutationResult<AddSectionMutation>;\nexport type AddSectionMutationOptions = Apollo.BaseMutationOptions<AddSectionMutation, AddSectionMutationVariables>;\nexport const ApiLoginDocument = gql`\n    mutation apiLogin($username: String!, $password: String!) {\n  apiLogin(username: $username, password: $password) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type ApiLoginMutationFn = Apollo.MutationFunction<ApiLoginMutation, ApiLoginMutationVariables>;\n\n/**\n * __useApiLoginMutation__\n *\n * To run a mutation, you first call `useApiLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useApiLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [apiLoginMutation, { data, loading, error }] = useApiLoginMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useApiLoginMutation(baseOptions?: Apollo.MutationHookOptions<ApiLoginMutation, ApiLoginMutationVariables>) {\n        return Apollo.useMutation<ApiLoginMutation, ApiLoginMutationVariables>(ApiLoginDocument, baseOptions);\n      }\nexport type ApiLoginMutationHookResult = ReturnType<typeof useApiLoginMutation>;\nexport type ApiLoginMutationResult = Apollo.MutationResult<ApiLoginMutation>;\nexport type ApiLoginMutationOptions = Apollo.BaseMutationOptions<ApiLoginMutation, ApiLoginMutationVariables>;\nexport const DeleteAnnouncementDocument = gql`\n    mutation deleteAnnouncement($id: String!) {\n  deleteAnnouncement(id: $id)\n}\n    `;\nexport type DeleteAnnouncementMutationFn = Apollo.MutationFunction<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>;\n\n/**\n * __useDeleteAnnouncementMutation__\n *\n * To run a mutation, you first call `useDeleteAnnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteAnnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteAnnouncementMutation, { data, loading, error }] = useDeleteAnnouncementMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteAnnouncementMutation(baseOptions?: Apollo.MutationHookOptions<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>) {\n        return Apollo.useMutation<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>(DeleteAnnouncementDocument, baseOptions);\n      }\nexport type DeleteAnnouncementMutationHookResult = ReturnType<typeof useDeleteAnnouncementMutation>;\nexport type DeleteAnnouncementMutationResult = Apollo.MutationResult<DeleteAnnouncementMutation>;\nexport type DeleteAnnouncementMutationOptions = Apollo.BaseMutationOptions<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>;\nexport const DeleteApiUserDocument = gql`\n    mutation deleteApiUser($uuid: Float!) {\n  deleteApiUser(uuid: $uuid)\n}\n    `;\nexport type DeleteApiUserMutationFn = Apollo.MutationFunction<DeleteApiUserMutation, DeleteApiUserMutationVariables>;\n\n/**\n * __useDeleteApiUserMutation__\n *\n * To run a mutation, you first call `useDeleteApiUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteApiUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteApiUserMutation, { data, loading, error }] = useDeleteApiUserMutation({\n *   variables: {\n *      uuid: // value for 'uuid'\n *   },\n * });\n */\nexport function useDeleteApiUserMutation(baseOptions?: Apollo.MutationHookOptions<DeleteApiUserMutation, DeleteApiUserMutationVariables>) {\n        return Apollo.useMutation<DeleteApiUserMutation, DeleteApiUserMutationVariables>(DeleteApiUserDocument, baseOptions);\n      }\nexport type DeleteApiUserMutationHookResult = ReturnType<typeof useDeleteApiUserMutation>;\nexport type DeleteApiUserMutationResult = Apollo.MutationResult<DeleteApiUserMutation>;\nexport type DeleteApiUserMutationOptions = Apollo.BaseMutationOptions<DeleteApiUserMutation, DeleteApiUserMutationVariables>;\nexport const DeleteCouponDocument = gql`\n    mutation deleteCoupon($coupon_name: String!) {\n  deleteCoupon(coupon_name: $coupon_name)\n}\n    `;\nexport type DeleteCouponMutationFn = Apollo.MutationFunction<DeleteCouponMutation, DeleteCouponMutationVariables>;\n\n/**\n * __useDeleteCouponMutation__\n *\n * To run a mutation, you first call `useDeleteCouponMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCouponMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCouponMutation, { data, loading, error }] = useDeleteCouponMutation({\n *   variables: {\n *      coupon_name: // value for 'coupon_name'\n *   },\n * });\n */\nexport function useDeleteCouponMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCouponMutation, DeleteCouponMutationVariables>) {\n        return Apollo.useMutation<DeleteCouponMutation, DeleteCouponMutationVariables>(DeleteCouponDocument, baseOptions);\n      }\nexport type DeleteCouponMutationHookResult = ReturnType<typeof useDeleteCouponMutation>;\nexport type DeleteCouponMutationResult = Apollo.MutationResult<DeleteCouponMutation>;\nexport type DeleteCouponMutationOptions = Apollo.BaseMutationOptions<DeleteCouponMutation, DeleteCouponMutationVariables>;\nexport const DeleteProductDocument = gql`\n    mutation deleteProduct($product_id: Float!) {\n  deleteProduct(product_id: $product_id)\n}\n    `;\nexport type DeleteProductMutationFn = Apollo.MutationFunction<DeleteProductMutation, DeleteProductMutationVariables>;\n\n/**\n * __useDeleteProductMutation__\n *\n * To run a mutation, you first call `useDeleteProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProductMutation, { data, loading, error }] = useDeleteProductMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useDeleteProductMutation(baseOptions?: Apollo.MutationHookOptions<DeleteProductMutation, DeleteProductMutationVariables>) {\n        return Apollo.useMutation<DeleteProductMutation, DeleteProductMutationVariables>(DeleteProductDocument, baseOptions);\n      }\nexport type DeleteProductMutationHookResult = ReturnType<typeof useDeleteProductMutation>;\nexport type DeleteProductMutationResult = Apollo.MutationResult<DeleteProductMutation>;\nexport type DeleteProductMutationOptions = Apollo.BaseMutationOptions<DeleteProductMutation, DeleteProductMutationVariables>;\nexport const DeleteSectionDocument = gql`\n    mutation deleteSection($section_id: Float!) {\n  deleteSection(section_id: $section_id)\n}\n    `;\nexport type DeleteSectionMutationFn = Apollo.MutationFunction<DeleteSectionMutation, DeleteSectionMutationVariables>;\n\n/**\n * __useDeleteSectionMutation__\n *\n * To run a mutation, you first call `useDeleteSectionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteSectionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteSectionMutation, { data, loading, error }] = useDeleteSectionMutation({\n *   variables: {\n *      section_id: // value for 'section_id'\n *   },\n * });\n */\nexport function useDeleteSectionMutation(baseOptions?: Apollo.MutationHookOptions<DeleteSectionMutation, DeleteSectionMutationVariables>) {\n        return Apollo.useMutation<DeleteSectionMutation, DeleteSectionMutationVariables>(DeleteSectionDocument, baseOptions);\n      }\nexport type DeleteSectionMutationHookResult = ReturnType<typeof useDeleteSectionMutation>;\nexport type DeleteSectionMutationResult = Apollo.MutationResult<DeleteSectionMutation>;\nexport type DeleteSectionMutationOptions = Apollo.BaseMutationOptions<DeleteSectionMutation, DeleteSectionMutationVariables>;\nexport const EditTrackingDocument = gql`\n    mutation editTracking($new_tracking_num: String!, $order_id: Float!) {\n  editTracking(new_tracking_num: $new_tracking_num, order_id: $order_id)\n}\n    `;\nexport type EditTrackingMutationFn = Apollo.MutationFunction<EditTrackingMutation, EditTrackingMutationVariables>;\n\n/**\n * __useEditTrackingMutation__\n *\n * To run a mutation, you first call `useEditTrackingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditTrackingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editTrackingMutation, { data, loading, error }] = useEditTrackingMutation({\n *   variables: {\n *      new_tracking_num: // value for 'new_tracking_num'\n *      order_id: // value for 'order_id'\n *   },\n * });\n */\nexport function useEditTrackingMutation(baseOptions?: Apollo.MutationHookOptions<EditTrackingMutation, EditTrackingMutationVariables>) {\n        return Apollo.useMutation<EditTrackingMutation, EditTrackingMutationVariables>(EditTrackingDocument, baseOptions);\n      }\nexport type EditTrackingMutationHookResult = ReturnType<typeof useEditTrackingMutation>;\nexport type EditTrackingMutationResult = Apollo.MutationResult<EditTrackingMutation>;\nexport type EditTrackingMutationOptions = Apollo.BaseMutationOptions<EditTrackingMutation, EditTrackingMutationVariables>;\nexport const GetAnnouncementsDocument = gql`\n    query getAnnouncements {\n  getAnnouncements {\n    id\n    text\n  }\n}\n    `;\n\n/**\n * __useGetAnnouncementsQuery__\n *\n * To run a query within a React component, call `useGetAnnouncementsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAnnouncementsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAnnouncementsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAnnouncementsQuery(baseOptions?: Apollo.QueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n        return Apollo.useQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n      }\nexport function useGetAnnouncementsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n          return Apollo.useLazyQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n        }\nexport type GetAnnouncementsQueryHookResult = ReturnType<typeof useGetAnnouncementsQuery>;\nexport type GetAnnouncementsLazyQueryHookResult = ReturnType<typeof useGetAnnouncementsLazyQuery>;\nexport type GetAnnouncementsQueryResult = Apollo.QueryResult<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>;\nexport const GetApiUsersDocument = gql`\n    query getApiUsers {\n  getApiUsers {\n    uuid\n    username\n  }\n}\n    `;\n\n/**\n * __useGetApiUsersQuery__\n *\n * To run a query within a React component, call `useGetApiUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetApiUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetApiUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetApiUsersQuery(baseOptions?: Apollo.QueryHookOptions<GetApiUsersQuery, GetApiUsersQueryVariables>) {\n        return Apollo.useQuery<GetApiUsersQuery, GetApiUsersQueryVariables>(GetApiUsersDocument, baseOptions);\n      }\nexport function useGetApiUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetApiUsersQuery, GetApiUsersQueryVariables>) {\n          return Apollo.useLazyQuery<GetApiUsersQuery, GetApiUsersQueryVariables>(GetApiUsersDocument, baseOptions);\n        }\nexport type GetApiUsersQueryHookResult = ReturnType<typeof useGetApiUsersQuery>;\nexport type GetApiUsersLazyQueryHookResult = ReturnType<typeof useGetApiUsersLazyQuery>;\nexport type GetApiUsersQueryResult = Apollo.QueryResult<GetApiUsersQuery, GetApiUsersQueryVariables>;\nexport const GetCouponsDocument = gql`\n    query getCoupons {\n  getCoupons {\n    coupon_name\n    coupon_id\n    discount\n  }\n}\n    `;\n\n/**\n * __useGetCouponsQuery__\n *\n * To run a query within a React component, call `useGetCouponsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCouponsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCouponsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCouponsQuery(baseOptions?: Apollo.QueryHookOptions<GetCouponsQuery, GetCouponsQueryVariables>) {\n        return Apollo.useQuery<GetCouponsQuery, GetCouponsQueryVariables>(GetCouponsDocument, baseOptions);\n      }\nexport function useGetCouponsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCouponsQuery, GetCouponsQueryVariables>) {\n          return Apollo.useLazyQuery<GetCouponsQuery, GetCouponsQueryVariables>(GetCouponsDocument, baseOptions);\n        }\nexport type GetCouponsQueryHookResult = ReturnType<typeof useGetCouponsQuery>;\nexport type GetCouponsLazyQueryHookResult = ReturnType<typeof useGetCouponsLazyQuery>;\nexport type GetCouponsQueryResult = Apollo.QueryResult<GetCouponsQuery, GetCouponsQueryVariables>;\nexport const GetMaintenanceDocument = gql`\n    query getMaintenance {\n  getMaintenance\n}\n    `;\n\n/**\n * __useGetMaintenanceQuery__\n *\n * To run a query within a React component, call `useGetMaintenanceQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMaintenanceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMaintenanceQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMaintenanceQuery(baseOptions?: Apollo.QueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\n        return Apollo.useQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\n      }\nexport function useGetMaintenanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\n          return Apollo.useLazyQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\n        }\nexport type GetMaintenanceQueryHookResult = ReturnType<typeof useGetMaintenanceQuery>;\nexport type GetMaintenanceLazyQueryHookResult = ReturnType<typeof useGetMaintenanceLazyQuery>;\nexport type GetMaintenanceQueryResult = Apollo.QueryResult<GetMaintenanceQuery, GetMaintenanceQueryVariables>;\nexport const GetOrderByIdDocument = gql`\n    query getOrderById($order_id: Float!) {\n  getOrderById(order_id: $order_id) {\n    products {\n      product_id\n      name\n      desc\n      price\n      stock\n      exp_date\n      quantityOrdered\n      productSubtotal\n      images {\n        img_id\n        img_url\n        index\n      }\n    }\n    order_id\n    tracking_num\n    shipping\n    warning\n    order_total\n    coupon\n    discount\n    date_of_purchase\n  }\n}\n    `;\n\n/**\n * __useGetOrderByIdQuery__\n *\n * To run a query within a React component, call `useGetOrderByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOrderByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOrderByIdQuery({\n *   variables: {\n *      order_id: // value for 'order_id'\n *   },\n * });\n */\nexport function useGetOrderByIdQuery(baseOptions: Apollo.QueryHookOptions<GetOrderByIdQuery, GetOrderByIdQueryVariables>) {\n        return Apollo.useQuery<GetOrderByIdQuery, GetOrderByIdQueryVariables>(GetOrderByIdDocument, baseOptions);\n      }\nexport function useGetOrderByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrderByIdQuery, GetOrderByIdQueryVariables>) {\n          return Apollo.useLazyQuery<GetOrderByIdQuery, GetOrderByIdQueryVariables>(GetOrderByIdDocument, baseOptions);\n        }\nexport type GetOrderByIdQueryHookResult = ReturnType<typeof useGetOrderByIdQuery>;\nexport type GetOrderByIdLazyQueryHookResult = ReturnType<typeof useGetOrderByIdLazyQuery>;\nexport type GetOrderByIdQueryResult = Apollo.QueryResult<GetOrderByIdQuery, GetOrderByIdQueryVariables>;\nexport const GetOrdersDocument = gql`\n    query getOrders {\n  getOrders {\n    products {\n      product_id\n      name\n      desc\n      price\n      stock\n      exp_date\n      quantityOrdered\n      productSubtotal\n      images {\n        img_id\n        img_url\n        index\n      }\n    }\n    order_id\n    tracking_num\n    order_total\n    coupon\n    discount\n    shipping\n    warning\n    date_of_purchase\n  }\n}\n    `;\n\n/**\n * __useGetOrdersQuery__\n *\n * To run a query within a React component, call `useGetOrdersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOrdersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetOrdersQuery(baseOptions?: Apollo.QueryHookOptions<GetOrdersQuery, GetOrdersQueryVariables>) {\n        return Apollo.useQuery<GetOrdersQuery, GetOrdersQueryVariables>(GetOrdersDocument, baseOptions);\n      }\nexport function useGetOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrdersQuery, GetOrdersQueryVariables>) {\n          return Apollo.useLazyQuery<GetOrdersQuery, GetOrdersQueryVariables>(GetOrdersDocument, baseOptions);\n        }\nexport type GetOrdersQueryHookResult = ReturnType<typeof useGetOrdersQuery>;\nexport type GetOrdersLazyQueryHookResult = ReturnType<typeof useGetOrdersLazyQuery>;\nexport type GetOrdersQueryResult = Apollo.QueryResult<GetOrdersQuery, GetOrdersQueryVariables>;\nexport const GetProductDocument = gql`\n    query getProduct($product_id: Float!) {\n  getProduct(product_id: $product_id) {\n    product_id\n    name\n    desc\n    price\n    stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductQuery__\n *\n * To run a query within a React component, call `useGetProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductQuery({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useGetProductQuery(baseOptions: Apollo.QueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n        return Apollo.useQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n      }\nexport function useGetProductLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n        }\nexport type GetProductQueryHookResult = ReturnType<typeof useGetProductQuery>;\nexport type GetProductLazyQueryHookResult = ReturnType<typeof useGetProductLazyQuery>;\nexport type GetProductQueryResult = Apollo.QueryResult<GetProductQuery, GetProductQueryVariables>;\nexport const GetProductsDocument = gql`\n    query getProducts {\n  getProducts {\n    product_id\n    name\n    desc\n    price\n    stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductsQuery__\n *\n * To run a query within a React component, call `useGetProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetProductsQuery(baseOptions?: Apollo.QueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\n        return Apollo.useQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\n      }\nexport function useGetProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\n        }\nexport type GetProductsQueryHookResult = ReturnType<typeof useGetProductsQuery>;\nexport type GetProductsLazyQueryHookResult = ReturnType<typeof useGetProductsLazyQuery>;\nexport type GetProductsQueryResult = Apollo.QueryResult<GetProductsQuery, GetProductsQueryVariables>;\nexport const GetProductsSectionsDocument = gql`\n    query getProductsSections($product_id: Float!) {\n  getProductsSections(product_id: $product_id) {\n    section_id\n    name\n    thumbnail\n  }\n}\n    `;\n\n/**\n * __useGetProductsSectionsQuery__\n *\n * To run a query within a React component, call `useGetProductsSectionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductsSectionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductsSectionsQuery({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useGetProductsSectionsQuery(baseOptions: Apollo.QueryHookOptions<GetProductsSectionsQuery, GetProductsSectionsQueryVariables>) {\n        return Apollo.useQuery<GetProductsSectionsQuery, GetProductsSectionsQueryVariables>(GetProductsSectionsDocument, baseOptions);\n      }\nexport function useGetProductsSectionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsSectionsQuery, GetProductsSectionsQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductsSectionsQuery, GetProductsSectionsQueryVariables>(GetProductsSectionsDocument, baseOptions);\n        }\nexport type GetProductsSectionsQueryHookResult = ReturnType<typeof useGetProductsSectionsQuery>;\nexport type GetProductsSectionsLazyQueryHookResult = ReturnType<typeof useGetProductsSectionsLazyQuery>;\nexport type GetProductsSectionsQueryResult = Apollo.QueryResult<GetProductsSectionsQuery, GetProductsSectionsQueryVariables>;\nexport const GetSectionByIdDocument = gql`\n    query getSectionById($section_id: Float!) {\n  getSectionById(section_id: $section_id) {\n    section_id\n    thumbnail\n    name\n  }\n}\n    `;\n\n/**\n * __useGetSectionByIdQuery__\n *\n * To run a query within a React component, call `useGetSectionByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSectionByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSectionByIdQuery({\n *   variables: {\n *      section_id: // value for 'section_id'\n *   },\n * });\n */\nexport function useGetSectionByIdQuery(baseOptions: Apollo.QueryHookOptions<GetSectionByIdQuery, GetSectionByIdQueryVariables>) {\n        return Apollo.useQuery<GetSectionByIdQuery, GetSectionByIdQueryVariables>(GetSectionByIdDocument, baseOptions);\n      }\nexport function useGetSectionByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSectionByIdQuery, GetSectionByIdQueryVariables>) {\n          return Apollo.useLazyQuery<GetSectionByIdQuery, GetSectionByIdQueryVariables>(GetSectionByIdDocument, baseOptions);\n        }\nexport type GetSectionByIdQueryHookResult = ReturnType<typeof useGetSectionByIdQuery>;\nexport type GetSectionByIdLazyQueryHookResult = ReturnType<typeof useGetSectionByIdLazyQuery>;\nexport type GetSectionByIdQueryResult = Apollo.QueryResult<GetSectionByIdQuery, GetSectionByIdQueryVariables>;\nexport const GetSectionsDocument = gql`\n    query getSections {\n  getSections {\n    section_id\n    name\n    thumbnail\n  }\n}\n    `;\n\n/**\n * __useGetSectionsQuery__\n *\n * To run a query within a React component, call `useGetSectionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSectionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSectionsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetSectionsQuery(baseOptions?: Apollo.QueryHookOptions<GetSectionsQuery, GetSectionsQueryVariables>) {\n        return Apollo.useQuery<GetSectionsQuery, GetSectionsQueryVariables>(GetSectionsDocument, baseOptions);\n      }\nexport function useGetSectionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSectionsQuery, GetSectionsQueryVariables>) {\n          return Apollo.useLazyQuery<GetSectionsQuery, GetSectionsQueryVariables>(GetSectionsDocument, baseOptions);\n        }\nexport type GetSectionsQueryHookResult = ReturnType<typeof useGetSectionsQuery>;\nexport type GetSectionsLazyQueryHookResult = ReturnType<typeof useGetSectionsLazyQuery>;\nexport type GetSectionsQueryResult = Apollo.QueryResult<GetSectionsQuery, GetSectionsQueryVariables>;\nexport const GetSocialsDocument = gql`\n    query getSocials($component: String!) {\n  getSocials(component: $component) {\n    id\n    index\n    social_url\n    social_logo\n    display\n  }\n}\n    `;\n\n/**\n * __useGetSocialsQuery__\n *\n * To run a query within a React component, call `useGetSocialsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSocialsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSocialsQuery({\n *   variables: {\n *      component: // value for 'component'\n *   },\n * });\n */\nexport function useGetSocialsQuery(baseOptions: Apollo.QueryHookOptions<GetSocialsQuery, GetSocialsQueryVariables>) {\n        return Apollo.useQuery<GetSocialsQuery, GetSocialsQueryVariables>(GetSocialsDocument, baseOptions);\n      }\nexport function useGetSocialsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSocialsQuery, GetSocialsQueryVariables>) {\n          return Apollo.useLazyQuery<GetSocialsQuery, GetSocialsQueryVariables>(GetSocialsDocument, baseOptions);\n        }\nexport type GetSocialsQueryHookResult = ReturnType<typeof useGetSocialsQuery>;\nexport type GetSocialsLazyQueryHookResult = ReturnType<typeof useGetSocialsLazyQuery>;\nexport type GetSocialsQueryResult = Apollo.QueryResult<GetSocialsQuery, GetSocialsQueryVariables>;\nexport const InitSocialsDocument = gql`\n    mutation initSocials {\n  initSocials\n}\n    `;\nexport type InitSocialsMutationFn = Apollo.MutationFunction<InitSocialsMutation, InitSocialsMutationVariables>;\n\n/**\n * __useInitSocialsMutation__\n *\n * To run a mutation, you first call `useInitSocialsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInitSocialsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [initSocialsMutation, { data, loading, error }] = useInitSocialsMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useInitSocialsMutation(baseOptions?: Apollo.MutationHookOptions<InitSocialsMutation, InitSocialsMutationVariables>) {\n        return Apollo.useMutation<InitSocialsMutation, InitSocialsMutationVariables>(InitSocialsDocument, baseOptions);\n      }\nexport type InitSocialsMutationHookResult = ReturnType<typeof useInitSocialsMutation>;\nexport type InitSocialsMutationResult = Apollo.MutationResult<InitSocialsMutation>;\nexport type InitSocialsMutationOptions = Apollo.BaseMutationOptions<InitSocialsMutation, InitSocialsMutationVariables>;\nexport const RemoveImgFromProductDocument = gql`\n    mutation removeImgFromProduct($img_id: Float!) {\n  removeImgFromProduct(img_id: $img_id)\n}\n    `;\nexport type RemoveImgFromProductMutationFn = Apollo.MutationFunction<RemoveImgFromProductMutation, RemoveImgFromProductMutationVariables>;\n\n/**\n * __useRemoveImgFromProductMutation__\n *\n * To run a mutation, you first call `useRemoveImgFromProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveImgFromProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeImgFromProductMutation, { data, loading, error }] = useRemoveImgFromProductMutation({\n *   variables: {\n *      img_id: // value for 'img_id'\n *   },\n * });\n */\nexport function useRemoveImgFromProductMutation(baseOptions?: Apollo.MutationHookOptions<RemoveImgFromProductMutation, RemoveImgFromProductMutationVariables>) {\n        return Apollo.useMutation<RemoveImgFromProductMutation, RemoveImgFromProductMutationVariables>(RemoveImgFromProductDocument, baseOptions);\n      }\nexport type RemoveImgFromProductMutationHookResult = ReturnType<typeof useRemoveImgFromProductMutation>;\nexport type RemoveImgFromProductMutationResult = Apollo.MutationResult<RemoveImgFromProductMutation>;\nexport type RemoveImgFromProductMutationOptions = Apollo.BaseMutationOptions<RemoveImgFromProductMutation, RemoveImgFromProductMutationVariables>;\nexport const RemoveProductFromSectionDocument = gql`\n    mutation removeProductFromSection($product_id: Float!, $section_id: Float!) {\n  removeProductFromSection(product_id: $product_id, section_id: $section_id)\n}\n    `;\nexport type RemoveProductFromSectionMutationFn = Apollo.MutationFunction<RemoveProductFromSectionMutation, RemoveProductFromSectionMutationVariables>;\n\n/**\n * __useRemoveProductFromSectionMutation__\n *\n * To run a mutation, you first call `useRemoveProductFromSectionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveProductFromSectionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeProductFromSectionMutation, { data, loading, error }] = useRemoveProductFromSectionMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *      section_id: // value for 'section_id'\n *   },\n * });\n */\nexport function useRemoveProductFromSectionMutation(baseOptions?: Apollo.MutationHookOptions<RemoveProductFromSectionMutation, RemoveProductFromSectionMutationVariables>) {\n        return Apollo.useMutation<RemoveProductFromSectionMutation, RemoveProductFromSectionMutationVariables>(RemoveProductFromSectionDocument, baseOptions);\n      }\nexport type RemoveProductFromSectionMutationHookResult = ReturnType<typeof useRemoveProductFromSectionMutation>;\nexport type RemoveProductFromSectionMutationResult = Apollo.MutationResult<RemoveProductFromSectionMutation>;\nexport type RemoveProductFromSectionMutationOptions = Apollo.BaseMutationOptions<RemoveProductFromSectionMutation, RemoveProductFromSectionMutationVariables>;\nexport const RemoveWarningDocument = gql`\n    mutation removeWarning($order_id: Float!) {\n  removeWarning(order_id: $order_id)\n}\n    `;\nexport type RemoveWarningMutationFn = Apollo.MutationFunction<RemoveWarningMutation, RemoveWarningMutationVariables>;\n\n/**\n * __useRemoveWarningMutation__\n *\n * To run a mutation, you first call `useRemoveWarningMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveWarningMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeWarningMutation, { data, loading, error }] = useRemoveWarningMutation({\n *   variables: {\n *      order_id: // value for 'order_id'\n *   },\n * });\n */\nexport function useRemoveWarningMutation(baseOptions?: Apollo.MutationHookOptions<RemoveWarningMutation, RemoveWarningMutationVariables>) {\n        return Apollo.useMutation<RemoveWarningMutation, RemoveWarningMutationVariables>(RemoveWarningDocument, baseOptions);\n      }\nexport type RemoveWarningMutationHookResult = ReturnType<typeof useRemoveWarningMutation>;\nexport type RemoveWarningMutationResult = Apollo.MutationResult<RemoveWarningMutation>;\nexport type RemoveWarningMutationOptions = Apollo.BaseMutationOptions<RemoveWarningMutation, RemoveWarningMutationVariables>;\nexport const ToggleMaintenanceDocument = gql`\n    mutation toggleMaintenance {\n  toggleMaintenance\n}\n    `;\nexport type ToggleMaintenanceMutationFn = Apollo.MutationFunction<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>;\n\n/**\n * __useToggleMaintenanceMutation__\n *\n * To run a mutation, you first call `useToggleMaintenanceMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleMaintenanceMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleMaintenanceMutation, { data, loading, error }] = useToggleMaintenanceMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useToggleMaintenanceMutation(baseOptions?: Apollo.MutationHookOptions<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>) {\n        return Apollo.useMutation<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>(ToggleMaintenanceDocument, baseOptions);\n      }\nexport type ToggleMaintenanceMutationHookResult = ReturnType<typeof useToggleMaintenanceMutation>;\nexport type ToggleMaintenanceMutationResult = Apollo.MutationResult<ToggleMaintenanceMutation>;\nexport type ToggleMaintenanceMutationOptions = Apollo.BaseMutationOptions<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>;\nexport const ToggleSocialDisplayDocument = gql`\n    mutation toggleSocialDisplay($id: Float!) {\n  toggleSocialDisplay(id: $id)\n}\n    `;\nexport type ToggleSocialDisplayMutationFn = Apollo.MutationFunction<ToggleSocialDisplayMutation, ToggleSocialDisplayMutationVariables>;\n\n/**\n * __useToggleSocialDisplayMutation__\n *\n * To run a mutation, you first call `useToggleSocialDisplayMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleSocialDisplayMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleSocialDisplayMutation, { data, loading, error }] = useToggleSocialDisplayMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useToggleSocialDisplayMutation(baseOptions?: Apollo.MutationHookOptions<ToggleSocialDisplayMutation, ToggleSocialDisplayMutationVariables>) {\n        return Apollo.useMutation<ToggleSocialDisplayMutation, ToggleSocialDisplayMutationVariables>(ToggleSocialDisplayDocument, baseOptions);\n      }\nexport type ToggleSocialDisplayMutationHookResult = ReturnType<typeof useToggleSocialDisplayMutation>;\nexport type ToggleSocialDisplayMutationResult = Apollo.MutationResult<ToggleSocialDisplayMutation>;\nexport type ToggleSocialDisplayMutationOptions = Apollo.BaseMutationOptions<ToggleSocialDisplayMutation, ToggleSocialDisplayMutationVariables>;\nexport const UpdateProductDocument = gql`\n    mutation updateProduct($product_id: Float!, $name: String!, $desc: String!, $price: Float!, $stock: Float!) {\n  updateProduct(\n    product_id: $product_id\n    name: $name\n    desc: $desc\n    price: $price\n    stock: $stock\n  )\n}\n    `;\nexport type UpdateProductMutationFn = Apollo.MutationFunction<UpdateProductMutation, UpdateProductMutationVariables>;\n\n/**\n * __useUpdateProductMutation__\n *\n * To run a mutation, you first call `useUpdateProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProductMutation, { data, loading, error }] = useUpdateProductMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *      name: // value for 'name'\n *      desc: // value for 'desc'\n *      price: // value for 'price'\n *      stock: // value for 'stock'\n *   },\n * });\n */\nexport function useUpdateProductMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProductMutation, UpdateProductMutationVariables>) {\n        return Apollo.useMutation<UpdateProductMutation, UpdateProductMutationVariables>(UpdateProductDocument, baseOptions);\n      }\nexport type UpdateProductMutationHookResult = ReturnType<typeof useUpdateProductMutation>;\nexport type UpdateProductMutationResult = Apollo.MutationResult<UpdateProductMutation>;\nexport type UpdateProductMutationOptions = Apollo.BaseMutationOptions<UpdateProductMutation, UpdateProductMutationVariables>;\nexport const UpdateSectionDocument = gql`\n    mutation updateSection($name: String!, $thumbnail: String!, $section_id: Float!) {\n  updateSection(name: $name, thumbnail: $thumbnail, section_id: $section_id)\n}\n    `;\nexport type UpdateSectionMutationFn = Apollo.MutationFunction<UpdateSectionMutation, UpdateSectionMutationVariables>;\n\n/**\n * __useUpdateSectionMutation__\n *\n * To run a mutation, you first call `useUpdateSectionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateSectionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateSectionMutation, { data, loading, error }] = useUpdateSectionMutation({\n *   variables: {\n *      name: // value for 'name'\n *      thumbnail: // value for 'thumbnail'\n *      section_id: // value for 'section_id'\n *   },\n * });\n */\nexport function useUpdateSectionMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSectionMutation, UpdateSectionMutationVariables>) {\n        return Apollo.useMutation<UpdateSectionMutation, UpdateSectionMutationVariables>(UpdateSectionDocument, baseOptions);\n      }\nexport type UpdateSectionMutationHookResult = ReturnType<typeof useUpdateSectionMutation>;\nexport type UpdateSectionMutationResult = Apollo.MutationResult<UpdateSectionMutation>;\nexport type UpdateSectionMutationOptions = Apollo.BaseMutationOptions<UpdateSectionMutation, UpdateSectionMutationVariables>;\nexport const UpdateSocialUrlDocument = gql`\n    mutation updateSocialUrl($url: String!, $id: Float!) {\n  updateSocialUrl(url: $url, id: $id)\n}\n    `;\nexport type UpdateSocialUrlMutationFn = Apollo.MutationFunction<UpdateSocialUrlMutation, UpdateSocialUrlMutationVariables>;\n\n/**\n * __useUpdateSocialUrlMutation__\n *\n * To run a mutation, you first call `useUpdateSocialUrlMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateSocialUrlMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateSocialUrlMutation, { data, loading, error }] = useUpdateSocialUrlMutation({\n *   variables: {\n *      url: // value for 'url'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateSocialUrlMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSocialUrlMutation, UpdateSocialUrlMutationVariables>) {\n        return Apollo.useMutation<UpdateSocialUrlMutation, UpdateSocialUrlMutationVariables>(UpdateSocialUrlDocument, baseOptions);\n      }\nexport type UpdateSocialUrlMutationHookResult = ReturnType<typeof useUpdateSocialUrlMutation>;\nexport type UpdateSocialUrlMutationResult = Apollo.MutationResult<UpdateSocialUrlMutation>;\nexport type UpdateSocialUrlMutationOptions = Apollo.BaseMutationOptions<UpdateSocialUrlMutation, UpdateSocialUrlMutationVariables>;","import { useState } from \"react\";\r\nimport {\r\n    useAddImgToProductMutation,\r\n    useAddProductMutation,\r\n} from \"../../generated/graphql\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport Axios from \"axios\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nconst AddProducts = () => {\r\n    const [addProduct] = useAddProductMutation();\r\n    const [addImgToProduct] = useAddImgToProductMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\");\r\n    const [stock, setStock] = useState(\"\");\r\n    const [image_urls, setImage_urls] = useState([]);\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    const handleSubmit = async () => {\r\n        if (!name || !desc || !price || !stock) {\r\n            inputValidation(name, desc, price, stock);\r\n        } else {\r\n            try {\r\n                let product_id = await addProduct({\r\n                    variables: {\r\n                        name,\r\n                        desc,\r\n                        price: Number(price),\r\n                        stock: Number(stock),\r\n                    },\r\n                });\r\n\r\n                //ADD IMAGES TO PRODUCT\r\n                for (let i = 0; i < image_urls.length; i++) {\r\n                    await addImgToProduct({\r\n                        variables: {\r\n                            img_url: image_urls[i],\r\n                            product_id: Number(product_id.data!.addProduct),\r\n                        },\r\n                    });\r\n                }\r\n\r\n                setRedirect(true);\r\n            } catch {\r\n                M.toast({ html: \"Could not add product\" });\r\n            }\r\n        }\r\n        document.getElementById(\"submit-btn\")?.classList.remove(\"disabled\");\r\n    };\r\n\r\n    const addImages = async (files: any) => {\r\n        {\r\n            for (let i = 0; i < files.length; i++) {\r\n                const form = new FormData();\r\n\r\n                form.append(\"api_key\", \"767632178961832\"); //get api key from cloudinary\r\n\r\n                form.append(\"file\", files[i]);\r\n                form.append(\"tags\", `codeinfuse, medium, gist`);\r\n                form.append(\"upload_preset\", \"re5zmdqn\");\r\n                let t = (Date.now() / 1000) | 0;\r\n                form.append(\"timestamp\", `${t}`);\r\n\r\n                // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n                let res = await Axios.post(\r\n                    \"https://api.cloudinary.com/v1_1/desimqzzy/image/upload\",\r\n                    form,\r\n                    {\r\n                        headers: {\r\n                            \"X-Requested-With\": \"XMLHttpRequest\",\r\n                        },\r\n                    }\r\n                );\r\n\r\n                let tmp: any = image_urls;\r\n                tmp.push(res.data.secure_url);\r\n                setImage_urls(tmp);\r\n            }\r\n            setRefresh(!refresh);\r\n        }\r\n    };\r\n    if (redirect) {\r\n        return (\r\n            <Redirect to={{ pathname: \"/products\", state: { reload: true } }} />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" style={{ width: \"50%\" }}>\r\n            <div className=\"row\">\r\n                <h5>Add A Product</h5>\r\n            </div>\r\n\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => setName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"name\">Name</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product name\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <textarea\r\n                            id=\"desc\"\r\n                            value={desc}\r\n                            className=\"materialize-textarea\"\r\n                            onChange={e => setDesc(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"desc\">Description</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product description\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"price\"\r\n                            type=\"text\"\r\n                            value={price}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"price\">Price</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product price\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"stock\"\r\n                            type=\"text\"\r\n                            value={stock}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"stock\">Stock</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a stock amount\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"container\">\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"space-between\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            id=\"submit-btn\"\r\n                            className=\"btn green\"\r\n                            onClick={() => {\r\n                                document\r\n                                    .getElementById(\"submit-btn\")!\r\n                                    .classList.add(\"disabled\");\r\n                                handleSubmit();\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </button>\r\n\r\n                        <Dropzone onDrop={async files => addImages(files)}>\r\n                            {({ getRootProps, getInputProps }) => (\r\n                                <div {...getRootProps()}>\r\n                                    <input {...getInputProps()} />\r\n                                    <button className=\"btn black\">\r\n                                        Add Images\r\n                                    </button>\r\n                                </div>\r\n                            )}\r\n                        </Dropzone>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n            {image_urls.length === 0 ? (\r\n                <></>\r\n            ) : (\r\n                <>\r\n                    {image_urls.map((_val, i) => {\r\n                        return <img src={image_urls[i] as any} />;\r\n                    })}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\nexport default AddProducts;\r\n\r\nconst inputValidation = (name: any, desc: any, price: any, stock: any) => {\r\n    let ids = [\"name\", \"desc\", \"price\", \"stock\"],\r\n        doc = document;\r\n\r\n    for (let i = 0; i < ids.length; i++) {\r\n        try {\r\n            doc.getElementById(ids[i])!.classList.remove(\"invalid\");\r\n        } catch {}\r\n    }\r\n\r\n    if (!name) {\r\n        doc.getElementById(\"name\")!.classList.add(\"invalid\");\r\n    }\r\n    if (!desc) {\r\n        doc.getElementById(\"desc\")!.classList.add(\"invalid\");\r\n    }\r\n    if (!price) {\r\n        doc.getElementById(\"price\")!.classList.add(\"invalid\");\r\n    }\r\n    if (!stock) {\r\n        doc.getElementById(\"stock\")!.classList.add(\"invalid\");\r\n    }\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useAddImgToProductMutation,\r\n    useAddProductToSectionMutation,\r\n    useDeleteProductMutation,\r\n    useGetProductQuery,\r\n    useGetSectionsQuery,\r\n    useRemoveImgFromProductMutation,\r\n    useUpdateProductMutation,\r\n    useGetProductsSectionsQuery,\r\n    useRemoveProductFromSectionMutation,\r\n} from \"../../generated/graphql\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\n\r\nconst GetSections = () => {\r\n    const { data, loading } = useGetSectionsQuery();\r\n\r\n    let sloading = loading;\r\n    let sdata = data;\r\n    return { sdata, sloading };\r\n};\r\n\r\nconst GetProductsSections = () => {\r\n    var product_id = -1;\r\n\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        product_id = Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        product_id = Number(window.location.href.split(\":\")[3]);\r\n    }\r\n    const { data, loading } = useGetProductsSectionsQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    let pdata = data,\r\n        ploading = loading;\r\n\r\n    return {\r\n        pdata,\r\n        ploading,\r\n    };\r\n};\r\n\r\nconst EditProduct = () => {\r\n    var product_id = -1;\r\n\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        product_id = Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        product_id = Number(window.location.href.split(\":\")[3]);\r\n    }\r\n\r\n    const { sdata, sloading } = GetSections();\r\n    const { pdata, ploading } = GetProductsSections();\r\n    const { data, loading, error } = useGetProductQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    const [addProductToSection] = useAddProductToSectionMutation();\r\n    const [removeProductFromSection] = useRemoveProductFromSectionMutation();\r\n    const [updateProduct] = useUpdateProductMutation();\r\n    const [deleteProduct] = useDeleteProductMutation();\r\n    const [addImgToProduct] = useAddImgToProductMutation();\r\n    const [deleteImg] = useRemoveImgFromProductMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\"); //price in cents\r\n    const [stock, setStock] = useState(\"\");\r\n    const [image_urls, setImage_urls] = useState([]);\r\n    const [image_ids, setImage_ids] = useState([]);\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [sections, setSections] = useState([{}] as any[]);\r\n    const [removedSections, setRemovedSections] = useState([] as number[]);\r\n\r\n    const onChipDeleteCB = (_e: any, i: any) => {\r\n        console.log(\"deleted\");\r\n        let section_name = i.innerHTML.slice(0, i.innerHTML.indexOf(\"<\"));\r\n\r\n        let index = -1;\r\n        for (let j = 0; j < sections.length; j++) {\r\n            if (sections[j].name === section_name) {\r\n                index = j;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (index !== -1) {\r\n            let tmp = sections;\r\n            tmp.splice(index, 1);\r\n            setSections(tmp);\r\n        } else {\r\n            // cylcle through pdata, get one where name is = to section name save to removed state\r\n            for (let j = 0; j < pdata!.getProductsSections.length; j++) {\r\n                if (pdata!.getProductsSections[j].name === section_name) {\r\n                    console.log(\"removing\");\r\n                    let tmp = removedSections;\r\n                    tmp.push(pdata!.getProductsSections[j].section_id!);\r\n                    setRemovedSections(tmp);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const onChipAddCB = (_e: any, i: any) => {\r\n        let section_name = i.innerHTML.slice(0, i.innerHTML.indexOf(\"<\"));\r\n\r\n        let tmp = sections;\r\n        let section_id = -1;\r\n        for (let j = 0; j < sdata!.getSections.length; j++) {\r\n            if (sdata!.getSections[j].name === section_name) {\r\n                section_id = sdata!.getSections[j].section_id;\r\n                break;\r\n            }\r\n        }\r\n        if (section_id !== -1) {\r\n            tmp.push({ name: section_name, section_id });\r\n            setSections(tmp);\r\n        } else {\r\n            i.innerHTML = `CHIP DOES NOT EXIST<i class=\"material-icons close\">close</i>`;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        M.Modal.init(document.querySelectorAll(\".modal\"));\r\n\r\n        let autoCompleteData: any = {},\r\n            initialChips = [] as any[];\r\n\r\n        if (!sloading && !!sdata && !ploading && !!pdata) {\r\n            sdata.getSections.forEach((_val, i) => {\r\n                autoCompleteData[`${sdata?.getSections[i].name}`] = null;\r\n            });\r\n\r\n            let options;\r\n\r\n            if (\r\n                !pdata.getProductsSections ||\r\n                pdata.getProductsSections.length !== 0\r\n            ) {\r\n                pdata.getProductsSections.forEach((_val, i) => {\r\n                    initialChips[i] = {\r\n                        tag: pdata.getProductsSections[i].name,\r\n                    };\r\n                });\r\n            }\r\n\r\n            if (initialChips.length !== 0) {\r\n                options = {\r\n                    autocompleteOptions: {\r\n                        data: autoCompleteData,\r\n                    },\r\n                    data: initialChips,\r\n                    onChipAdd: onChipAddCB,\r\n                    onChipDelete: onChipDeleteCB,\r\n                };\r\n            } else {\r\n                options = {\r\n                    autocompleteOptions: {\r\n                        data: autoCompleteData,\r\n                    },\r\n                    onChipAdd: onChipAddCB,\r\n                    onChipDelete: onChipDeleteCB,\r\n                };\r\n            }\r\n\r\n            M.Chips.init(document.querySelectorAll(\".chips\"), options);\r\n        }\r\n    });\r\n\r\n    if (loading || sloading || ploading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (error) {\r\n        return <Redirect to=\"/products\" />;\r\n    }\r\n\r\n    const addImages = async (files: any) => {\r\n        {\r\n            M.toast({ html: \"Adding images please wait...\" });\r\n            toggleDisabledClass([\"img_btn\", \"submit-btn\", \"delete-button\"]);\r\n\r\n            for (let i = 0; i < files.length; i++) {\r\n                const form = new FormData();\r\n\r\n                form.append(\"api_key\", \"767632178961832\"); //get api key from cloudinary\r\n\r\n                form.append(\"file\", files[i]);\r\n                form.append(\"tags\", `codeinfuse, medium, gist`);\r\n                form.append(\"upload_preset\", \"re5zmdqn\");\r\n                let t = (Date.now() / 1000) | 0;\r\n                form.append(\"timestamp\", `${t}`);\r\n\r\n                // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n                try {\r\n                    let res = await Axios.post(\r\n                        \"https://api.cloudinary.com/v1_1/desimqzzy/image/upload\",\r\n                        form,\r\n                        {\r\n                            headers: {\r\n                                \"X-Requested-With\": \"XMLHttpRequest\",\r\n                            },\r\n                        }\r\n                    );\r\n                    let tmp: any = image_urls;\r\n                    tmp.push(res.data.secure_url);\r\n                    setImage_urls(tmp);\r\n                } catch (error) {\r\n                    M.toast({ html: `Error: ${error}` });\r\n                }\r\n            }\r\n\r\n            toggleDisabledClass([\"img_btn\", \"submit-btn\", \"delete-button\"]);\r\n            setRefresh(!refresh);\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        // add sections to products\r\n        if (sections.length !== 1) {\r\n            for (let j = 1; j < sections.length; j++) {\r\n                let res = await addProductToSection({\r\n                    variables: {\r\n                        product_id,\r\n                        section_id: sections[j].section_id,\r\n                    },\r\n                });\r\n\r\n                if (!res.data || !res.data.addProductToSection) {\r\n                    M.toast({\r\n                        html: `An Error occurred while adding product to section => ${sections[j].name}`,\r\n                    });\r\n\r\n                    M.toast({\r\n                        html: `If you got this error you added a section that does not exist`,\r\n                    });\r\n\r\n                    M.toast({\r\n                        html: `Please use the autoselect functionality`,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        // remove product from sections\r\n        if (removedSections.length !== 0) {\r\n            for (let j = 0; j < removedSections.length; j++) {\r\n                let res = await removeProductFromSection({\r\n                    variables: {\r\n                        product_id,\r\n                        section_id: removedSections[j],\r\n                    },\r\n                });\r\n\r\n                if (!res.data || !res.data.removeProductFromSection) {\r\n                    M.toast({ html: \"Could not remove product from Section\" });\r\n                }\r\n            }\r\n        }\r\n\r\n        await updateProduct({\r\n            variables: {\r\n                product_id,\r\n                name: name || product.name,\r\n                desc: desc || product.desc,\r\n                price: Number(price) || product.price,\r\n                stock: Number(stock) || product.stock,\r\n            },\r\n        });\r\n\r\n        for (let i = 0; i < image_urls.length; i++) {\r\n            try {\r\n                await addImgToProduct({\r\n                    variables: {\r\n                        img_url: image_urls[i],\r\n                        product_id: data?.getProduct.product_id!,\r\n                    },\r\n                });\r\n            } catch (err) {\r\n                M.toast({\r\n                    html: `Error occured while trying to add an image: ${err}`,\r\n                });\r\n                return;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < image_ids.length; i++) {\r\n            try {\r\n                await deleteImg({\r\n                    variables: {\r\n                        img_id: image_ids[i],\r\n                    },\r\n                });\r\n            } catch (e) {\r\n                M.toast({\r\n                    html: `Error occured while trying to remove an image: ${e}`,\r\n                });\r\n                return;\r\n            }\r\n        }\r\n\r\n        window.location.reload();\r\n    };\r\n\r\n    let product = data!.getProduct;\r\n\r\n    return (\r\n        <div className=\"container\" style={{ width: \"50%\" }}>\r\n            <div className=\"row\">\r\n                <h5>Edit Product</h5>\r\n            </div>\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => {\r\n                                setName(e.target.value as any);\r\n                            }}\r\n                        />\r\n                        <label id=\"name-label\" htmlFor=\"name\">\r\n                            {product.name}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <textarea\r\n                            id=\"desc\"\r\n                            value={desc}\r\n                            className=\"materialize-textarea\"\r\n                            onChange={e => setDesc(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"desc\">{product.desc}</label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"price\"\r\n                            type=\"text\"\r\n                            value={price}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"price\">\r\n                            ${Number(product.price / 100).toFixed(2)}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"stock\"\r\n                            type=\"text\"\r\n                            value={stock}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"stock\">\r\n                            STOCK =&gt; {product.stock}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"chips chips-initial\" id=\"chips-initial\">\r\n                        <input className=\"custom-class\" />\r\n                    </div>\r\n                    {/* <div className=\"input-field\">\r\n                        <input\r\n                            id=\"categories\"\r\n                            className=\"autocomplete\"\r\n                            type=\"text\"\r\n                        />\r\n                        <label htmlFor=\"categories\">Sections</label>\r\n                    </div> */}\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                    }}\r\n                >\r\n                    <button\r\n                        className=\"btn green\"\r\n                        id=\"submit-btn\"\r\n                        onClick={() => handleSubmit()}\r\n                    >\r\n                        Submit\r\n                    </button>\r\n\r\n                    <Dropzone onDrop={async files => addImages(files)}>\r\n                        {({ getRootProps, getInputProps }) => (\r\n                            <span {...getRootProps()}>\r\n                                <input {...getInputProps()} />\r\n                                <button className=\"btn black\" id=\"img_btn\">\r\n                                    Add Images\r\n                                </button>\r\n                            </span>\r\n                        )}\r\n                    </Dropzone>\r\n\r\n                    <button\r\n                        className=\"btn modal-trigger red\"\r\n                        id=\"delete-button\"\r\n                        data-target=\"modal1\"\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"products-grid\" style={{ marginTop: \"32px\" }}>\r\n                    <>\r\n                        {data?.getProduct.images!.map((_val, i) => {\r\n                            return (\r\n                                <div\r\n                                    className=\"card\"\r\n                                    style={{ margin: \"0px 16px 32px 16px\" }}\r\n                                    id={`card-${i}`}\r\n                                    key={i}\r\n                                >\r\n                                    <span\r\n                                        className=\"close-icon noselect\"\r\n                                        onClick={async () => {\r\n                                            let tmp: any = image_ids;\r\n                                            tmp.push(\r\n                                                data.getProduct.images![i]\r\n                                                    .img_id\r\n                                            );\r\n                                            setImage_ids(tmp);\r\n                                            document.getElementById(\r\n                                                `card-${i}`\r\n                                            )!.style.display = \"none\";\r\n                                        }}\r\n                                    >\r\n                                        <i className=\"material-icons white-text\">\r\n                                            close\r\n                                        </i>\r\n                                    </span>\r\n                                    <div className=\"card-image noselect\">\r\n                                        <img\r\n                                            src={\r\n                                                data?.getProduct.images![i]\r\n                                                    .img_url ||\r\n                                                \"https://materializecss.com/images/sample-1.jpg\"\r\n                                            }\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </>\r\n                    {image_urls.length === 0 ? (\r\n                        <></>\r\n                    ) : (\r\n                        <>\r\n                            {image_urls.map((_val, i) => {\r\n                                return (\r\n                                    <div\r\n                                        className=\"card\"\r\n                                        style={{ margin: \"0px 16px 32px 16px\" }}\r\n                                    >\r\n                                        <div className=\"card-image noselect\">\r\n                                            <img src={image_urls[i] as any} />\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </form>\r\n\r\n            <div id=\"modal1\" className=\"modal\">\r\n                <div className=\"modal-content\">\r\n                    <h4>Are you sure you want to delete this product?</h4>\r\n                    <p>This will also delete all of the users orders.</p>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                    <button\r\n                        id=\"delete-button\"\r\n                        className=\"btn right red\"\r\n                        onClick={async () => {\r\n                            toggleDisabledClass([\"delete-button\"]);\r\n\r\n                            let tmp = await deleteProduct({\r\n                                variables: { product_id },\r\n                            });\r\n\r\n                            if (tmp.data?.deleteProduct) {\r\n                                window.location.reload();\r\n                            } else {\r\n                                M.toast({ html: \"Could not delete product\" });\r\n                                toggleDisabledClass([\"delete-button\"]);\r\n                            }\r\n                        }}\r\n                    >\r\n                        Delete Product\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst toggleDisabledClass = (idList: string[]) => {\r\n    for (let i = 0; i < idList.length; i++) {\r\n        try {\r\n            document.getElementById(idList[i])!.classList.toggle(\"disabled\");\r\n        } catch {}\r\n    }\r\n};\r\n\r\nexport default EditProduct;\r\n","const PreviewFAB = () => {\r\n    return (\r\n        <div className=\"fixed-action-btn\" style={{ bottom: 100, right: 100 }}>\r\n            <a\r\n                className=\"btn-floating btn-large red tooltipped\"\r\n                data-position=\"left\"\r\n                data-tooltip=\"Click me to preview your changes\"\r\n                id=\"menu\"\r\n            >\r\n                <i className=\"large material-icons blue\">remove_red_eye</i>\r\n            </a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PreviewFAB;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { FaInstagram, FaEnvelope, FaTwitter, FaFacebook } from \"react-icons/fa\";\r\nimport {\r\n    useToggleSocialDisplayMutation,\r\n    useUpdateSocialUrlMutation,\r\n} from \"../../generated/graphql\";\r\nimport PreviewFAB from \"./PreviewFAB\";\r\n\r\ninterface Props {\r\n    data: [\r\n        {\r\n            id: number;\r\n            index: number;\r\n            social_logo: string;\r\n            social_url: string;\r\n            display: string;\r\n        }\r\n    ];\r\n    refresh: boolean;\r\n    setRefresh: (value: React.SetStateAction<boolean>) => void;\r\n}\r\n\r\nconst Socials: React.FC<Props> = ({ data, refresh, setRefresh }) => {\r\n    console.log(\"data :>> \", data);\r\n\r\n    const [updateSocialUrl] = useUpdateSocialUrlMutation();\r\n    const [toggleSocialDisplay] = useToggleSocialDisplayMutation();\r\n\r\n    const [socialMap, setSocialIcons] = useState<{ [key: string]: string[] }>({\r\n        socials: [\"I\", \"E\", \"T\", \"F\"],\r\n    });\r\n\r\n    const [socials, setSocials] = useState(data);\r\n    const [newSocials, setNewSocials] = useState([\r\n        { social_url: \"\" },\r\n        { social_url: \"\" },\r\n        { social_url: \"\" },\r\n        { social_url: \"\" },\r\n    ]);\r\n\r\n    return (\r\n        <>\r\n            <PreviewFAB />\r\n\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h3 className=\"white-text noselect\">Social Links</h3>\r\n                    </span>\r\n\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped responsive\">\r\n                            <thead></thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Icon</th>\r\n                                    <th>URL</th>\r\n                                    <th></th>\r\n                                    <th>Display</th>\r\n                                    <th>Index</th>\r\n                                </tr>\r\n\r\n                                {socials.map((_val, i) => {\r\n                                    return (\r\n                                        <tr key={i}>\r\n                                            <td>\r\n                                                <SocialIcon\r\n                                                    social_logo={\r\n                                                        socials[i].social_logo\r\n                                                    }\r\n                                                />\r\n                                            </td>\r\n                                            <td>\r\n                                                <div className=\"input-field\">\r\n                                                    <input\r\n                                                        id={`social-input${i}`}\r\n                                                        type=\"text\"\r\n                                                        className=\"validate\"\r\n                                                        value={\r\n                                                            newSocials[i]\r\n                                                                .social_url\r\n                                                        }\r\n                                                        onChange={async e => {\r\n                                                            let updatedState = newSocials;\r\n                                                            updatedState[\r\n                                                                i\r\n                                                            ].social_url =\r\n                                                                e.target.value;\r\n\r\n                                                            setNewSocials(\r\n                                                                updatedState\r\n                                                            );\r\n                                                            setRefresh(\r\n                                                                !refresh\r\n                                                            );\r\n                                                        }}\r\n                                                    />\r\n                                                    <label\r\n                                                        htmlFor={`social-input${i}`}\r\n                                                    >\r\n                                                        {socials[i].social_url}\r\n                                                    </label>\r\n                                                    <span\r\n                                                        id=\"coupon-helper\"\r\n                                                        className=\"helper-text\"\r\n                                                        data-error=\" \"\r\n                                                    ></span>\r\n                                                </div>\r\n                                            </td>\r\n\r\n                                            <td>\r\n                                                <button\r\n                                                    id={`update-social-${i}`}\r\n                                                    className=\"btn black\"\r\n                                                    onClick={async () => {\r\n                                                        let d = document;\r\n                                                        d.getElementById(\r\n                                                            `update-social-${i}`\r\n                                                        )!.classList.add(\r\n                                                            \"disabled\"\r\n                                                        );\r\n                                                        let tmp = await updateSocialUrl(\r\n                                                            {\r\n                                                                variables: {\r\n                                                                    id:\r\n                                                                        socials[\r\n                                                                            i\r\n                                                                        ].id,\r\n                                                                    url:\r\n                                                                        newSocials[\r\n                                                                            i\r\n                                                                        ]\r\n                                                                            .social_url,\r\n                                                                },\r\n                                                            }\r\n                                                        );\r\n\r\n                                                        if (\r\n                                                            tmp.data\r\n                                                                ?.updateSocialUrl\r\n                                                        ) {\r\n                                                            window.location.reload();\r\n                                                        } else {\r\n                                                            M.toast({\r\n                                                                html: `An error has occured.`,\r\n                                                            });\r\n                                                        }\r\n                                                        d.getElementById(\r\n                                                            `update-social-${i}`\r\n                                                        )!.classList.remove(\r\n                                                            \"disabled\"\r\n                                                        );\r\n                                                    }}\r\n                                                >\r\n                                                    UPDATE\r\n                                                </button>\r\n                                            </td>\r\n\r\n                                            <td>\r\n                                                {socials[i].display ? (\r\n                                                    <button\r\n                                                        className=\"btn green\"\r\n                                                        onClick={async () => {\r\n                                                            let tmp = await toggleSocialDisplay(\r\n                                                                {\r\n                                                                    variables: {\r\n                                                                        id:\r\n                                                                            socials[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .id,\r\n                                                                    },\r\n                                                                }\r\n                                                            );\r\n\r\n                                                            if (\r\n                                                                !tmp.data ||\r\n                                                                !tmp.data\r\n                                                                    .toggleSocialDisplay\r\n                                                            ) {\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"An error occured\",\r\n                                                                });\r\n                                                            } else {\r\n                                                                window.location.reload();\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        VISIBLE\r\n                                                    </button>\r\n                                                ) : (\r\n                                                    <button\r\n                                                        className=\"btn red\"\r\n                                                        onClick={async () => {\r\n                                                            let tmp = await toggleSocialDisplay(\r\n                                                                {\r\n                                                                    variables: {\r\n                                                                        id:\r\n                                                                            socials[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .id,\r\n                                                                    },\r\n                                                                }\r\n                                                            );\r\n\r\n                                                            if (\r\n                                                                !tmp.data ||\r\n                                                                !tmp.data\r\n                                                                    .toggleSocialDisplay\r\n                                                            ) {\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"An error occured\",\r\n                                                                });\r\n                                                            } else {\r\n                                                                window.location.reload();\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        HIDDEN\r\n                                                    </button>\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                <a\r\n                                                    className=\"dropdown-trigger btn\"\r\n                                                    href=\"#\"\r\n                                                    data-target=\"dropdown1\"\r\n                                                >\r\n                                                    Drop Me!\r\n                                                </a>\r\n\r\n                                                <ul\r\n                                                    id=\"dropdown1\"\r\n                                                    className=\"dropdown-content\"\r\n                                                >\r\n                                                    <IndexDropdown\r\n                                                        socials={socials}\r\n                                                    />\r\n                                                </ul>\r\n                                            </td>\r\n                                        </tr>\r\n                                    );\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst IndexDropdown: React.FC<{\r\n    socials: [\r\n        {\r\n            id: number;\r\n            index: number;\r\n            social_logo: string;\r\n            social_url: string;\r\n            display: string;\r\n        }\r\n    ];\r\n}> = ({ socials }) => {\r\n    let indices = [0, 1, 2, 3];\r\n    return (\r\n        <>\r\n            {indices.map((_val, ii) => {\r\n                return (\r\n                    <li className=\"\" style={{ minWidth: 50 }}>\r\n                        <span>\r\n                            <span className=\"left black-text\">\r\n                                {socials.map((_val, j) => {\r\n                                    if (socials[j].index === indices[ii]) {\r\n                                        return (\r\n                                            <SocialIcon\r\n                                                social_logo={\r\n                                                    socials[j].social_logo\r\n                                                }\r\n                                            />\r\n                                        );\r\n                                    }\r\n                                })}\r\n                            </span>\r\n                            <span className=\"right black-text\">\r\n                                {indices[ii]}\r\n                            </span>\r\n                        </span>\r\n                    </li>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nconst SocialIcon: React.FC<{ social_logo: string }> = ({ social_logo }) => {\r\n    switch (social_logo) {\r\n        case \"I\": {\r\n            return (\r\n                <FaInstagram\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        case \"E\": {\r\n            return (\r\n                <FaEnvelope\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n        case \"T\": {\r\n            return (\r\n                <FaTwitter\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n        case \"F\": {\r\n            return (\r\n                <FaFacebook\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        default: {\r\n            return <>ERROR</>;\r\n        }\r\n    }\r\n};\r\n\r\nexport default Socials;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useGetSocialsQuery,\r\n    useInitSocialsMutation,\r\n} from \"../../generated/graphql\";\r\nimport { Sorting } from \"../../Sorting\";\r\nimport Socials from \"./Socials\";\r\n\r\nconst initSocials = async (INIT_SOCIALS: any) => {\r\n    let tmp = await INIT_SOCIALS();\r\n    if (tmp.data?.initSocials) {\r\n        window.location.reload();\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n\r\nconst EditSocials = () => {\r\n    const { sortByProp } = Sorting();\r\n    const [INIT_SOCIALS] = useInitSocialsMutation();\r\n    const [refresh, setRefresh] = useState(false);\r\n    const { data, loading, error } = useGetSocialsQuery({\r\n        variables: { component: \"footer\" },\r\n    });\r\n\r\n    useEffect(() => {\r\n        M.FloatingActionButton.init(\r\n            document.querySelectorAll(\".fixed-action-btn\")\r\n        );\r\n        M.Dropdown.init(document.querySelectorAll(\".dropdown-trigger\"));\r\n        M.Tooltip.init(document.querySelectorAll(\".tooltipped\"));\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (error) {\r\n        return <>error</>;\r\n    }\r\n\r\n    if (!data || data.getSocials.length === 0) {\r\n        let tmp = initSocials(INIT_SOCIALS);\r\n        if (!tmp) {\r\n            return <>error occured while initializing Socials</>;\r\n        }\r\n        return <>NO data</>;\r\n    }\r\n\r\n    sortByProp(data.getSocials, \"index\");\r\n\r\n    return (\r\n        <Socials\r\n            data={data.getSocials as any}\r\n            setRefresh={setRefresh}\r\n            refresh={refresh}\r\n        />\r\n    );\r\n};\r\n\r\nexport default EditSocials;\r\n","export const Sorting = () => {\r\n    const sortByProp = (arr: any, prop: string, invert?: boolean) => {\r\n        let props = [] as any[];\r\n        arr.forEach((_val: any, i: any) => {\r\n            props[i] = arr[i][prop];\r\n        });\r\n\r\n        props.sort();\r\n        if (invert) {\r\n            props.reverse();\r\n        }\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let j = i;\r\n            while (arr[i][prop] !== props[i]) {\r\n                let tmp = arr.slice(j, j + 2);\r\n                tmp.reverse();\r\n                arr[j] = tmp[0];\r\n                arr[j + 1] = tmp[1];\r\n                j = j + 1;\r\n\r\n                if (j === arr.length - 1) {\r\n                    j = i;\r\n                }\r\n\r\n                if (!arr[arr.length - 1]) {\r\n                    // remove undef index sometimes introduced by tmp.reverse()\r\n                    arr.pop();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!invert) {\r\n            return arr;\r\n        } else {\r\n            return arr;\r\n        }\r\n    };\r\n\r\n    return {\r\n        sortByProp,\r\n    };\r\n};\r\n","import {\r\n    useGetOrderByIdQuery,\r\n    useRemoveWarningMutation,\r\n} from \"../../generated/graphql\";\r\nimport { useEffect, useState, useMemo } from \"react\";\r\n\r\nconst calcProdSubtotal = (products: any[]) => {\r\n    let Subtotal: any = 0,\r\n        sTotal: any = 100;\r\n\r\n    for (let i = 0; i < products.length; i++) {\r\n        Subtotal += products[i].productSubtotal!;\r\n        console.log(\r\n            \"products[i].quantityOrdered :>> \",\r\n            products[i].quantityOrdered\r\n        );\r\n        sTotal += products[i].quantityOrdered * 50;\r\n    }\r\n\r\n    let productsSubtotal = Number(Subtotal / 100).toFixed(2);\r\n\r\n    if (sTotal > 500) {\r\n        sTotal = 500;\r\n    }\r\n\r\n    let shippingTotal = Number(sTotal / 100).toFixed(2);\r\n\r\n    return { productsSubtotal, shippingTotal };\r\n};\r\n\r\nconst getOrderId = () => {\r\n    console.log(\"gettings order id\");\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        return window.location.href.split(\":\")[2];\r\n    } else {\r\n        return window.location.href.split(\":\")[3];\r\n    }\r\n};\r\n\r\nconst OrderDetails = () => {\r\n    const id = useMemo(() => getOrderId(), [getOrderId]);\r\n\r\n    const { data, loading, error } = useGetOrderByIdQuery({\r\n        variables: {\r\n            order_id: Number(id),\r\n        },\r\n    });\r\n\r\n    const [removeWarning] = useRemoveWarningMutation();\r\n\r\n    const [state, setState] = useState(false);\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data) {\r\n        return (\r\n            <div className=\"centered\">\r\n                <h3>No data was found</h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <div className=\"centered\">\r\n                <h3>An Error has occured.</h3>\r\n                <h3>{error.message}</h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    const { productsSubtotal, shippingTotal } = calcProdSubtotal(\r\n        data.getOrderById.products!\r\n    );\r\n\r\n    let amountOff = Number(\r\n        (data.getOrderById.order_total! *\r\n            Number(\"0.\" + data.getOrderById.discount)) /\r\n            100\r\n    ).toFixed(2);\r\n\r\n    let str, dateOfPurchase;\r\n    if (data.getOrderById.date_of_purchase) {\r\n        str = data.getOrderById.date_of_purchase.split(\" \");\r\n        dateOfPurchase = `${str[0]} ${str[1]} ${str[2]} ${str[3]}`;\r\n    }\r\n\r\n    let shipping = JSON.parse(data.getOrderById.shipping!);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {!data.getOrderById.warning ? (\r\n                <></>\r\n            ) : (\r\n                <>\r\n                    <div id=\"modal1\" className=\"modal\">\r\n                        <div className=\"modal-content\">\r\n                            <h4>\r\n                                Are you sure you want to remove this warning?\r\n                            </h4>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <a\r\n                                href=\"#!\"\r\n                                className=\"modal-close btn red\"\r\n                                onClick={async () => {\r\n                                    let tmp = await removeWarning({\r\n                                        variables: {\r\n                                            order_id: Number(id),\r\n                                        },\r\n                                    });\r\n                                    if (tmp.data?.removeWarning) {\r\n                                        window.location.reload();\r\n                                    } else {\r\n                                        M.toast({\r\n                                            html: \"An Error has occurred\",\r\n                                        });\r\n                                        M.toast({\r\n                                            html:\r\n                                                \"Please try again later or contact me on discord\",\r\n                                        });\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Remove\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col s12 \">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-content\">\r\n                                    <span\r\n                                        className=\"card-title \"\r\n                                        style={{ fontWeight: \"bold\" }}\r\n                                    >\r\n                                        <span className=\"red-text\">\r\n                                            {data.getOrderById.warning}\r\n                                        </span>\r\n                                        <span className=\"right\">\r\n                                            <a\r\n                                                className=\"btn modal-trigger black\"\r\n                                                href=\"#modal1\"\r\n                                            >\r\n                                                Remove Warning\r\n                                            </a>\r\n                                        </span>\r\n                                    </span>\r\n\r\n                                    <p className=\"flow-text bold\">\r\n                                        What to do:\r\n                                    </p>\r\n\r\n                                    <p\r\n                                        className=\"flow-text\"\r\n                                        style={{ marginLeft: \"32px\" }}\r\n                                    >\r\n                                        Double check the order. Ensure the\r\n                                        customer paid the correct amount\r\n                                    </p>\r\n\r\n                                    <p\r\n                                        className=\"flow-text\"\r\n                                        style={{ marginLeft: \"32px\" }}\r\n                                    >\r\n                                        This error will be thrown anytime there\r\n                                        is the slightest difference in\r\n                                        calculations.\r\n                                    </p>\r\n\r\n                                    <p\r\n                                        className=\"flow-text\"\r\n                                        style={{ marginLeft: \"32px\" }}\r\n                                    >\r\n                                        If the difference is greater than a\r\n                                        couple of pennies please contact me\r\n                                        through discord.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n            {state ? (\r\n                <>\r\n                    <div className=\"row\">\r\n                        <div className=\"col offset-s6 s6\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-content\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col s10 offset-s1\">\r\n                                            <span className=\"card-title\">\r\n                                                Order Summary\r\n                                            </span>\r\n\r\n                                            <div\r\n                                                className=\"divider\"\r\n                                                style={{\r\n                                                    marginTop: \"4px\",\r\n                                                    marginBottom: \"4px\",\r\n                                                }}\r\n                                            ></div>\r\n\r\n                                            <div>\r\n                                                <span className=\"left\">\r\n                                                    Products Total\r\n                                                </span>\r\n                                                <span className=\"right\">\r\n                                                    ${productsSubtotal}\r\n                                                </span>\r\n                                            </div>\r\n\r\n                                            <br />\r\n\r\n                                            <div>\r\n                                                <span className=\"left\">\r\n                                                    Tax\r\n                                                </span>\r\n                                                <span className=\"right\">\r\n                                                    $\r\n                                                    {Number(\r\n                                                        Number(\r\n                                                            productsSubtotal\r\n                                                        ) * 0.095\r\n                                                    ).toFixed(2)}\r\n                                                </span>\r\n                                            </div>\r\n\r\n                                            <br />\r\n\r\n                                            <div>\r\n                                                <span className=\"left\">\r\n                                                    Shipping\r\n                                                </span>\r\n                                                <span className=\"right\">\r\n                                                    ${shippingTotal}\r\n                                                </span>\r\n                                            </div>\r\n\r\n                                            <br />\r\n\r\n                                            <>\r\n                                                {!data.getOrderById.coupon ? (\r\n                                                    <></>\r\n                                                ) : (\r\n                                                    <>\r\n                                                        <div\r\n                                                            className=\"divider\"\r\n                                                            style={{\r\n                                                                marginTop:\r\n                                                                    \"4px\",\r\n                                                                marginBottom:\r\n                                                                    \"4px\",\r\n                                                            }}\r\n                                                        ></div>\r\n                                                        <span className=\"left\">\r\n                                                            Coupon(\r\n                                                            {\r\n                                                                data\r\n                                                                    .getOrderById\r\n                                                                    .coupon\r\n                                                            }\r\n                                                            )\r\n                                                        </span>\r\n                                                        <span className=\"right\">\r\n                                                            {\r\n                                                                data\r\n                                                                    .getOrderById\r\n                                                                    .discount\r\n                                                            }\r\n                                                            % (\r\n                                                            <span className=\"red-text bold\">\r\n                                                                -${amountOff}\r\n                                                            </span>\r\n                                                            )\r\n                                                        </span>\r\n                                                    </>\r\n                                                )}\r\n                                            </>\r\n\r\n                                            <br />\r\n                                            <div\r\n                                                className=\"divider\"\r\n                                                style={{\r\n                                                    marginTop: \"4px\",\r\n                                                    marginBottom: \"4px\",\r\n                                                }}\r\n                                            ></div>\r\n                                            <span className=\"left bold\">\r\n                                                Order Total\r\n                                            </span>\r\n                                            <span className=\"right bold\">\r\n                                                $\r\n                                                {Number(\r\n                                                    data.getOrderById\r\n                                                        .order_total! / 100\r\n                                                ).toFixed(2)}\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n\r\n            <div style={{ marginTop: \"16px\" }}>\r\n                <div className=\"row z-depth-1\">\r\n                    <div\r\n                        className=\"col s12\"\r\n                        style={{\r\n                            padding: \"0px\",\r\n                            backgroundColor: \"white\",\r\n                        }}\r\n                    >\r\n                        <div\r\n                            className=\"card-header row\"\r\n                            style={{\r\n                                borderLeft: \"5px solid #ff0000\",\r\n                                paddingTop: \"13px\",\r\n                                paddingBottom: \"13px\",\r\n                                paddingRight: \"25px\",\r\n                                paddingLeft: \"20px\",\r\n                                margin: \"0px\",\r\n                                zIndex: 4,\r\n                                position: \"relative\",\r\n                            }}\r\n                        >\r\n                            <span\r\n                                className=\"hide-on-small-only\"\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    width: \"41.7%\",\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    style={{\r\n                                        color: \"#1d252c\",\r\n                                        paddingRight: \"1rem\",\r\n                                        fontWeight: 700,\r\n                                    }}\r\n                                >\r\n                                    Order ID\r\n                                </span>\r\n                                <span>CR-{data.getOrderById.order_id}</span>\r\n                            </span>\r\n\r\n                            <span\r\n                                className=\"hide-on-med-and-up\"\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    width: \"50%\",\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    style={{\r\n                                        color: \"#1d252c\",\r\n                                        paddingRight: \"1rem\",\r\n                                        fontWeight: 700,\r\n                                    }}\r\n                                >\r\n                                    Order ID\r\n                                </span>\r\n                                <span>CR-{data.getOrderById.order_id}</span>\r\n                            </span>\r\n\r\n                            <span\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    width: \"17%\",\r\n                                }}\r\n                                className=\"hide-on-med-and-down\"\r\n                            >\r\n                                {data.getOrderById.date_of_purchase ? (\r\n                                    <span>{dateOfPurchase}</span>\r\n                                ) : (\r\n                                    <></>\r\n                                )}\r\n                            </span>\r\n\r\n                            <span\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    width: \"30.3%\",\r\n                                    fontWeight: 700,\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    style={{\r\n                                        display: \"flex\",\r\n                                        justifyContent: \"space-between\",\r\n                                    }}\r\n                                >\r\n                                    <span>\r\n                                        $\r\n                                        {Number(\r\n                                            data.getOrderById.order_total! / 100\r\n                                        ).toFixed(2)}{\" \"}\r\n                                        {data.getOrderById.discount ? (\r\n                                            <span>\r\n                                                (\r\n                                                <span\r\n                                                    style={{\r\n                                                        color: \"rgb(255, 0, 0)\",\r\n                                                    }}\r\n                                                >\r\n                                                    -$\r\n                                                    {amountOff}\r\n                                                </span>\r\n                                                )\r\n                                            </span>\r\n                                        ) : (\r\n                                            <></>\r\n                                        )}\r\n                                    </span>\r\n                                    <span>\r\n                                        <span\r\n                                            style={{ color: \"#0457c8\" }}\r\n                                            className=\"right\"\r\n                                            onClick={() => setState(!state)}\r\n                                        >\r\n                                            Payment Details\r\n                                        </span>\r\n                                    </span>\r\n                                </span>\r\n                            </span>\r\n                        </div>\r\n\r\n                        <div className=\"divider\"></div>\r\n\r\n                        <div\r\n                            className=\"card-body\"\r\n                            style={{\r\n                                backgroundColor: \"white\",\r\n                                zIndex: 2,\r\n                                position: \"relative\",\r\n                            }}\r\n                        >\r\n                            {data.getOrderById.products!.map(\r\n                                (_val: any, j: any) => {\r\n                                    return (\r\n                                        <>\r\n                                            <div className=\"row\" key={j}>\r\n                                                <div className=\"col m4\">\r\n                                                    <img\r\n                                                        style={{\r\n                                                            width: \"100%\",\r\n                                                        }}\r\n                                                        src={\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .images![0]\r\n                                                                .img_url\r\n                                                        }\r\n                                                    />\r\n                                                </div>\r\n                                                <div\r\n                                                    style={{\r\n                                                        display: \"flex\",\r\n                                                        flexDirection: \"column\",\r\n                                                        justifyContent:\r\n                                                            \"space-between\",\r\n                                                        height: \"100%\",\r\n                                                        paddingLeft: 0,\r\n                                                    }}\r\n                                                    className=\"col m2 offset-m1 hide-on-small-only\"\r\n                                                >\r\n                                                    <p\r\n                                                        className=\"flow-text\"\r\n                                                        style={{\r\n                                                            fontSize: \"16px\",\r\n                                                            fontWeight: \"bold\",\r\n                                                        }}\r\n                                                    >\r\n                                                        {\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .name!\r\n                                                        }\r\n                                                    </p>\r\n                                                    <p className=\"hide-on-small-only\">\r\n                                                        Qty:{\" \"}\r\n                                                        {\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .quantityOrdered\r\n                                                        }{\" \"}\r\n                                                        ($\r\n                                                        {Number(\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .productSubtotal! /\r\n                                                                100\r\n                                                        ).toFixed(2)}{\" \"}\r\n                                                        {data.getOrderById\r\n                                                            .products![j]\r\n                                                            .quantityOrdered ===\r\n                                                        1 ? (\r\n                                                            <></>\r\n                                                        ) : (\r\n                                                            <>\r\n                                                                @ $\r\n                                                                {Number(\r\n                                                                    data\r\n                                                                        .getOrderById\r\n                                                                        .products![\r\n                                                                        j\r\n                                                                    ].price /\r\n                                                                        100\r\n                                                                ).toFixed(\r\n                                                                    2\r\n                                                                )}{\" \"}\r\n                                                                each\r\n                                                            </>\r\n                                                        )}\r\n                                                        )\r\n                                                    </p>\r\n                                                </div>\r\n\r\n                                                <div className=\"col offset-m1 m3\">\r\n                                                    <>\r\n                                                        {j === 0 ? (\r\n                                                            <>\r\n                                                                {!shipping ? (\r\n                                                                    <p className=\"bold\">\r\n                                                                        No\r\n                                                                        shipping\r\n                                                                        information\r\n                                                                        was\r\n                                                                        found,\r\n                                                                        check\r\n                                                                        paypal,\r\n                                                                        or\r\n                                                                        contact\r\n                                                                        the\r\n                                                                        user.\r\n                                                                    </p>\r\n                                                                ) : (\r\n                                                                    <div\r\n                                                                        style={{\r\n                                                                            width:\r\n                                                                                \"100%\",\r\n                                                                            borderLeft:\r\n                                                                                \" 4px solid #ff0000\",\r\n                                                                            paddingLeft:\r\n                                                                                \"15px\",\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <p className=\"bold\">\r\n                                                                            {!shipping.name ? (\r\n                                                                                <>\r\n                                                                                    No\r\n                                                                                    name\r\n                                                                                    was\r\n                                                                                    found\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    {\r\n                                                                                        shipping.name\r\n                                                                                    }\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.line1\r\n                                                                            }\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.city\r\n                                                                            }\r\n                                                                            ,{\" \"}\r\n                                                                            {\r\n                                                                                shipping.state\r\n                                                                            }{\" \"}\r\n                                                                            {\r\n                                                                                shipping.postal_code\r\n                                                                            }\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.country\r\n                                                                            }\r\n                                                                        </p>\r\n                                                                    </div>\r\n                                                                )}\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            <> </>\r\n                                                        )}\r\n                                                    </>\r\n                                                </div>\r\n\r\n                                                <div\r\n                                                    style={{\r\n                                                        display: \"flex\",\r\n                                                        justifyContent:\r\n                                                            \"center\",\r\n                                                    }}\r\n                                                    className=\"col s12 hide-on-med-and-up\"\r\n                                                >\r\n                                                    <p\r\n                                                        className=\"flow-text\"\r\n                                                        style={{\r\n                                                            fontSize: \"16px\",\r\n                                                            fontWeight: \"bold\",\r\n                                                        }}\r\n                                                    >\r\n                                                        {\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .name\r\n                                                        }\r\n                                                    </p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </>\r\n                                    );\r\n                                }\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OrderDetails;\r\n","import { useState } from \"react\";\r\nimport {\r\n    useGetOrdersQuery,\r\n    useEditTrackingMutation,\r\n} from \"../../generated/graphql\";\r\nimport { Sorting } from \"../../Sorting\";\r\n\r\nconst Orders = () => {\r\n    const { data, loading, error } = useGetOrdersQuery();\r\n    const [EditTracking] = useEditTrackingMutation();\r\n    const { sortByProp } = Sorting();\r\n\r\n    const [state, setState] = useState({ tracking: [] as any[] });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let sortedOrders = sortByProp(data.getOrders, \"order_id\", true);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Order ID</th>\r\n                        <th>Tracking Number</th>\r\n                        <th>Products Ordered</th>\r\n                        <th>Order Total</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {sortedOrders.map((_val: any, i: any) => {\r\n                        let order: any = sortedOrders[i];\r\n\r\n                        if (order.warning) {\r\n                            M.toast({\r\n                                html: `Order #${order.order_id} has a warning`,\r\n                            });\r\n                        }\r\n\r\n                        return (\r\n                            <tr className={order.warning ? \"red\" : \"\"} key={i}>\r\n                                <td>{order?.order_id}</td>\r\n                                <td>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col s7\">\r\n                                            <div className=\"row\">\r\n                                                <div className=\"input-field\">\r\n                                                    <input\r\n                                                        id={`tracking-${i}`}\r\n                                                        type=\"text\"\r\n                                                        value={\r\n                                                            state.tracking[i]\r\n                                                        }\r\n                                                        onChange={e => {\r\n                                                            let tmp: any[] =\r\n                                                                state.tracking;\r\n                                                            tmp[i] =\r\n                                                                e.target.value;\r\n                                                            setState({\r\n                                                                ...state,\r\n                                                                tracking: tmp,\r\n                                                            });\r\n                                                        }}\r\n                                                    />\r\n                                                    <label\r\n                                                        htmlFor={`tracking-${i}`}\r\n                                                    >\r\n                                                        {order?.tracking_num ? (\r\n                                                            <>\r\n                                                                {\r\n                                                                    order.tracking_num\r\n                                                                }\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            <>NONE</>\r\n                                                        )}\r\n                                                    </label>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div\r\n                                            className=\"col s4 offset-s1\"\r\n                                            style={{\r\n                                                marginTop: \"25px\",\r\n                                            }}\r\n                                        >\r\n                                            <button\r\n                                                className=\"btn black\"\r\n                                                onClick={async () => {\r\n                                                    if (state.tracking[i]) {\r\n                                                        let tmp = await EditTracking(\r\n                                                            {\r\n                                                                variables: {\r\n                                                                    order_id:\r\n                                                                        order.order_id,\r\n                                                                    new_tracking_num:\r\n                                                                        state\r\n                                                                            .tracking[\r\n                                                                            i\r\n                                                                        ],\r\n                                                                },\r\n                                                            }\r\n                                                        );\r\n\r\n                                                        if (!!tmp) {\r\n                                                            if (\r\n                                                                tmp.data\r\n                                                                    ?.editTracking\r\n                                                            ) {\r\n                                                                window.location.reload();\r\n                                                            } else {\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"Failed\",\r\n                                                                });\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"Contact me on discord\",\r\n                                                                });\r\n                                                            }\r\n                                                        } else {\r\n                                                            M.toast({\r\n                                                                html: \"Failed\",\r\n                                                            });\r\n                                                            M.toast({\r\n                                                                html:\r\n                                                                    \"Contact me on discord\",\r\n                                                            });\r\n                                                        }\r\n                                                    } else {\r\n                                                        console.log(\r\n                                                            \"undefined\"\r\n                                                        );\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                Submit\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </td>\r\n                                <td>\r\n                                    {order?.products!.map(\r\n                                        (_val2: any, j: any) => {\r\n                                            return (\r\n                                                <div className=\"row\" key={j}>\r\n                                                    {order.products[j].name} x{\" \"}\r\n                                                    {\r\n                                                        order.products[j]\r\n                                                            .quantityOrdered\r\n                                                    }\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                    )}\r\n                                </td>\r\n\r\n                                <td>\r\n                                    $\r\n                                    {Number(order.order_total / 100).toFixed(2)}\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <a\r\n                                        href={`#/order-details:${order.order_id}`}\r\n                                    >\r\n                                        See Details\r\n                                    </a>\r\n                                </td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Orders;\r\n","import { useGetProductsQuery } from \"../../generated/graphql\";\r\nimport \"../../css/products.scss\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst Products = () => {\r\n    const location: any = useLocation();\r\n    if (!!location.state) {\r\n        if (location.state.reload) {\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const { data, loading, error } = useGetProductsQuery();\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"data\", data);\r\n\r\n    return (\r\n        <div className=\"container\" style={{ marginTop: \"50px\" }}>\r\n            <nav\r\n                className=\"z-depth-0 black-text \"\r\n                style={{ backgroundColor: \"transparent\" }}\r\n            >\r\n                <div className=\"nav-wrapper\">\r\n                    <h5\r\n                        className=\"left\"\r\n                        style={{\r\n                            marginBottom: \"48px\",\r\n                            marginLeft: \"16px\",\r\n                            marginRight: \"16px\",\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"26px\",\r\n                            color: \"#14161a\",\r\n                        }}\r\n                    >\r\n                        Products\r\n                    </h5>\r\n                    <ul className=\"right\">\r\n                        <li>\r\n                            <a href=\"#/add-products\">\r\n                                <i className=\"material-icons black-text\">add</i>\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n\r\n            <div className=\"products-grid\">\r\n                {data?.getProducts.map((_val, i) => {\r\n                    let product: any = data.getProducts[i];\r\n                    return (\r\n                        <div\r\n                            className=\"card\"\r\n                            style={{ margin: \"0px 16px 32px 16px\" }}\r\n                            key={i}\r\n                        >\r\n                            {/* image here */}\r\n                            <div className=\"card-image\">\r\n                                {!product.images[0] ||\r\n                                !product.images[0].img_url ? (\r\n                                    <img src=\"https://materializecss.com/images/sample-1.jpg\" />\r\n                                ) : (\r\n                                    <img\r\n                                        src={product.images[0].img_url}\r\n                                        style={{ maxHeight: \"280px\" }}\r\n                                    />\r\n                                )}\r\n\r\n                                <a\r\n                                    href={`#/edit-product:${product.product_id}`}\r\n                                    className=\"btn-floating btn-large halfway-fab large blue-grey darken-4\"\r\n                                >\r\n                                    <i className=\"large material-icons\">edit</i>\r\n                                </a>\r\n                            </div>\r\n\r\n                            <div className=\"card-content\">\r\n                                <span className=\"card-title\">\r\n                                    {product.name}\r\n                                </span>\r\n                                <p className=\"product-price\">\r\n                                    ${Number(product.price / 100).toFixed(2)}\r\n                                </p>\r\n                                <p>{product.desc}</p>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Products;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useAddAnnouncementMutation,\r\n    useDeleteAnnouncementMutation,\r\n    useGetAnnouncementsQuery,\r\n} from \"../../generated/graphql\";\r\nimport M from \"materialize-css\";\r\n\r\nconst Announcements = () => {\r\n    const { data, loading, error } = useGetAnnouncementsQuery();\r\n    const [ADD_ANNOUNCE] = useAddAnnouncementMutation();\r\n    const [DELETE_ANNOUNCE] = useDeleteAnnouncementMutation();\r\n\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [text, setText] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        M.AutoInit();\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let announcements: any = data!.getAnnouncements;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"center-align\">Announcements</h1>\r\n\r\n            {announcements.length === 0 ? (\r\n                <h4 className=\"center-align\">NONE</h4>\r\n            ) : (\r\n                <>\r\n                    {announcements.map((_val: any, i: any) => {\r\n                        return (\r\n                            <div\r\n                                className=\"container\"\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                }}\r\n                                key={i}\r\n                            >\r\n                                <h4 className=\"center-align\">\r\n                                    {announcements[i].text}\r\n                                </h4>\r\n\r\n                                <i\r\n                                    className=\"material-icons red-text noselect\"\r\n                                    onClick={async () => {\r\n                                        try {\r\n                                            await DELETE_ANNOUNCE({\r\n                                                variables: {\r\n                                                    id: announcements[i].id,\r\n                                                },\r\n                                            });\r\n                                            window.location.reload();\r\n                                        } catch {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html:\r\n                                                    \"Could not add Announcement\",\r\n                                            });\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    delete\r\n                                </i>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </>\r\n            )}\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                <button\r\n                    className=\"btn black\"\r\n                    onClick={() => {\r\n                        setRefresh(true);\r\n                    }}\r\n                >\r\n                    Add an Announcement\r\n                </button>\r\n            </div>\r\n            {refresh ? (\r\n                <>\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"text_1\"\r\n                            className=\"validate\"\r\n                            type=\"text\"\r\n                            value={text}\r\n                            onChange={e => setText(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"text_1\">Announcement Text</label>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn green\"\r\n                            onClick={async () => {\r\n                                if (!!text) {\r\n                                    try {\r\n                                        await ADD_ANNOUNCE({\r\n                                            variables: {\r\n                                                text,\r\n                                            },\r\n                                        });\r\n\r\n                                        window.location.reload();\r\n                                    } catch {\r\n                                        M.toast({\r\n                                            html: \"An error occured\",\r\n                                        });\r\n                                        M.toast({\r\n                                            html: \"Could not add Announcement\",\r\n                                        });\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >\r\n                            Confirm\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Announcements;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useAddCouponMutation,\r\n    useDeleteCouponMutation,\r\n    useGetCouponsQuery,\r\n} from \"../../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nconst Coupons = () => {\r\n    const { data, loading, error } = useGetCouponsQuery();\r\n    const [addCoupon] = useAddCouponMutation();\r\n    const [deleteCoupon] = useDeleteCouponMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [discount, setDiscount] = useState(\"\");\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [fresh, setFresh] = useState(false);\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n\r\n        M.AutoInit();\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"center-align\">Active Coupons</h1>\r\n            {data?.getCoupons.length === 0 ? (\r\n                <h4 className=\"center-align\">NONE</h4>\r\n            ) : (\r\n                <>\r\n                    {data?.getCoupons.map((_val, i) => {\r\n                        return (\r\n                            <div\r\n                                className=\"container\"\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                }}\r\n                                key={i}\r\n                            >\r\n                                <h4 className=\"center-align\">\r\n                                    {data.getCoupons[i].coupon_name}\r\n                                </h4>\r\n                                <h5 className=\"center-align\">\r\n                                    -\r\n                                    {data.getCoupons[i].discount\r\n                                        ? data.getCoupons[i].discount\r\n                                        : 0}\r\n                                    %\r\n                                </h5>\r\n                                <i\r\n                                    className=\"material-icons red-text\"\r\n                                    onClick={async () => {\r\n                                        let tmp = await deleteCoupon({\r\n                                            variables: {\r\n                                                coupon_name:\r\n                                                    data.getCoupons[i]\r\n                                                        .coupon_name,\r\n                                            },\r\n                                        });\r\n\r\n                                        if (!tmp!.data!.deleteCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n\r\n                                            M.toast({\r\n                                                html: \"Could not delete coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    delete\r\n                                </i>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </>\r\n            )}\r\n\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                <button\r\n                    className=\"btn black\"\r\n                    onClick={() => {\r\n                        setRefresh(true);\r\n                    }}\r\n                >\r\n                    Add a coupon\r\n                </button>\r\n            </div>\r\n\r\n            {refresh ? (\r\n                <>\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                            marginTop: \"24px\",\r\n                        }}\r\n                    >\r\n                        <a\r\n                            className=\"dropdown-trigger btn black\"\r\n                            href=\"#\"\r\n                            data-target=\"dropdown1\"\r\n                        >\r\n                            {fresh ? (\r\n                                <>Coupon Type: Free Shipping</>\r\n                            ) : (\r\n                                <>Coupon Type: Discount</>\r\n                            )}\r\n                        </a>\r\n                    </div>\r\n\r\n                    <ul id=\"dropdown1\" className=\"dropdown-content\">\r\n                        <li\r\n                            onClick={() => {\r\n                                setFresh(false);\r\n                            }}\r\n                        >\r\n                            discount\r\n                        </li>\r\n                        <li\r\n                            onClick={() => {\r\n                                setFresh(true);\r\n                                setDiscount(\"FREE_SHIPPING\");\r\n                            }}\r\n                        >\r\n                            free shipping\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <div className=\"row\" style={{ marginTop: \"32px\" }}>\r\n                        <div className=\"col s6\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"coupon_name\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={name}\r\n                                    onChange={e =>\r\n                                        setName(e.target.value.toLowerCase())\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"coupon_name\">Coupon Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a coupon name\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col s6\">\r\n                            {fresh ? (\r\n                                <></>\r\n                            ) : (\r\n                                <div className=\"input-field\">\r\n                                    <input\r\n                                        id=\"discount\"\r\n                                        type=\"text\"\r\n                                        className=\"validate\"\r\n                                        minLength={0}\r\n                                        maxLength={2}\r\n                                        value={discount}\r\n                                        onChange={e => {\r\n                                            if (!e.target.value) {\r\n                                                setDiscount(\"0\");\r\n                                            }\r\n                                            if (e.target.value.match(/\\d/g)) {\r\n                                                setDiscount(e.target.value);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <label htmlFor=\"discount\">\r\n                                        Discount(Percentage in Numbers)\r\n                                    </label>\r\n                                    <span\r\n                                        className=\"helper-text\"\r\n                                        data-error=\"Please enter a discount amount\"\r\n                                    ></span>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn green center-align\"\r\n                            onClick={async () => {\r\n                                if (\r\n                                    name.length === 0 ||\r\n                                    discount.length === 0\r\n                                ) {\r\n                                    if (name.length === 0) {\r\n                                        document\r\n                                            .getElementById(\"coupon_name\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n                                    if (!fresh && discount.length === 0) {\r\n                                        document\r\n                                            .getElementById(\"discount\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n                                } else {\r\n                                    if (!fresh) {\r\n                                        let tmp = await addCoupon({\r\n                                            variables: {\r\n                                                coupon_name: name,\r\n                                                discount,\r\n                                            },\r\n                                        });\r\n                                        if (!tmp!.data!.addCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html: \"Could not add coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    } else {\r\n                                        let tmp = await addCoupon({\r\n                                            variables: {\r\n                                                coupon_name: name,\r\n                                                discount: \"FREE_SHIPPING\",\r\n                                            },\r\n                                        });\r\n                                        console.log(\"tmp :>> \", tmp);\r\n                                        if (!tmp!.data!.addCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html: \"Could not add coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >\r\n                            confirm\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Coupons;\r\n","import {\r\n    useGetApiUsersQuery,\r\n    useDeleteApiUserMutation,\r\n    useAddApiUserMutation,\r\n} from \"../../generated/graphql\";\r\nimport \"../../css/table.scss\";\r\nimport { useState } from \"react\";\r\n\r\nconst EditUsers = () => {\r\n    const { data, loading, error } = useGetApiUsersQuery();\r\n    const [deleteApiUser] = useDeleteApiUserMutation();\r\n    const [addApiUser] = useAddApiUserMutation();\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <>An error has occurred</>;\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h3 className=\"white-text noselect\">Api Users</h3>\r\n                    </span>\r\n\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <div className=\"container\">\r\n                            <table className=\"striped responsive\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th></th>\r\n                                        <th>Username</th>\r\n                                        <th></th>\r\n                                        <th></th>\r\n                                    </tr>\r\n\r\n                                    {data.getApiUsers.map((_val, i) => {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td></td>\r\n                                                <td>\r\n                                                    {\r\n                                                        data.getApiUsers[i]\r\n                                                            .username\r\n                                                    }\r\n                                                </td>\r\n                                                <td>\r\n                                                    <i\r\n                                                        className=\"material-icons red-text noselect\"\r\n                                                        onClick={async () => {\r\n                                                            // delete user\r\n                                                            let tmp = await deleteApiUser(\r\n                                                                {\r\n                                                                    variables: {\r\n                                                                        uuid:\r\n                                                                            data\r\n                                                                                .getApiUsers[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .uuid,\r\n                                                                    },\r\n                                                                }\r\n                                                            );\r\n\r\n                                                            if (\r\n                                                                tmp.data\r\n                                                                    ?.deleteApiUser\r\n                                                            ) {\r\n                                                                window.location.reload();\r\n                                                            } else {\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"An Error has occured\",\r\n                                                                });\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        delete\r\n                                                    </i>\r\n                                                </td>\r\n                                                <td></td>\r\n                                            </tr>\r\n                                        );\r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col s4\">\r\n                                <div className=\"input-field\">\r\n                                    <input\r\n                                        id=\"username\"\r\n                                        type=\"text\"\r\n                                        className=\"validate\"\r\n                                        value={username}\r\n                                        onChange={e =>\r\n                                            setUsername(e.target.value)\r\n                                        }\r\n                                    />\r\n                                    <label htmlFor=\"username\">Username</label>\r\n                                    <span\r\n                                        id=\"coupon-helper\"\r\n                                        className=\"helper-text\"\r\n                                        data-error=\"Please enter a username\"\r\n                                    ></span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col s4\">\r\n                                <div className=\"input-field\">\r\n                                    <input\r\n                                        id=\"pass\"\r\n                                        type=\"text\"\r\n                                        className=\"validate\"\r\n                                        value={password}\r\n                                        onChange={e =>\r\n                                            setPassword(e.target.value)\r\n                                        }\r\n                                    />\r\n                                    <label htmlFor=\"pass\">Password</label>\r\n                                    <span\r\n                                        id=\"coupon-helper\"\r\n                                        className=\"helper-text\"\r\n                                        data-error=\"Please enter a password\"\r\n                                    ></span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col s3\">\r\n                                <button\r\n                                    style={{ width: \"100%\" }}\r\n                                    className=\"btn right footerBtn green\"\r\n                                    onClick={async () => {\r\n                                        document\r\n                                            .getElementById(\"pass\")!\r\n                                            .classList.remove(\"invalid\");\r\n                                        document\r\n                                            .getElementById(\"username\")!\r\n                                            .classList.remove(\"invalid\");\r\n                                        if (!password || !username) {\r\n                                            if (!password) {\r\n                                                document\r\n                                                    .getElementById(\"pass\")!\r\n                                                    .classList.add(\"invalid\");\r\n                                            }\r\n\r\n                                            if (!username) {\r\n                                                document\r\n                                                    .getElementById(\"username\")!\r\n                                                    .classList.add(\"invalid\");\r\n                                            }\r\n                                        } else {\r\n                                            let tmp = await addApiUser({\r\n                                                variables: {\r\n                                                    username,\r\n                                                    password,\r\n                                                },\r\n                                            });\r\n                                            if (tmp.data?.addApiUser) {\r\n                                                window.location.reload();\r\n                                            } else {\r\n                                                M.toast({\r\n                                                    html:\r\n                                                        \"An Error has occurred\",\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    Create a user\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditUsers;\r\n","import {\r\n    useGetMaintenanceQuery,\r\n    useToggleMaintenanceMutation,\r\n} from \"../../generated/graphql\";\r\n\r\nconst Maintenance = () => {\r\n    const { data, loading, error } = useGetMaintenanceQuery();\r\n    const [toggleMaintenance] = useToggleMaintenanceMutation();\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    } else if (!data || error) {\r\n        return (\r\n            <div className=\"container\">\r\n                <h5>Maintenance: ERR</h5>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"centered\" style={{ marginTop: \"32px\" }}>\r\n                <h4>\r\n                    <span className=\"switch\">\r\n                        Maintenance:{\" \"}\r\n                        {data.getMaintenance ? (\r\n                            <label>\r\n                                Off\r\n                                <input type=\"checkbox\" checked />\r\n                                <span\r\n                                    className=\"lever\"\r\n                                    onClick={async () => {\r\n                                        await toggleMaintenance();\r\n                                        window.location.reload();\r\n                                    }}\r\n                                ></span>\r\n                                On\r\n                            </label>\r\n                        ) : (\r\n                            <label>\r\n                                Off\r\n                                <input type=\"checkbox\" />\r\n                                <span\r\n                                    className=\"lever\"\r\n                                    onClick={async () => {\r\n                                        await toggleMaintenance();\r\n                                        window.location.reload();\r\n                                    }}\r\n                                ></span>\r\n                                On\r\n                            </label>\r\n                        )}\r\n                    </span>\r\n                </h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Maintenance;\r\n","import Announcements from \"./Announcements\";\r\nimport Coupons from \"./Coupons\";\r\nimport EditUsers from \"./EditUsers\";\r\nimport Maintenance from \"./Maintenance\";\r\n\r\nconst Utils = () => {\r\n    return (\r\n        <div>\r\n            <Maintenance />\r\n\r\n            <Divider />\r\n\r\n            <Coupons />\r\n\r\n            <Divider />\r\n\r\n            <Announcements />\r\n\r\n            <Divider />\r\n\r\n            <EditUsers />\r\n\r\n            <Divider />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Divider = () => {\r\n    return (\r\n        <div className=\"centered\">\r\n            <div className=\"container\" style={{ margin: 45 }}>\r\n                <div className=\"divider\" style={{ color: \"black\" }}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Utils;\r\n","import { useLocation } from \"react-router\";\r\nimport { useGetSectionsQuery } from \"../../generated/graphql\";\r\nconst Sections = () => {\r\n    const location: any = useLocation();\r\n\r\n    console.log(`location`, location);\r\n\r\n    if (!!location.state) {\r\n        if (location.state.reload) {\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const { data, loading, error } = useGetSectionsQuery();\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (error) {\r\n        M.toast({ html: `${error}` });\r\n\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <nav\r\n                className=\"z-depth-0 black-text \"\r\n                style={{ backgroundColor: \"transparent\" }}\r\n            >\r\n                <div className=\"nav-wrapper\">\r\n                    <h5\r\n                        className=\"left\"\r\n                        style={{\r\n                            marginBottom: \"48px\",\r\n                            marginLeft: \"16px\",\r\n                            marginRight: \"16px\",\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"26px\",\r\n                            color: \"#14161a\",\r\n                        }}\r\n                    >\r\n                        Sections\r\n                    </h5>\r\n                    <ul className=\"right\">\r\n                        <li>\r\n                            <a href=\"#/add-sections\">\r\n                                <i className=\"material-icons black-text\">add</i>\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n\r\n            <div className=\"products-grid\">\r\n                {!!data ? (\r\n                    data.getSections.map((_val, i) => {\r\n                        return (\r\n                            <div\r\n                                className=\"card\"\r\n                                style={{ margin: \"0px, 16px, 32px, 16px\" }}\r\n                                key={i}\r\n                            >\r\n                                <div className=\"card-image\">\r\n                                    <img src={data.getSections[i].thumbnail} />\r\n                                    <a\r\n                                        href={`#/edit-section:${data.getSections[i].section_id}`}\r\n                                        className=\"btn-floating btn-large halfway-fab large blue-grey darken-4\"\r\n                                    >\r\n                                        <i className=\"large material-icons\">\r\n                                            edit\r\n                                        </i>\r\n                                    </a>\r\n                                </div>\r\n\r\n                                <div className=\"card-content\">\r\n                                    <span className=\"card-title\">\r\n                                        {data.getSections[i].name}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })\r\n                ) : (\r\n                    <></>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sections;\r\n","import { useState } from \"react\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport Axios from \"axios\";\r\nimport { useAddSectionMutation } from \"../../generated/graphql\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nconst AddSection = () => {\r\n    const [addSection] = useAddSectionMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [imgUrl, setImgUrl] = useState(\"\");\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    const handleSubmit = async () => {\r\n        if (!name || !imgUrl) {\r\n            if (!name) {\r\n                M.toast({ html: \"Please add a Section name\" });\r\n            }\r\n            if (imgUrl) {\r\n                M.toast({ html: \"Please add a img\" });\r\n            }\r\n        } else {\r\n            let res = await addSection({\r\n                variables: {\r\n                    name,\r\n                    thumbnail: imgUrl,\r\n                },\r\n            });\r\n\r\n            if (!res.data || !res.data.addSection) {\r\n                M.toast({ html: \"An Error has occurred\" });\r\n            } else {\r\n                setRedirect(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    const addImage = async (file: any) => {\r\n        const form = new FormData();\r\n\r\n        form.append(\"api_key\", \"767632178961832\"); //get api key from cloudinary\r\n\r\n        form.append(\"file\", file);\r\n        form.append(\"tags\", `codeinfuse, medium, gist`);\r\n        form.append(\"upload_preset\", \"re5zmdqn\");\r\n        let t = (Date.now() / 1000) | 0;\r\n        form.append(\"timestamp\", `${t}`);\r\n\r\n        // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n        let res = await Axios.post(\r\n            \"https://api.cloudinary.com/v1_1/desimqzzy/image/upload\",\r\n            form,\r\n            {\r\n                headers: {\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                },\r\n            }\r\n        );\r\n        setImgUrl(res.data.secure_url);\r\n    };\r\n\r\n    if (redirect) {\r\n        return (\r\n            <Redirect to={{ pathname: \"/sections\", state: { reload: true } }} />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <h5>Add A Section</h5>\r\n            </div>\r\n\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => setName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"name\">Section Name (Required)</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a section name\"\r\n                        ></span>\r\n                    </div>\r\n                    <div className=\"container\">\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                            }}\r\n                        >\r\n                            <button\r\n                                id=\"submit-btn\"\r\n                                className=\"btn green\"\r\n                                onClick={() => {\r\n                                    document\r\n                                        .getElementById(\"submit-btn\")!\r\n                                        .classList.add(\"disabled\");\r\n                                    handleSubmit();\r\n                                }}\r\n                            >\r\n                                Submit\r\n                            </button>\r\n\r\n                            <Dropzone onDrop={async ([file]) => addImage(file)}>\r\n                                {({ getRootProps, getInputProps }) => (\r\n                                    <div {...getRootProps()}>\r\n                                        <input {...getInputProps()} />\r\n                                        <button className=\"btn black\">\r\n                                            ONLY 1 IMAGE (Required)\r\n                                        </button>\r\n                                        <br />\r\n                                        <span>Multiple images coming soon</span>\r\n                                    </div>\r\n                                )}\r\n                            </Dropzone>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n            {!imgUrl ? (\r\n                <></>\r\n            ) : (\r\n                <>\r\n                    <img src={imgUrl} alt=\"thumbnail\" />\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddSection;\r\n","import { useState } from \"react\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport { Redirect } from \"react-router\";\r\nimport {\r\n    useDeleteSectionMutation,\r\n    useGetSectionByIdQuery,\r\n    useUpdateSectionMutation,\r\n} from \"../../generated/graphql\";\r\nimport Axios from \"axios\";\r\n\r\nconst getSectionId = () => {\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        return Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        return Number(window.location.href.split(\":\")[3]);\r\n    }\r\n};\r\n\r\nconst EditSection = () => {\r\n    let section_id = getSectionId();\r\n    const [name, setName] = useState(\"\");\r\n    const [imgUrl, setImgUrl] = useState(\"\");\r\n    const [updateSection] = useUpdateSectionMutation();\r\n    const [deleteSection] = useDeleteSectionMutation();\r\n\r\n    const { data, loading, error } = useGetSectionByIdQuery({\r\n        variables: {\r\n            section_id,\r\n        },\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (error || !data) {\r\n        return (\r\n            <Redirect to={{ pathname: \"/sections\", state: { reload: true } }} />\r\n        );\r\n    }\r\n\r\n    const replaceImage = async (file: any) => {\r\n        const form = new FormData();\r\n\r\n        form.append(\"api_key\", \"767632178961832\"); //get api key from cloudinary\r\n\r\n        form.append(\"file\", file);\r\n        form.append(\"tags\", `codeinfuse, medium, gist`);\r\n        form.append(\"upload_preset\", \"re5zmdqn\");\r\n        let t = (Date.now() / 1000) | 0;\r\n        form.append(\"timestamp\", `${t}`);\r\n\r\n        // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n        let res = await Axios.post(\r\n            \"https://api.cloudinary.com/v1_1/desimqzzy/image/upload\",\r\n            form,\r\n            {\r\n                headers: {\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                },\r\n            }\r\n        );\r\n\r\n        setImgUrl(res.data.secure_url);\r\n    };\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    const handleSubmit = async () => {\r\n        //update section\r\n        let res = await updateSection({\r\n            variables: {\r\n                section_id,\r\n                name,\r\n                thumbnail: imgUrl,\r\n            },\r\n        });\r\n\r\n        if (!res.data || !res.data.updateSection) {\r\n            M.toast({ html: \"an error has occured\" });\r\n        } else {\r\n            window.location.reload();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <h5>Edit Section</h5>\r\n            </div>\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            className=\"input-field\"\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => {\r\n                                setName(e.target.value);\r\n                            }}\r\n                        />\r\n                        <label id=\"name-label\" htmlFor=\"name\">\r\n                            {data.getSectionById.name}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                    }}\r\n                >\r\n                    <button\r\n                        className=\"btn green\"\r\n                        id=\"submit-btn\"\r\n                        onClick={() => handleSubmit()}\r\n                    >\r\n                        Submit\r\n                    </button>\r\n\r\n                    <Dropzone onDrop={async ([file]) => replaceImage(file)}>\r\n                        {({ getRootProps, getInputProps }) => (\r\n                            <span {...getRootProps()}>\r\n                                <input {...getInputProps()} />\r\n                                <button className=\"btn black\" id=\"img_btn\">\r\n                                    Replace Image\r\n                                </button>\r\n                            </span>\r\n                        )}\r\n                    </Dropzone>\r\n\r\n                    <button\r\n                        className=\"btn modal-trigger red\"\r\n                        id=\"delete-button\"\r\n                        data-target=\"modal1\"\r\n                        onClick={async () => {\r\n                            let res = await deleteSection({\r\n                                variables: {\r\n                                    section_id,\r\n                                },\r\n                            });\r\n\r\n                            if (!res.data || !res.data.deleteSection) {\r\n                                M.toast({ html: \"an error occured\" });\r\n                            } else {\r\n                                window.location.reload();\r\n                            }\r\n                        }}\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n            </form>\r\n\r\n            {!imgUrl ? (\r\n                <img src={data.getSectionById.thumbnail} alt=\"thumbnail\" />\r\n            ) : (\r\n                <img src={imgUrl} alt=\"thumbnail\" />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditSection;\r\n","import { Redirect, Switch } from \"react-router\";\r\nimport { Route } from \"react-router-dom\";\r\nimport AddProducts from \"../components/Products/AddProducts\";\r\nimport EditProduct from \"../components/Products/EditProduct\";\r\nimport EditSocials from \"../components/Social/EditSocials\";\r\nimport OrderDetails from \"../components/Orders/OrderDetails\";\r\nimport Orders from \"../components/Orders/Orders\";\r\nimport Products from \"../components/Products/Products\";\r\nimport Utils from \"../components/UserUtils/Utils\";\r\nimport AuthRoute from \"./AuthRoute\";\r\nimport Sections from \"../components/Sections/Sections\";\r\nimport AddSection from \"../components/Sections/AddSection\";\r\nimport EditSection from \"../components/Sections/EditSection\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <AuthRoute exact path=\"/orders\" component={Orders} />\r\n            <AuthRoute exact path=\"/products\" component={Products} />\r\n            <AuthRoute exact path=\"/add-products\" component={AddProducts} />\r\n            <AuthRoute exact path=\"/edit-product:id\" component={EditProduct} />\r\n            <AuthRoute exact path=\"/utils\" component={Utils} />\r\n            <AuthRoute exact path=\"/edit-socials\" component={EditSocials} />\r\n            <AuthRoute exact path=\"/sections\" component={Sections} />\r\n            <AuthRoute exact path=\"/add-sections\" component={AddSection} />\r\n            <AuthRoute exact path=\"/edit-section:id\" component={EditSection} />\r\n            <AuthRoute\r\n                exact\r\n                path=\"/order-details:id\"\r\n                component={OrderDetails}\r\n            />\r\n            <Route render={() => <Redirect to=\"/products\" />} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import { useState } from \"react\";\r\nimport { useApiLoginMutation } from \"../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nimport { setAccessToken } from \"../accessToken\";\r\n\r\nconst Login = () => {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [Login] = useApiLoginMutation();\r\n    const handleSubmit = async () => {\r\n        try {\r\n            let res = await Login({\r\n                variables: {\r\n                    username,\r\n                    password,\r\n                },\r\n            });\r\n            console.log(\"res :>> \", res);\r\n            if (res && res.data) {\r\n                let tmp = res.data.apiLogin.accessToken as any;\r\n                setAccessToken(tmp!);\r\n                localStorage.setItem(\"urd\", res.data.apiLogin.refreshToken!);\r\n                window.location.reload();\r\n            }\r\n        } catch (err) {\r\n            console.log(\"err :>> \", err);\r\n            M.toast({ html: \"Failed Login\" });\r\n            M.toast({ html: \"server is likely down\" });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"login-wrapper\"\r\n            style={{\r\n                backgroundColor: \"#000\",\r\n                minHeight: \"100vh\",\r\n                minWidth: \"100vw\",\r\n            }}\r\n        >\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s12\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-content\">\r\n                                <div>\r\n                                    <h5 className=\"center-align\">Login</h5>\r\n                                    <form>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"username\"\r\n                                                    type=\"text\"\r\n                                                    value={username}\r\n                                                    onChange={e =>\r\n                                                        setUsername(\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                                <label htmlFor=\"username\">\r\n                                                    Username\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"password\"\r\n                                                    type=\"password\"\r\n                                                    value={password}\r\n                                                    onChange={e =>\r\n                                                        setPassword(\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                                <label htmlFor=\"password\">\r\n                                                    Password\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div\r\n                                            className=\"row\"\r\n                                            style={{\r\n                                                display: \"flex\",\r\n                                                justifyContent: \"center\",\r\n                                            }}\r\n                                        >\r\n                                            <button\r\n                                                className=\"btn\"\r\n                                                style={{\r\n                                                    minWidth: \"150px\",\r\n                                                    backgroundColor: \"#4285f4\",\r\n                                                    color: \"#fff\",\r\n                                                }}\r\n                                                onClick={() => handleSubmit()}\r\n                                            >\r\n                                                Login\r\n                                            </button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import { checkAuth } from \"../routes/AuthRoute\";\nimport PageWrapper from \"./PageWrapper\";\nimport Routes from \"../routes/Routes\";\nimport Login from \"./Login\";\nimport {\n    HashRouter as Router,\n    Route,\n    Redirect,\n    Switch,\n} from \"react-router-dom\";\n\nconst App = () => {\n    return (\n        <Router>\n            <div className=\"App\">\n                {checkAuth() ? (\n                    <PageWrapper children={<Routes />} />\n                ) : (\n                    <Switch>\n                        <Route exact path=\"/login\" component={Login} />\n                        <Route render={() => <Redirect to=\"/login\" />} />\n                    </Switch>\n                )}\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","let URI = \"\";\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n    URI = \"https://infinite-bayou-56493.herokuapp.com\";\r\n} else {\r\n    URI = \"http://localhost:4000\";\r\n}\r\n\r\nexport default URI;\r\n","import { useEffect, useState } from \"react\";\r\nimport { setAccessToken } from \"./accessToken\";\r\nimport App from \"./components/App\";\r\nimport URI from \"./URI\";\r\n\r\nconst AppWrapper = () => {\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        //get new accessToken & refreshToken with fetch to URI/refresh_token\r\n        let tmp = localStorage.getItem(\"urd\") as string;\r\n        fetch(`${URI}/api_refresh_token`, {\r\n            method: \"POST\",\r\n            credentials: \"include\",\r\n            headers: {\r\n                refreshToken: tmp,\r\n            },\r\n        }).then(async res => {\r\n            const { accessToken, refreshToken } = await res.json();\r\n            setAccessToken(accessToken);\r\n            localStorage.setItem(\"urd\", refreshToken);\r\n            setLoading(false);\r\n        });\r\n    });\r\n\r\n    if (loading) {\r\n        return <>loading..</>;\r\n    }\r\n\r\n    return <App />;\r\n};\r\n\r\nexport default AppWrapper;\r\n","import ReactDOM from \"react-dom\";\nimport AppWrapper from \"./AppWrapper\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport jwtDecode from \"jwt-decode\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport URI from \"./URI\";\n\nconst cache = new InMemoryCache({});\nconst requestLink = new ApolloLink(\n    (operation, forward) =>\n        new Observable(observer => {\n            let handle: any;\n            Promise.resolve(operation)\n                .then(operation => {\n                    const accessToken = getAccessToken();\n                    operation.setContext({\n                        headers: {\n                            authorization: accessToken\n                                ? `bearer ${accessToken}`\n                                : \"\",\n                        },\n                    });\n                })\n                .then(() => {\n                    handle = forward(operation).subscribe({\n                        next: observer.next.bind(observer),\n                        error: observer.error.bind(observer),\n                        complete: observer.complete.bind(observer),\n                    });\n                })\n                .catch(observer.error.bind(observer));\n\n            return () => {\n                if (handle) handle.unsubscribe();\n            };\n        })\n);\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new TokenRefreshLink({\n            accessTokenField: \"accessToken\",\n            isTokenValidOrUndefined: () => {\n                const token = getAccessToken();\n\n                if (!token) {\n                    return true;\n                }\n\n                try {\n                    const { exp } = jwtDecode(token) as any;\n                    if (Date.now() >= exp * 1000) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } catch {\n                    return false;\n                }\n            },\n            fetchAccessToken: () => {\n                return fetch(`${URI}/refresh_token`, {\n                    method: \"POST\",\n                    credentials: \"include\",\n                });\n            },\n            handleFetch: (accessToken: string) => {\n                setAccessToken(accessToken);\n            },\n            handleError: (err: any) => {\n                console.warn(\"Your refresh token is invalid, Try to relogin\");\n                console.error(err);\n            },\n        }) as any,\n        onError(({ graphQLErrors, networkError }) => {\n            console.log(graphQLErrors);\n            console.log(networkError);\n        }),\n        requestLink,\n        new HttpLink({\n            uri: `${URI}/graphql`,\n            credentials: \"include\",\n        }),\n    ]),\n    cache,\n});\n\nReactDOM.render(\n    <ApolloProvider client={client as any}>\n        <AppWrapper />\n    </ApolloProvider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}