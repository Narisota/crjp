{"version":3,"sources":["accessToken.ts","routes/AuthRoute.tsx","components/Navbar.tsx","components/PageWrapper.tsx","generated/graphql.tsx","components/AddProducts.tsx","components/Announcements.tsx","components/Coupons.tsx","components/EditProduct.tsx","components/Maintenance.tsx","components/OrderDetails.tsx","components/Orders.tsx","components/Products.tsx","routes/Routes.tsx","components/Login.tsx","components/App.tsx","URI.ts","AppWrapper.tsx","index.tsx"],"names":["accessToken","setAccessToken","s","getAccessToken","checkAuth","token","exp","jwtDecode","Date","now","AuthRoute","Component","component","rest","render","props","to","Navbar","className","style","borderBottom","display","justifyContent","id","href","PageWrapper","children","AddAnnouncementDocument","gql","AddCouponDocument","AddImgToProductDocument","AddProductDocument","ApiLoginDocument","DeleteAnnouncementDocument","DeleteCouponDocument","DeleteProductDocument","EditTrackingDocument","GetAnnouncementsDocument","GetCouponsDocument","GetMaintenanceDocument","GetOrdersDocument","GetProductDocument","GetProductsDocument","ToggleMaintenanceDocument","UpdateProductDocument","AddProducts","baseOptions","Apollo","addProduct","useAddImgToProductMutation","addImgToProduct","useState","name","setName","desc","setDesc","price","setPrice","stock","setStock","image_urls","setImage_urls","refresh","setRefresh","redirect","setRedirect","handleSubmit","a","resetBtn","document","getElementById","classList","remove","inputValidation","variables","Number","product_id","i","length","img_url","data","M","toast","html","addImages","files","form","FormData","append","t","Axios","post","headers","res","tmp","push","secure_url","pathname","state","reload","width","type","value","onChange","e","target","htmlFor","data-error","match","onClick","add","onDrop","getRootProps","getInputProps","map","_val","console","log","src","Announcements","loading","error","useAddAnnouncementMutation","ADD_ANNOUNCE","useDeleteAnnouncementMutation","DELETE_ANNOUNCE","text","setText","useEffect","AutoInit","announcements","getAnnouncements","window","location","Coupons","useAddCouponMutation","addCoupon","useDeleteCouponMutation","deleteCoupon","discount","setDiscount","fresh","setFresh","elems","querySelectorAll","Modal","init","Dropdown","getCoupons","coupon_name","marginTop","data-target","toLowerCase","minLength","maxLength","getProductId","split","EditProduct","useUpdateProductMutation","updateProduct","useDeleteProductMutation","deleteProduct","tmp_name","tmp_desc","tmp_price","tmp_stock","product","getProduct","file","then","catch","Maintenance","useToggleMaintenanceMutation","toggleMaintenance","getMaintenance","checked","OrderDetails","Orders","useEditTrackingMutation","EditTracking","tracking","setState","getOrders","reverse","JSON","parse","shipping","order","order_id","tracking_num","new_tracking_num","editTracking","products","_val2","j","quantityOrdered","order_total","toFixed","Products","useLocation","backgroundColor","marginBottom","marginLeft","marginRight","fontWeight","fontSize","color","getProducts","margin","images","maxHeight","Routes","exact","path","Login","username","setUsername","password","setPassword","apiLogin","localStorage","setItem","refreshToken","minHeight","minWidth","App","URI","AppWrapper","setLoading","getItem","fetch","method","credentials","json","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","subscribe","next","bind","complete","unsubscribe","client","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","handleFetch","handleError","err","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM"],"mappings":"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","file":"static/js/main.263a1938.chunk.js","sourcesContent":["export let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n    accessToken = s;\r\n};\r\n\r\nexport const getAccessToken = () => {\r\n    return accessToken;\r\n};\r\n","import { Route, RouteProps, Redirect } from \"react-router-dom\";\r\nimport { getAccessToken } from \"../accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = (): boolean => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token) as any;\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\ninterface IAuthRouteProps extends RouteProps {\r\n    component: any;\r\n}\r\n\r\nconst AuthRoute: React.FC<IAuthRouteProps> = ({\r\n    component: Component,\r\n    ...rest\r\n}) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            checkAuth() ? (\r\n                <Component {...props} />\r\n            ) : (\r\n                <Redirect to=\"/dashboard\" />\r\n            )\r\n        }\r\n    />\r\n);\r\nexport default AuthRoute;\r\n","const Navbar = () => {\r\n    return (\r\n        <div>\r\n            <nav\r\n                className=\"white z-depth-0\"\r\n                style={{ borderBottom: \"1px solid #dfe0e6\" }}\r\n            >\r\n                <div className=\"nav-wrapper\">\r\n                    <div\r\n                        className=\"row\"\r\n                        style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                    >\r\n                        <ul id=\"nav-mobile\" className=\"center \">\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/orders\">\r\n                                    Orders\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/products\">\r\n                                    Products\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/coupons\">\r\n                                    Coupons\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a\r\n                                    className=\"black-text\"\r\n                                    href=\"#/announcements\"\r\n                                >\r\n                                    Announcements\r\n                                </a>\r\n                            </li>\r\n\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/maintenance\">\r\n                                    Maintenance\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import \"../css/pageWrapper.scss\";\r\nimport Navbar from \"./Navbar\";\r\ninterface Props {\r\n    children?: any;\r\n}\r\n\r\nconst PageWrapper: React.FC<Props> = ({ children }) => {\r\n    return (\r\n        <div className=\"pageWrapper\">\r\n            <Navbar />\r\n            {children ? children : <></>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageWrapper;\r\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getUsersOrders: Array<GetOrdersResponse>;\n  getOrders: Array<GetOrdersResponse>;\n  getProducts: Array<ProductsWithImages>;\n  getProduct: ProductsWithImages;\n  hello: Scalars['String'];\n  getCurrUser: Users;\n  getCoupons: Array<Coupons>;\n  getAnnouncements: Array<Announcements>;\n  getMaintenance: Scalars['Boolean'];\n};\n\n\nexport type QueryGetProductArgs = {\n  product_id: Scalars['Float'];\n};\n\nexport type GetOrdersResponse = {\n  __typename?: 'GetOrdersResponse';\n  products?: Maybe<Array<OrdersProductsWithImages>>;\n  order_id: Scalars['Float'];\n  tracking_num?: Maybe<Scalars['String']>;\n  order_total?: Maybe<Scalars['Float']>;\n  coupon?: Maybe<Scalars['String']>;\n  discount?: Maybe<Scalars['String']>;\n  shipping?: Maybe<Scalars['String']>;\n  warning?: Maybe<Scalars['String']>;\n};\n\nexport type OrdersProductsWithImages = {\n  __typename?: 'OrdersProductsWithImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  org_stock?: Maybe<Scalars['Int']>;\n  exp_date?: Maybe<Scalars['String']>;\n  quantityOrdered: Scalars['Float'];\n  productSubtotal?: Maybe<Scalars['Float']>;\n  images?: Maybe<Array<Images>>;\n};\n\nexport type Images = {\n  __typename?: 'Images';\n  img_id: Scalars['Float'];\n  img_url: Scalars['String'];\n  index: Scalars['Float'];\n};\n\nexport type ProductsWithImages = {\n  __typename?: 'ProductsWithImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  org_stock?: Maybe<Scalars['Int']>;\n  exp_date?: Maybe<Scalars['String']>;\n  images?: Maybe<Array<Images>>;\n};\n\nexport type Users = {\n  __typename?: 'Users';\n  uuid: Scalars['Float'];\n  user_id?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n};\n\nexport type Coupons = {\n  __typename?: 'Coupons';\n  coupon_id: Scalars['String'];\n  coupon_name: Scalars['String'];\n  discount?: Maybe<Scalars['String']>;\n};\n\nexport type Announcements = {\n  __typename?: 'Announcements';\n  id: Scalars['String'];\n  text: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  editTracking: Scalars['Boolean'];\n  paypalCheckout: Scalars['String'];\n  addPaypalOrder: Scalars['Boolean'];\n  checkout: Scalars['String'];\n  addProduct: Scalars['String'];\n  deleteProduct: Scalars['Boolean'];\n  updateProduct: Scalars['Boolean'];\n  addImgToProduct: Scalars['Boolean'];\n  removeImgFromProduct: Scalars['Boolean'];\n  apiLogin: AuthResponse;\n  login: AuthResponse;\n  addCoupon: Scalars['Boolean'];\n  deleteCoupon: Scalars['Boolean'];\n  validateCoupon: Scalars['String'];\n  addAnnouncement: Scalars['Boolean'];\n  deleteAnnouncement: Scalars['Boolean'];\n  toggleMaintenance: Scalars['Boolean'];\n  maintenanceLogin: AuthResponse;\n};\n\n\nexport type MutationEditTrackingArgs = {\n  order_id: Scalars['Float'];\n  new_tracking_num: Scalars['String'];\n};\n\n\nexport type MutationPaypalCheckoutArgs = {\n  coupon: Scalars['String'];\n  products: Scalars['String'];\n};\n\n\nexport type MutationAddPaypalOrderArgs = {\n  purchase_units: Scalars['String'];\n  products: Scalars['String'];\n  coupon: Scalars['String'];\n  user_id: Scalars['String'];\n};\n\n\nexport type MutationCheckoutArgs = {\n  coupon: Scalars['String'];\n  billing_info: Scalars['String'];\n  shipping_info: Scalars['String'];\n  products: Scalars['String'];\n  user_id: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationAddProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationDeleteProductArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationUpdateProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  product_id: Scalars['Float'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddImgToProductArgs = {\n  product_id: Scalars['Float'];\n  img_url: Scalars['String'];\n};\n\n\nexport type MutationApiLoginArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  user_id: Scalars['String'];\n};\n\n\nexport type MutationAddCouponArgs = {\n  discount: Scalars['String'];\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationDeleteCouponArgs = {\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationValidateCouponArgs = {\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationAddAnnouncementArgs = {\n  text: Scalars['String'];\n};\n\n\nexport type MutationDeleteAnnouncementArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationMaintenanceLoginArgs = {\n  password: Scalars['String'];\n  access_id: Scalars['String'];\n};\n\nexport type AuthResponse = {\n  __typename?: 'AuthResponse';\n  accessToken?: Maybe<Scalars['String']>;\n  refreshToken?: Maybe<Scalars['String']>;\n};\n\nexport type AddAnnouncementMutationVariables = Exact<{\n  text: Scalars['String'];\n}>;\n\n\nexport type AddAnnouncementMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addAnnouncement'>\n);\n\nexport type AddCouponMutationVariables = Exact<{\n  coupon_name: Scalars['String'];\n  discount: Scalars['String'];\n}>;\n\n\nexport type AddCouponMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addCoupon'>\n);\n\nexport type AddImgToProductMutationVariables = Exact<{\n  img_url: Scalars['String'];\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type AddImgToProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addImgToProduct'>\n);\n\nexport type AddProductMutationVariables = Exact<{\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Float'];\n  stock: Scalars['Float'];\n}>;\n\n\nexport type AddProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProduct'>\n);\n\nexport type ApiLoginMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type ApiLoginMutation = (\n  { __typename?: 'Mutation' }\n  & { apiLogin: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type DeleteAnnouncementMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type DeleteAnnouncementMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteAnnouncement'>\n);\n\nexport type DeleteCouponMutationVariables = Exact<{\n  coupon_name: Scalars['String'];\n}>;\n\n\nexport type DeleteCouponMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteCoupon'>\n);\n\nexport type DeleteProductMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type DeleteProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteProduct'>\n);\n\nexport type EditTrackingMutationVariables = Exact<{\n  new_tracking_num: Scalars['String'];\n  order_id: Scalars['Float'];\n}>;\n\n\nexport type EditTrackingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'editTracking'>\n);\n\nexport type GetAnnouncementsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAnnouncementsQuery = (\n  { __typename?: 'Query' }\n  & { getAnnouncements: Array<(\n    { __typename?: 'Announcements' }\n    & Pick<Announcements, 'id' | 'text'>\n  )> }\n);\n\nexport type GetCouponsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetCouponsQuery = (\n  { __typename?: 'Query' }\n  & { getCoupons: Array<(\n    { __typename?: 'Coupons' }\n    & Pick<Coupons, 'coupon_name' | 'coupon_id' | 'discount'>\n  )> }\n);\n\nexport type GetMaintenanceQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetMaintenanceQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'getMaintenance'>\n);\n\nexport type GetOrdersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetOrdersQuery = (\n  { __typename?: 'Query' }\n  & { getOrders: Array<(\n    { __typename?: 'GetOrdersResponse' }\n    & Pick<GetOrdersResponse, 'order_id' | 'tracking_num' | 'order_total' | 'coupon' | 'discount' | 'shipping' | 'warning'>\n    & { products?: Maybe<Array<(\n      { __typename?: 'OrdersProductsWithImages' }\n      & Pick<OrdersProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date' | 'quantityOrdered' | 'productSubtotal'>\n      & { images?: Maybe<Array<(\n        { __typename?: 'Images' }\n        & Pick<Images, 'img_id' | 'img_url' | 'index'>\n      )>> }\n    )>> }\n  )> }\n);\n\nexport type GetProductQueryVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type GetProductQuery = (\n  { __typename?: 'Query' }\n  & { getProduct: (\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  ) }\n);\n\nexport type GetProductsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProductsQuery = (\n  { __typename?: 'Query' }\n  & { getProducts: Array<(\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  )> }\n);\n\nexport type ToggleMaintenanceMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ToggleMaintenanceMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'toggleMaintenance'>\n);\n\nexport type UpdateProductMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Float'];\n  stock: Scalars['Float'];\n}>;\n\n\nexport type UpdateProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateProduct'>\n);\n\n\nexport const AddAnnouncementDocument = gql`\n    mutation addAnnouncement($text: String!) {\n  addAnnouncement(text: $text)\n}\n    `;\nexport type AddAnnouncementMutationFn = Apollo.MutationFunction<AddAnnouncementMutation, AddAnnouncementMutationVariables>;\n\n/**\n * __useAddAnnouncementMutation__\n *\n * To run a mutation, you first call `useAddAnnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddAnnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addAnnouncementMutation, { data, loading, error }] = useAddAnnouncementMutation({\n *   variables: {\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useAddAnnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AddAnnouncementMutation, AddAnnouncementMutationVariables>) {\n        return Apollo.useMutation<AddAnnouncementMutation, AddAnnouncementMutationVariables>(AddAnnouncementDocument, baseOptions);\n      }\nexport type AddAnnouncementMutationHookResult = ReturnType<typeof useAddAnnouncementMutation>;\nexport type AddAnnouncementMutationResult = Apollo.MutationResult<AddAnnouncementMutation>;\nexport type AddAnnouncementMutationOptions = Apollo.BaseMutationOptions<AddAnnouncementMutation, AddAnnouncementMutationVariables>;\nexport const AddCouponDocument = gql`\n    mutation addCoupon($coupon_name: String!, $discount: String!) {\n  addCoupon(coupon_name: $coupon_name, discount: $discount)\n}\n    `;\nexport type AddCouponMutationFn = Apollo.MutationFunction<AddCouponMutation, AddCouponMutationVariables>;\n\n/**\n * __useAddCouponMutation__\n *\n * To run a mutation, you first call `useAddCouponMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCouponMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCouponMutation, { data, loading, error }] = useAddCouponMutation({\n *   variables: {\n *      coupon_name: // value for 'coupon_name'\n *      discount: // value for 'discount'\n *   },\n * });\n */\nexport function useAddCouponMutation(baseOptions?: Apollo.MutationHookOptions<AddCouponMutation, AddCouponMutationVariables>) {\n        return Apollo.useMutation<AddCouponMutation, AddCouponMutationVariables>(AddCouponDocument, baseOptions);\n      }\nexport type AddCouponMutationHookResult = ReturnType<typeof useAddCouponMutation>;\nexport type AddCouponMutationResult = Apollo.MutationResult<AddCouponMutation>;\nexport type AddCouponMutationOptions = Apollo.BaseMutationOptions<AddCouponMutation, AddCouponMutationVariables>;\nexport const AddImgToProductDocument = gql`\n    mutation addImgToProduct($img_url: String!, $product_id: Float!) {\n  addImgToProduct(img_url: $img_url, product_id: $product_id)\n}\n    `;\nexport type AddImgToProductMutationFn = Apollo.MutationFunction<AddImgToProductMutation, AddImgToProductMutationVariables>;\n\n/**\n * __useAddImgToProductMutation__\n *\n * To run a mutation, you first call `useAddImgToProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddImgToProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addImgToProductMutation, { data, loading, error }] = useAddImgToProductMutation({\n *   variables: {\n *      img_url: // value for 'img_url'\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useAddImgToProductMutation(baseOptions?: Apollo.MutationHookOptions<AddImgToProductMutation, AddImgToProductMutationVariables>) {\n        return Apollo.useMutation<AddImgToProductMutation, AddImgToProductMutationVariables>(AddImgToProductDocument, baseOptions);\n      }\nexport type AddImgToProductMutationHookResult = ReturnType<typeof useAddImgToProductMutation>;\nexport type AddImgToProductMutationResult = Apollo.MutationResult<AddImgToProductMutation>;\nexport type AddImgToProductMutationOptions = Apollo.BaseMutationOptions<AddImgToProductMutation, AddImgToProductMutationVariables>;\nexport const AddProductDocument = gql`\n    mutation addProduct($name: String!, $desc: String!, $price: Float!, $stock: Float!) {\n  addProduct(name: $name, desc: $desc, price: $price, stock: $stock)\n}\n    `;\nexport type AddProductMutationFn = Apollo.MutationFunction<AddProductMutation, AddProductMutationVariables>;\n\n/**\n * __useAddProductMutation__\n *\n * To run a mutation, you first call `useAddProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProductMutation, { data, loading, error }] = useAddProductMutation({\n *   variables: {\n *      name: // value for 'name'\n *      desc: // value for 'desc'\n *      price: // value for 'price'\n *      stock: // value for 'stock'\n *   },\n * });\n */\nexport function useAddProductMutation(baseOptions?: Apollo.MutationHookOptions<AddProductMutation, AddProductMutationVariables>) {\n        return Apollo.useMutation<AddProductMutation, AddProductMutationVariables>(AddProductDocument, baseOptions);\n      }\nexport type AddProductMutationHookResult = ReturnType<typeof useAddProductMutation>;\nexport type AddProductMutationResult = Apollo.MutationResult<AddProductMutation>;\nexport type AddProductMutationOptions = Apollo.BaseMutationOptions<AddProductMutation, AddProductMutationVariables>;\nexport const ApiLoginDocument = gql`\n    mutation apiLogin($username: String!, $password: String!) {\n  apiLogin(username: $username, password: $password) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type ApiLoginMutationFn = Apollo.MutationFunction<ApiLoginMutation, ApiLoginMutationVariables>;\n\n/**\n * __useApiLoginMutation__\n *\n * To run a mutation, you first call `useApiLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useApiLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [apiLoginMutation, { data, loading, error }] = useApiLoginMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useApiLoginMutation(baseOptions?: Apollo.MutationHookOptions<ApiLoginMutation, ApiLoginMutationVariables>) {\n        return Apollo.useMutation<ApiLoginMutation, ApiLoginMutationVariables>(ApiLoginDocument, baseOptions);\n      }\nexport type ApiLoginMutationHookResult = ReturnType<typeof useApiLoginMutation>;\nexport type ApiLoginMutationResult = Apollo.MutationResult<ApiLoginMutation>;\nexport type ApiLoginMutationOptions = Apollo.BaseMutationOptions<ApiLoginMutation, ApiLoginMutationVariables>;\nexport const DeleteAnnouncementDocument = gql`\n    mutation deleteAnnouncement($id: String!) {\n  deleteAnnouncement(id: $id)\n}\n    `;\nexport type DeleteAnnouncementMutationFn = Apollo.MutationFunction<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>;\n\n/**\n * __useDeleteAnnouncementMutation__\n *\n * To run a mutation, you first call `useDeleteAnnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteAnnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteAnnouncementMutation, { data, loading, error }] = useDeleteAnnouncementMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteAnnouncementMutation(baseOptions?: Apollo.MutationHookOptions<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>) {\n        return Apollo.useMutation<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>(DeleteAnnouncementDocument, baseOptions);\n      }\nexport type DeleteAnnouncementMutationHookResult = ReturnType<typeof useDeleteAnnouncementMutation>;\nexport type DeleteAnnouncementMutationResult = Apollo.MutationResult<DeleteAnnouncementMutation>;\nexport type DeleteAnnouncementMutationOptions = Apollo.BaseMutationOptions<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>;\nexport const DeleteCouponDocument = gql`\n    mutation deleteCoupon($coupon_name: String!) {\n  deleteCoupon(coupon_name: $coupon_name)\n}\n    `;\nexport type DeleteCouponMutationFn = Apollo.MutationFunction<DeleteCouponMutation, DeleteCouponMutationVariables>;\n\n/**\n * __useDeleteCouponMutation__\n *\n * To run a mutation, you first call `useDeleteCouponMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCouponMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCouponMutation, { data, loading, error }] = useDeleteCouponMutation({\n *   variables: {\n *      coupon_name: // value for 'coupon_name'\n *   },\n * });\n */\nexport function useDeleteCouponMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCouponMutation, DeleteCouponMutationVariables>) {\n        return Apollo.useMutation<DeleteCouponMutation, DeleteCouponMutationVariables>(DeleteCouponDocument, baseOptions);\n      }\nexport type DeleteCouponMutationHookResult = ReturnType<typeof useDeleteCouponMutation>;\nexport type DeleteCouponMutationResult = Apollo.MutationResult<DeleteCouponMutation>;\nexport type DeleteCouponMutationOptions = Apollo.BaseMutationOptions<DeleteCouponMutation, DeleteCouponMutationVariables>;\nexport const DeleteProductDocument = gql`\n    mutation deleteProduct($product_id: Float!) {\n  deleteProduct(product_id: $product_id)\n}\n    `;\nexport type DeleteProductMutationFn = Apollo.MutationFunction<DeleteProductMutation, DeleteProductMutationVariables>;\n\n/**\n * __useDeleteProductMutation__\n *\n * To run a mutation, you first call `useDeleteProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProductMutation, { data, loading, error }] = useDeleteProductMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useDeleteProductMutation(baseOptions?: Apollo.MutationHookOptions<DeleteProductMutation, DeleteProductMutationVariables>) {\n        return Apollo.useMutation<DeleteProductMutation, DeleteProductMutationVariables>(DeleteProductDocument, baseOptions);\n      }\nexport type DeleteProductMutationHookResult = ReturnType<typeof useDeleteProductMutation>;\nexport type DeleteProductMutationResult = Apollo.MutationResult<DeleteProductMutation>;\nexport type DeleteProductMutationOptions = Apollo.BaseMutationOptions<DeleteProductMutation, DeleteProductMutationVariables>;\nexport const EditTrackingDocument = gql`\n    mutation editTracking($new_tracking_num: String!, $order_id: Float!) {\n  editTracking(new_tracking_num: $new_tracking_num, order_id: $order_id)\n}\n    `;\nexport type EditTrackingMutationFn = Apollo.MutationFunction<EditTrackingMutation, EditTrackingMutationVariables>;\n\n/**\n * __useEditTrackingMutation__\n *\n * To run a mutation, you first call `useEditTrackingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditTrackingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editTrackingMutation, { data, loading, error }] = useEditTrackingMutation({\n *   variables: {\n *      new_tracking_num: // value for 'new_tracking_num'\n *      order_id: // value for 'order_id'\n *   },\n * });\n */\nexport function useEditTrackingMutation(baseOptions?: Apollo.MutationHookOptions<EditTrackingMutation, EditTrackingMutationVariables>) {\n        return Apollo.useMutation<EditTrackingMutation, EditTrackingMutationVariables>(EditTrackingDocument, baseOptions);\n      }\nexport type EditTrackingMutationHookResult = ReturnType<typeof useEditTrackingMutation>;\nexport type EditTrackingMutationResult = Apollo.MutationResult<EditTrackingMutation>;\nexport type EditTrackingMutationOptions = Apollo.BaseMutationOptions<EditTrackingMutation, EditTrackingMutationVariables>;\nexport const GetAnnouncementsDocument = gql`\n    query getAnnouncements {\n  getAnnouncements {\n    id\n    text\n  }\n}\n    `;\n\n/**\n * __useGetAnnouncementsQuery__\n *\n * To run a query within a React component, call `useGetAnnouncementsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAnnouncementsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAnnouncementsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAnnouncementsQuery(baseOptions?: Apollo.QueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n        return Apollo.useQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n      }\nexport function useGetAnnouncementsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n          return Apollo.useLazyQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n        }\nexport type GetAnnouncementsQueryHookResult = ReturnType<typeof useGetAnnouncementsQuery>;\nexport type GetAnnouncementsLazyQueryHookResult = ReturnType<typeof useGetAnnouncementsLazyQuery>;\nexport type GetAnnouncementsQueryResult = Apollo.QueryResult<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>;\nexport const GetCouponsDocument = gql`\n    query getCoupons {\n  getCoupons {\n    coupon_name\n    coupon_id\n    discount\n  }\n}\n    `;\n\n/**\n * __useGetCouponsQuery__\n *\n * To run a query within a React component, call `useGetCouponsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCouponsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCouponsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCouponsQuery(baseOptions?: Apollo.QueryHookOptions<GetCouponsQuery, GetCouponsQueryVariables>) {\n        return Apollo.useQuery<GetCouponsQuery, GetCouponsQueryVariables>(GetCouponsDocument, baseOptions);\n      }\nexport function useGetCouponsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCouponsQuery, GetCouponsQueryVariables>) {\n          return Apollo.useLazyQuery<GetCouponsQuery, GetCouponsQueryVariables>(GetCouponsDocument, baseOptions);\n        }\nexport type GetCouponsQueryHookResult = ReturnType<typeof useGetCouponsQuery>;\nexport type GetCouponsLazyQueryHookResult = ReturnType<typeof useGetCouponsLazyQuery>;\nexport type GetCouponsQueryResult = Apollo.QueryResult<GetCouponsQuery, GetCouponsQueryVariables>;\nexport const GetMaintenanceDocument = gql`\n    query getMaintenance {\n  getMaintenance\n}\n    `;\n\n/**\n * __useGetMaintenanceQuery__\n *\n * To run a query within a React component, call `useGetMaintenanceQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMaintenanceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMaintenanceQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMaintenanceQuery(baseOptions?: Apollo.QueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\n        return Apollo.useQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\n      }\nexport function useGetMaintenanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\n          return Apollo.useLazyQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\n        }\nexport type GetMaintenanceQueryHookResult = ReturnType<typeof useGetMaintenanceQuery>;\nexport type GetMaintenanceLazyQueryHookResult = ReturnType<typeof useGetMaintenanceLazyQuery>;\nexport type GetMaintenanceQueryResult = Apollo.QueryResult<GetMaintenanceQuery, GetMaintenanceQueryVariables>;\nexport const GetOrdersDocument = gql`\n    query getOrders {\n  getOrders {\n    products {\n      product_id\n      name\n      desc\n      price\n      stock\n      exp_date\n      quantityOrdered\n      productSubtotal\n      images {\n        img_id\n        img_url\n        index\n      }\n    }\n    order_id\n    tracking_num\n    order_total\n    coupon\n    discount\n    shipping\n    warning\n  }\n}\n    `;\n\n/**\n * __useGetOrdersQuery__\n *\n * To run a query within a React component, call `useGetOrdersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOrdersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetOrdersQuery(baseOptions?: Apollo.QueryHookOptions<GetOrdersQuery, GetOrdersQueryVariables>) {\n        return Apollo.useQuery<GetOrdersQuery, GetOrdersQueryVariables>(GetOrdersDocument, baseOptions);\n      }\nexport function useGetOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrdersQuery, GetOrdersQueryVariables>) {\n          return Apollo.useLazyQuery<GetOrdersQuery, GetOrdersQueryVariables>(GetOrdersDocument, baseOptions);\n        }\nexport type GetOrdersQueryHookResult = ReturnType<typeof useGetOrdersQuery>;\nexport type GetOrdersLazyQueryHookResult = ReturnType<typeof useGetOrdersLazyQuery>;\nexport type GetOrdersQueryResult = Apollo.QueryResult<GetOrdersQuery, GetOrdersQueryVariables>;\nexport const GetProductDocument = gql`\n    query getProduct($product_id: Float!) {\n  getProduct(product_id: $product_id) {\n    product_id\n    name\n    desc\n    price\n    stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductQuery__\n *\n * To run a query within a React component, call `useGetProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductQuery({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useGetProductQuery(baseOptions: Apollo.QueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n        return Apollo.useQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n      }\nexport function useGetProductLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n        }\nexport type GetProductQueryHookResult = ReturnType<typeof useGetProductQuery>;\nexport type GetProductLazyQueryHookResult = ReturnType<typeof useGetProductLazyQuery>;\nexport type GetProductQueryResult = Apollo.QueryResult<GetProductQuery, GetProductQueryVariables>;\nexport const GetProductsDocument = gql`\n    query getProducts {\n  getProducts {\n    product_id\n    name\n    desc\n    price\n    stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductsQuery__\n *\n * To run a query within a React component, call `useGetProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetProductsQuery(baseOptions?: Apollo.QueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\n        return Apollo.useQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\n      }\nexport function useGetProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\n        }\nexport type GetProductsQueryHookResult = ReturnType<typeof useGetProductsQuery>;\nexport type GetProductsLazyQueryHookResult = ReturnType<typeof useGetProductsLazyQuery>;\nexport type GetProductsQueryResult = Apollo.QueryResult<GetProductsQuery, GetProductsQueryVariables>;\nexport const ToggleMaintenanceDocument = gql`\n    mutation toggleMaintenance {\n  toggleMaintenance\n}\n    `;\nexport type ToggleMaintenanceMutationFn = Apollo.MutationFunction<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>;\n\n/**\n * __useToggleMaintenanceMutation__\n *\n * To run a mutation, you first call `useToggleMaintenanceMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleMaintenanceMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleMaintenanceMutation, { data, loading, error }] = useToggleMaintenanceMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useToggleMaintenanceMutation(baseOptions?: Apollo.MutationHookOptions<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>) {\n        return Apollo.useMutation<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>(ToggleMaintenanceDocument, baseOptions);\n      }\nexport type ToggleMaintenanceMutationHookResult = ReturnType<typeof useToggleMaintenanceMutation>;\nexport type ToggleMaintenanceMutationResult = Apollo.MutationResult<ToggleMaintenanceMutation>;\nexport type ToggleMaintenanceMutationOptions = Apollo.BaseMutationOptions<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>;\nexport const UpdateProductDocument = gql`\n    mutation updateProduct($product_id: Float!, $name: String!, $desc: String!, $price: Float!, $stock: Float!) {\n  updateProduct(\n    product_id: $product_id\n    name: $name\n    desc: $desc\n    price: $price\n    stock: $stock\n  )\n}\n    `;\nexport type UpdateProductMutationFn = Apollo.MutationFunction<UpdateProductMutation, UpdateProductMutationVariables>;\n\n/**\n * __useUpdateProductMutation__\n *\n * To run a mutation, you first call `useUpdateProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProductMutation, { data, loading, error }] = useUpdateProductMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *      name: // value for 'name'\n *      desc: // value for 'desc'\n *      price: // value for 'price'\n *      stock: // value for 'stock'\n *   },\n * });\n */\nexport function useUpdateProductMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProductMutation, UpdateProductMutationVariables>) {\n        return Apollo.useMutation<UpdateProductMutation, UpdateProductMutationVariables>(UpdateProductDocument, baseOptions);\n      }\nexport type UpdateProductMutationHookResult = ReturnType<typeof useUpdateProductMutation>;\nexport type UpdateProductMutationResult = Apollo.MutationResult<UpdateProductMutation>;\nexport type UpdateProductMutationOptions = Apollo.BaseMutationOptions<UpdateProductMutation, UpdateProductMutationVariables>;","import { useState } from \"react\";\r\nimport {\r\n    useAddImgToProductMutation,\r\n    useAddProductMutation,\r\n} from \"../generated/graphql\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport Axios from \"axios\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nconst AddProducts = () => {\r\n    const [addProduct] = useAddProductMutation();\r\n    const [addImgToProduct] = useAddImgToProductMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\");\r\n    const [stock, setStock] = useState(\"\");\r\n    const [image_urls, setImage_urls] = useState([]);\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    const handleSubmit = async () => {\r\n        let resetBtn = () => {\r\n            document.getElementById(\"submit-btn\")?.classList.remove(\"disabled\");\r\n        };\r\n        if (!name || !desc || !price || !stock) {\r\n            inputValidation(name, desc, price, stock);\r\n        } else {\r\n            try {\r\n                let product_id = await addProduct({\r\n                    variables: {\r\n                        name,\r\n                        desc,\r\n                        price: Number(price),\r\n                        stock: Number(stock),\r\n                    },\r\n                });\r\n\r\n                //ADD IMAGES TO PRODUCT\r\n                for (let i = 0; i < image_urls.length; i++) {\r\n                    await addImgToProduct({\r\n                        variables: {\r\n                            img_url: image_urls[i],\r\n                            product_id: Number(product_id.data!.addProduct),\r\n                        },\r\n                    });\r\n                }\r\n\r\n                setRedirect(true);\r\n            } catch {\r\n                M.toast({ html: \"Could not add product\" });\r\n            }\r\n        }\r\n        resetBtn();\r\n    };\r\n\r\n    const addImages = async (files: any) => {\r\n        {\r\n            for (let i = 0; i < files.length; i++) {\r\n                const form = new FormData();\r\n\r\n                form.append(\"api_key\", \"247981962584482\"); //get api key from cloudinary\r\n\r\n                form.append(\"file\", files[i]);\r\n                form.append(\"tags\", `codeinfuse, medium, gist`);\r\n                form.append(\"upload_preset\", \"re5zmdqn\");\r\n                let t = (Date.now() / 1000) | 0;\r\n                form.append(\"timestamp\", `${t}`);\r\n\r\n                // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n                let res = await Axios.post(\r\n                    \"https://api.cloudinary.com/v1_1/desimqzzy/image/upload\",\r\n                    form,\r\n                    {\r\n                        headers: {\r\n                            \"X-Requested-With\": \"XMLHttpRequest\",\r\n                        },\r\n                    }\r\n                );\r\n\r\n                let tmp: any = image_urls;\r\n                tmp.push(res.data.secure_url);\r\n                setImage_urls(tmp);\r\n            }\r\n            setRefresh(!refresh);\r\n        }\r\n    };\r\n    if (redirect) {\r\n        return (\r\n            <Redirect to={{ pathname: \"/products\", state: { reload: true } }} />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" style={{ width: \"50%\" }}>\r\n            <div className=\"row\">\r\n                <h5>Add A Product</h5>\r\n            </div>\r\n\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => setName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"name\">Name</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product name\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <textarea\r\n                            id=\"desc\"\r\n                            value={desc}\r\n                            className=\"materialize-textarea\"\r\n                            onChange={e => setDesc(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"desc\">Description</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product description\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"price\"\r\n                            type=\"text\"\r\n                            value={price}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"price\">Price</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product price\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"stock\"\r\n                            type=\"text\"\r\n                            value={stock}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"stock\">Stock</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a stock amount\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"container\">\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"space-between\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            id=\"submit-btn\"\r\n                            className=\"btn green\"\r\n                            onClick={() => {\r\n                                document\r\n                                    .getElementById(\"submit-btn\")!\r\n                                    .classList.add(\"disabled\");\r\n                                handleSubmit();\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </button>\r\n\r\n                        <Dropzone onDrop={async files => addImages(files)}>\r\n                            {({ getRootProps, getInputProps }) => (\r\n                                <div {...getRootProps()}>\r\n                                    <input {...getInputProps()} />\r\n                                    <button className=\"btn black\">\r\n                                        Add Images\r\n                                    </button>\r\n                                </div>\r\n                            )}\r\n                        </Dropzone>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n            {image_urls.length === 0 ? (\r\n                <></>\r\n            ) : (\r\n                <>\r\n                    {image_urls.map((_val, i) => {\r\n                        console.log(\"test\");\r\n                        return <img src={image_urls[i] as any} />;\r\n                    })}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\nexport default AddProducts;\r\n\r\nconst inputValidation = (name: any, desc: any, price: any, stock: any) => {\r\n    document.getElementById(\"name\")!.classList.remove(\"invalid\");\r\n    document.getElementById(\"desc\")!.classList.remove(\"invalid\");\r\n    document.getElementById(\"price\")!.classList.remove(\"invalid\");\r\n    document.getElementById(\"stock\")!.classList.remove(\"invalid\");\r\n\r\n    if (!name) {\r\n        document.getElementById(\"name\")!.classList.add(\"invalid\");\r\n    }\r\n    if (!desc) {\r\n        document.getElementById(\"desc\")!.classList.add(\"invalid\");\r\n    }\r\n    if (!price) {\r\n        document.getElementById(\"price\")!.classList.add(\"invalid\");\r\n    }\r\n    if (!stock) {\r\n        document.getElementById(\"stock\")!.classList.add(\"invalid\");\r\n    }\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useAddAnnouncementMutation,\r\n    useDeleteAnnouncementMutation,\r\n    useGetAnnouncementsQuery,\r\n} from \"../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nconst Announcements = () => {\r\n    const { data, loading, error } = useGetAnnouncementsQuery();\r\n    const [ADD_ANNOUNCE] = useAddAnnouncementMutation();\r\n    const [DELETE_ANNOUNCE] = useDeleteAnnouncementMutation();\r\n\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [text, setText] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        M.AutoInit();\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let announcements: any = data!.getAnnouncements;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"center-align\">Announcements</h1>\r\n\r\n            {announcements.length === 0 ? (\r\n                <h4 className=\"center-align\">NONE</h4>\r\n            ) : (\r\n                <>\r\n                    {announcements.map((_val: any, i: any) => {\r\n                        return (\r\n                            <div\r\n                                className=\"container\"\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                }}\r\n                            >\r\n                                <h4 className=\"center-align\">\r\n                                    {announcements[i].text}\r\n                                </h4>\r\n\r\n                                <i\r\n                                    className=\"material-icons red-text\"\r\n                                    onClick={async () => {\r\n                                        try {\r\n                                            await DELETE_ANNOUNCE({\r\n                                                variables: {\r\n                                                    id: announcements[i].id,\r\n                                                },\r\n                                            });\r\n                                            window.location.reload();\r\n                                        } catch {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html:\r\n                                                    \"Could not add Announcement\",\r\n                                            });\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    delete\r\n                                </i>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </>\r\n            )}\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                <button\r\n                    className=\"btn black\"\r\n                    onClick={() => {\r\n                        setRefresh(true);\r\n                    }}\r\n                >\r\n                    Add an Announcement\r\n                </button>\r\n            </div>\r\n            {refresh ? (\r\n                <>\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"text_1\"\r\n                            className=\"validate\"\r\n                            type=\"text\"\r\n                            value={text}\r\n                            onChange={e => setText(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"text_1\">Announcement Text</label>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn green\"\r\n                            onClick={async () => {\r\n                                if (!!text) {\r\n                                    try {\r\n                                        await ADD_ANNOUNCE({\r\n                                            variables: {\r\n                                                text,\r\n                                            },\r\n                                        });\r\n\r\n                                        window.location.reload();\r\n                                    } catch {\r\n                                        M.toast({\r\n                                            html: \"An error occured\",\r\n                                        });\r\n                                        M.toast({\r\n                                            html: \"Could not add Announcement\",\r\n                                        });\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >\r\n                            Confirm\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Announcements;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useAddCouponMutation,\r\n    useDeleteCouponMutation,\r\n    useGetCouponsQuery,\r\n} from \"../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nconst Coupons = () => {\r\n    const { data, loading, error } = useGetCouponsQuery();\r\n    const [addCoupon] = useAddCouponMutation();\r\n    const [deleteCoupon] = useDeleteCouponMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [discount, setDiscount] = useState(\"\");\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [fresh, setFresh] = useState(false);\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n\r\n        M.AutoInit();\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"center-align\">Active Coupons</h1>\r\n            {data?.getCoupons.length === 0 ? (\r\n                <h4 className=\"center-align\">NONE</h4>\r\n            ) : (\r\n                <>\r\n                    {data?.getCoupons.map((_val, i) => {\r\n                        return (\r\n                            <>\r\n                                <div\r\n                                    className=\"container\"\r\n                                    style={{\r\n                                        display: \"flex\",\r\n                                        justifyContent: \"space-between\",\r\n                                    }}\r\n                                >\r\n                                    <h4 className=\"center-align\">\r\n                                        {data.getCoupons[i].coupon_name}\r\n                                    </h4>\r\n\r\n                                    <h5 className=\"center-align\">\r\n                                        -\r\n                                        {data.getCoupons[i].discount\r\n                                            ? data.getCoupons[i].discount\r\n                                            : 0}\r\n                                        %\r\n                                    </h5>\r\n                                    <i\r\n                                        className=\"material-icons red-text\"\r\n                                        onClick={async () => {\r\n                                            let tmp = await deleteCoupon({\r\n                                                variables: {\r\n                                                    coupon_name:\r\n                                                        data.getCoupons[i]\r\n                                                            .coupon_name,\r\n                                                },\r\n                                            });\r\n\r\n                                            if (!tmp!.data!.deleteCoupon) {\r\n                                                M.toast({\r\n                                                    html: \"An error occured\",\r\n                                                });\r\n\r\n                                                M.toast({\r\n                                                    html:\r\n                                                        \"Could not delete coupon\",\r\n                                                });\r\n                                            } else {\r\n                                                window.location.reload();\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        delete\r\n                                    </i>\r\n                                </div>\r\n                            </>\r\n                        );\r\n                    })}\r\n                </>\r\n            )}\r\n\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                <button\r\n                    className=\"btn black\"\r\n                    onClick={() => {\r\n                        setRefresh(true);\r\n                    }}\r\n                >\r\n                    Add a coupon\r\n                </button>\r\n            </div>\r\n\r\n            {refresh ? (\r\n                <>\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                            marginTop: \"24px\",\r\n                        }}\r\n                    >\r\n                        <a\r\n                            className=\"dropdown-trigger btn black\"\r\n                            href=\"#\"\r\n                            data-target=\"dropdown1\"\r\n                        >\r\n                            {fresh ? (\r\n                                <>Coupon Type: Free Shipping</>\r\n                            ) : (\r\n                                <>Coupon Type: Discount</>\r\n                            )}\r\n                        </a>\r\n                    </div>\r\n\r\n                    <ul id=\"dropdown1\" className=\"dropdown-content\">\r\n                        <li\r\n                            onClick={() => {\r\n                                setFresh(false);\r\n                            }}\r\n                        >\r\n                            discount\r\n                        </li>\r\n                        <li\r\n                            onClick={() => {\r\n                                setFresh(true);\r\n                                setDiscount(\"FREE_SHIPPING\");\r\n                            }}\r\n                        >\r\n                            free shipping\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <div className=\"row\" style={{ marginTop: \"32px\" }}>\r\n                        <div className=\"col s6\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"coupon_name\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={name}\r\n                                    onChange={e =>\r\n                                        setName(e.target.value.toLowerCase())\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"coupon_name\">Coupon Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a coupon name\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col s6\">\r\n                            {fresh ? (\r\n                                <></>\r\n                            ) : (\r\n                                <div className=\"input-field\">\r\n                                    <input\r\n                                        id=\"discount\"\r\n                                        type=\"text\"\r\n                                        className=\"validate\"\r\n                                        minLength={0}\r\n                                        maxLength={2}\r\n                                        value={discount}\r\n                                        onChange={e => {\r\n                                            if (!e.target.value) {\r\n                                                setDiscount(\"0\");\r\n                                            }\r\n                                            if (e.target.value.match(/\\d/g)) {\r\n                                                setDiscount(e.target.value);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <label htmlFor=\"discount\">\r\n                                        Discount(Percentage in Numbers)\r\n                                    </label>\r\n                                    <span\r\n                                        className=\"helper-text\"\r\n                                        data-error=\"Please enter a discount amount\"\r\n                                    ></span>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn green center-align\"\r\n                            onClick={async () => {\r\n                                console.log(\r\n                                    \"discount.length :>> \",\r\n                                    discount.length\r\n                                );\r\n                                if (\r\n                                    name.length === 0 ||\r\n                                    discount.length === 0\r\n                                ) {\r\n                                    if (name.length === 0) {\r\n                                        document\r\n                                            .getElementById(\"coupon_name\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n                                    if (!fresh && discount.length === 0) {\r\n                                        document\r\n                                            .getElementById(\"discount\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n                                } else {\r\n                                    if (!fresh) {\r\n                                        let tmp = await addCoupon({\r\n                                            variables: {\r\n                                                coupon_name: name,\r\n                                                discount,\r\n                                            },\r\n                                        });\r\n                                        if (!tmp!.data!.addCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html: \"Could not add coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    } else {\r\n                                        let tmp = await addCoupon({\r\n                                            variables: {\r\n                                                coupon_name: name,\r\n                                                discount: \"FREE_SHIPPING\",\r\n                                            },\r\n                                        });\r\n                                        console.log(\"tmp :>> \", tmp);\r\n                                        if (!tmp!.data!.addCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html: \"Could not add coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >\r\n                            confirm\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Coupons;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useDeleteProductMutation,\r\n    useGetProductQuery,\r\n    useUpdateProductMutation,\r\n} from \"../generated/graphql\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\n\r\nconst EditProduct = () => {\r\n    let product_id = getProductId();\r\n\r\n    const { data, loading, error } = useGetProductQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    const [updateProduct] = useUpdateProductMutation();\r\n    const [deleteProduct] = useDeleteProductMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\"); //price in cents\r\n    const [stock, setStock] = useState(\"\");\r\n    const image_urls = [\"\"];\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (error) {\r\n        return <Redirect to=\"#/products\" />;\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        //only send values which were updated if state is empty product.prop is sent instead\r\n        let tmp_name = name,\r\n            tmp_desc = desc,\r\n            tmp_price = Number(price),\r\n            tmp_stock = Number(stock);\r\n\r\n        if (!name) {\r\n            tmp_name = product.name;\r\n        }\r\n\r\n        if (!desc) {\r\n            tmp_desc = product.desc;\r\n        }\r\n\r\n        if (!price) {\r\n            tmp_price = product.price;\r\n        }\r\n\r\n        if (!stock) {\r\n            tmp_stock = product.stock;\r\n        }\r\n\r\n        await updateProduct({\r\n            variables: {\r\n                product_id,\r\n                name: tmp_name,\r\n                desc: tmp_desc,\r\n                price: tmp_price,\r\n                stock: tmp_stock,\r\n            },\r\n        });\r\n\r\n        return <Redirect to=\"#/products\" />;\r\n    };\r\n\r\n    let product = data!.getProduct;\r\n\r\n    return (\r\n        <div className=\"container\" style={{ width: \"50%\" }}>\r\n            <div className=\"row\">\r\n                <h5>Edit Product</h5>\r\n            </div>\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => {\r\n                                setName(e.target.value as any);\r\n                            }}\r\n                        />\r\n                        <label id=\"name-label\" htmlFor=\"name\">\r\n                            {product.name}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <textarea\r\n                            id=\"desc\"\r\n                            value={desc}\r\n                            className=\"materialize-textarea\"\r\n                            onChange={e => setDesc(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"desc\">{product.desc}</label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"price\"\r\n                            type=\"text\"\r\n                            value={price}\r\n                            onChange={e => setPrice(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"price\">\r\n                            ${Number(product.price / 100)}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"stock\"\r\n                            type=\"text\"\r\n                            value={stock}\r\n                            onChange={e => setStock(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"stock\">{product.stock}</label>\r\n                    </div>\r\n                </div>\r\n\r\n                <button className=\"btn green\" onClick={() => handleSubmit()}>\r\n                    Submit\r\n                </button>\r\n\r\n                <a className=\"btn modal-trigger red right\" href=\"#modal1\">\r\n                    Delete\r\n                </a>\r\n\r\n                <Dropzone\r\n                    onDrop={async ([file]) => {\r\n                        const form = new FormData();\r\n\r\n                        form.append(\"api_key\", \"247981962584482\"); //get api key from cloudinary\r\n\r\n                        form.append(\"file\", file);\r\n                        form.append(\"tags\", `codeinfuse, medium, gist`);\r\n                        form.append(\"upload_preset\", \"re5zmdqn\");\r\n                        let t = (Date.now() / 1000) | 0;\r\n                        form.append(\"timestamp\", `${t}`);\r\n\r\n                        // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n                        Axios.post(\r\n                            \"https://api.cloudinary.com/v1_1/cantrelate-jp/image/upload\",\r\n                            form,\r\n                            {\r\n                                headers: {\r\n                                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                                },\r\n                            }\r\n                        )\r\n                            .then(res => {\r\n                                //Save image url to add to DB on submit\r\n                                image_urls.push(res.data.secure_url);\r\n                            })\r\n                            .catch(error => {\r\n                                M.toast({\r\n                                    html:\r\n                                        \"An Error occured, please try again later.\",\r\n                                });\r\n                                console.log(\"error\", error);\r\n                            });\r\n                    }}\r\n                >\r\n                    {({ getRootProps, getInputProps }) => (\r\n                        <div {...getRootProps()}>\r\n                            <input {...getInputProps()} />\r\n                            Click me to add a photo\r\n                        </div>\r\n                    )}\r\n                </Dropzone>\r\n            </form>\r\n\r\n            <div id=\"modal1\" className=\"modal\">\r\n                <div className=\"modal-content\">\r\n                    <h4>Are you sure you want to delete this product?</h4>\r\n                    <p>This will also delete all of the users orders.</p>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                    <button\r\n                        id=\"delete-button\"\r\n                        className=\"btn right red\"\r\n                        onClick={async () => {\r\n                            document\r\n                                .getElementById(\"delete-button\")\r\n                                ?.classList.add(\"disabled\");\r\n                            let tmp = await deleteProduct({\r\n                                variables: { product_id },\r\n                            });\r\n                            if (tmp.data?.deleteProduct) {\r\n                                window.location.reload();\r\n                            } else {\r\n                                M.toast({ html: \"Could not delete product\" });\r\n                                document\r\n                                    .getElementById(\"delete-button\")\r\n                                    ?.classList.remove(\"disabled\");\r\n                            }\r\n                        }}\r\n                    >\r\n                        Delete Product\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst getProductId = (): number => {\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        return Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        return Number(window.location.href.split(\":\")[3]);\r\n    }\r\n};\r\n\r\nexport default EditProduct;\r\n","import {\r\n    useGetMaintenanceQuery,\r\n    useToggleMaintenanceMutation,\r\n} from \"../generated/graphql\";\r\n\r\nconst Maintenance = () => {\r\n    const { data, loading, error } = useGetMaintenanceQuery();\r\n    const [toggleMaintenance] = useToggleMaintenanceMutation();\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    } else if (!data || error) {\r\n        return (\r\n            <div className=\"container\">\r\n                <h5>Maintenance: ERR</h5>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"centered\" style={{ marginTop: \"32px\" }}>\r\n                <h4>\r\n                    <span className=\"switch\">\r\n                        Maintenance:{\" \"}\r\n                        {data.getMaintenance ? (\r\n                            <label>\r\n                                Off\r\n                                <input type=\"checkbox\" checked />\r\n                                <span\r\n                                    className=\"lever\"\r\n                                    onClick={async () => {\r\n                                        await toggleMaintenance();\r\n                                        window.location.reload();\r\n                                    }}\r\n                                ></span>\r\n                                On\r\n                            </label>\r\n                        ) : (\r\n                            <label>\r\n                                Off\r\n                                <input type=\"checkbox\" />\r\n                                <span\r\n                                    className=\"lever\"\r\n                                    onClick={async () => {\r\n                                        await toggleMaintenance();\r\n                                        window.location.reload();\r\n                                    }}\r\n                                ></span>\r\n                                On\r\n                            </label>\r\n                        )}\r\n                    </span>\r\n                </h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Maintenance;\r\n","const OrderDetails = () => {\r\n    return <div>Coming Soon</div>;\r\n};\r\n\r\nexport default OrderDetails;\r\n","import { useState } from \"react\";\r\nimport {\r\n    useGetOrdersQuery,\r\n    useEditTrackingMutation,\r\n} from \"../generated/graphql\";\r\n\r\nconst Orders = () => {\r\n    const { data, loading, error } = useGetOrdersQuery();\r\n    const [EditTracking] = useEditTrackingMutation();\r\n\r\n    const [state, setState] = useState({ tracking: [] as any[] });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    data.getOrders.reverse();\r\n    console.log(\r\n        \"JSON.stringify(data.) :>> \",\r\n        JSON.parse(data!.getOrders[7]!.shipping!)\r\n    );\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Order ID</th>\r\n                        <th>Tracking Number</th>\r\n                        <th>Products Ordered</th>\r\n                        <th>Order Total</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {data!.getOrders.map((_val, i) => {\r\n                        let order: any = data?.getOrders[i];\r\n                        return (\r\n                            <tr>\r\n                                <td>{order?.order_id}</td>\r\n                                <td>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col s7\">\r\n                                            <div className=\"row\">\r\n                                                <div className=\"input-field\">\r\n                                                    <input\r\n                                                        id={`tracking-${i}`}\r\n                                                        type=\"text\"\r\n                                                        value={\r\n                                                            state.tracking[i]\r\n                                                        }\r\n                                                        onChange={e => {\r\n                                                            let tmp: any[] =\r\n                                                                state.tracking;\r\n                                                            tmp[i] =\r\n                                                                e.target.value;\r\n                                                            setState({\r\n                                                                ...state,\r\n                                                                tracking: tmp,\r\n                                                            });\r\n                                                        }}\r\n                                                    />\r\n                                                    <label\r\n                                                        htmlFor={`tracking-${i}`}\r\n                                                    >\r\n                                                        {order?.tracking_num ? (\r\n                                                            <>\r\n                                                                {\r\n                                                                    order.tracking_num\r\n                                                                }\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            <>NONE</>\r\n                                                        )}\r\n                                                    </label>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div\r\n                                            className=\"col s4 offset-s1\"\r\n                                            style={{\r\n                                                marginTop: \"25px\",\r\n                                            }}\r\n                                        >\r\n                                            <button\r\n                                                className=\"btn black\"\r\n                                                onClick={async () => {\r\n                                                    if (state.tracking[i]) {\r\n                                                        let tmp = await EditTracking(\r\n                                                            {\r\n                                                                variables: {\r\n                                                                    order_id:\r\n                                                                        order.order_id,\r\n                                                                    new_tracking_num:\r\n                                                                        state\r\n                                                                            .tracking[\r\n                                                                            i\r\n                                                                        ],\r\n                                                                },\r\n                                                            }\r\n                                                        );\r\n\r\n                                                        if (!!tmp) {\r\n                                                            if (\r\n                                                                tmp.data\r\n                                                                    ?.editTracking\r\n                                                            ) {\r\n                                                                window.location.reload();\r\n                                                            } else {\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"Failed\",\r\n                                                                });\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"Contact me on discord\",\r\n                                                                });\r\n                                                            }\r\n                                                        } else {\r\n                                                            M.toast({\r\n                                                                html: \"Failed\",\r\n                                                            });\r\n                                                            M.toast({\r\n                                                                html:\r\n                                                                    \"Contact me on discord\",\r\n                                                            });\r\n                                                        }\r\n                                                    } else {\r\n                                                        console.log(\r\n                                                            \"undefined\"\r\n                                                        );\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                Submit\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </td>\r\n                                <td>\r\n                                    {order?.products!.map(\r\n                                        (_val2: any, j: any) => {\r\n                                            return (\r\n                                                <div className=\"row\">\r\n                                                    {order.products[j].name} x{\" \"}\r\n                                                    {\r\n                                                        order.products[j]\r\n                                                            .quantityOrdered\r\n                                                    }\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                    )}\r\n                                </td>\r\n\r\n                                <td>\r\n                                    $\r\n                                    {Number(order.order_total / 100).toFixed(2)}\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <a\r\n                                        href={`#/order-details:${order.order_id}`}\r\n                                    >\r\n                                        See Details\r\n                                    </a>\r\n                                </td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Orders;\r\n","import { useGetProductsQuery } from \"../generated/graphql\";\r\nimport \"../css/products.scss\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst Products = () => {\r\n    const location: any = useLocation();\r\n    if (!!location.state) {\r\n        if (location.state.reload) {\r\n            window.location.reload();\r\n        }\r\n    }\r\n    const { data, loading, error } = useGetProductsQuery();\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"data\", data);\r\n\r\n    return (\r\n        <div className=\"container\" style={{ marginTop: \"50px\" }}>\r\n            <nav\r\n                className=\"z-depth-0 black-text \"\r\n                style={{ backgroundColor: \"transparent\" }}\r\n            >\r\n                <div className=\"nav-wrapper\">\r\n                    <h5\r\n                        className=\"left\"\r\n                        style={{\r\n                            marginBottom: \"48px\",\r\n                            marginLeft: \"16px\",\r\n                            marginRight: \"16px\",\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"26px\",\r\n                            color: \"#14161a\",\r\n                        }}\r\n                    >\r\n                        Products\r\n                    </h5>\r\n                    <ul className=\"right\">\r\n                        <li>\r\n                            <a href=\"#/add-products\">\r\n                                <i className=\"material-icons black-text\">add</i>\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n\r\n            <div className=\"products-grid\">\r\n                {data?.getProducts.map((_val, i) => {\r\n                    let product: any = data.getProducts[i];\r\n                    return (\r\n                        <div\r\n                            className=\"card\"\r\n                            style={{ margin: \"0px 16px 32px 16px\" }}\r\n                            key={i}\r\n                        >\r\n                            {/* image here */}\r\n                            <div className=\"card-image\">\r\n                                {!product.images[0].img_url ? (\r\n                                    <img src=\"https://materializecss.com/images/sample-1.jpg\" />\r\n                                ) : (\r\n                                    <img\r\n                                        src={product.images[0].img_url}\r\n                                        style={{ maxHeight: \"280px\" }}\r\n                                    />\r\n                                )}\r\n                                <a\r\n                                    href={`#/edit-product:${product.product_id}`}\r\n                                    className=\"btn-floating btn-large halfway-fab large blue-grey darken-4\"\r\n                                >\r\n                                    <i className=\" large material-icons\">\r\n                                        edit\r\n                                    </i>\r\n                                </a>\r\n                            </div>\r\n\r\n                            <div className=\"card-content\">\r\n                                <span className=\"card-title\">\r\n                                    {product.name}\r\n                                </span>\r\n                                <p className=\"product-price\">\r\n                                    ${Number(product.price / 100).toFixed(2)}\r\n                                </p>\r\n                                <p>{product.desc}</p>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Products;\r\n","import { Redirect, Switch } from \"react-router\";\r\nimport { Route } from \"react-router-dom\";\r\nimport AddProducts from \"../components/AddProducts\";\r\nimport Announcements from \"../components/Announcements\";\r\nimport Coupons from \"../components/Coupons\";\r\nimport EditProduct from \"../components/EditProduct\";\r\nimport Maintenance from \"../components/Maintenance\";\r\nimport OrderDetails from \"../components/OrderDetails\";\r\nimport Orders from \"../components/Orders\";\r\nimport Products from \"../components/Products\";\r\nimport AuthRoute from \"./AuthRoute\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <AuthRoute exact path=\"/orders\" component={Orders} />\r\n            <AuthRoute exact path=\"/products\" component={Products} />\r\n            <AuthRoute exact path=\"/add-products\" component={AddProducts} />\r\n            <AuthRoute exact path=\"/edit-product:id\" component={EditProduct} />\r\n            <AuthRoute exact path=\"/coupons\" component={Coupons} />\r\n            <AuthRoute exact path=\"/announcements\" component={Announcements} />\r\n            <AuthRoute exact path=\"/maintenance\" component={Maintenance} />\r\n            <AuthRoute\r\n                exact\r\n                path=\"/order-details:id\"\r\n                component={OrderDetails}\r\n            />\r\n            <Route render={() => <Redirect to=\"/products\" />} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import { useState } from \"react\";\r\nimport { useApiLoginMutation } from \"../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nimport { setAccessToken } from \"../accessToken\";\r\n\r\nconst Login = () => {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [Login] = useApiLoginMutation();\r\n    const handleSubmit = async () => {\r\n        try {\r\n            let res = await Login({\r\n                variables: {\r\n                    username,\r\n                    password,\r\n                },\r\n            });\r\n            console.log(\"res :>> \", res);\r\n            if (res && res.data) {\r\n                let tmp = res.data.apiLogin.accessToken as any;\r\n                setAccessToken(tmp!);\r\n                localStorage.setItem(\"urd\", res.data.apiLogin.refreshToken!);\r\n                window.location.reload();\r\n            }\r\n        } catch (err) {\r\n            M.toast({ html: \"Failed Login\" });\r\n            M.toast({ html: \"server is likely down\" });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"login-wrapper\"\r\n            style={{\r\n                backgroundColor: \"#000\",\r\n                minHeight: \"100vh\",\r\n                minWidth: \"100vw\",\r\n            }}\r\n        >\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s12\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-content\">\r\n                                <div>\r\n                                    <h5 className=\"center-align\">Login</h5>\r\n                                    <form>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"username\"\r\n                                                    type=\"text\"\r\n                                                    value={username}\r\n                                                    onChange={e =>\r\n                                                        setUsername(\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                                <label htmlFor=\"username\">\r\n                                                    Username\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"password\"\r\n                                                    type=\"password\"\r\n                                                    value={password}\r\n                                                    onChange={e =>\r\n                                                        setPassword(\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                                <label htmlFor=\"password\">\r\n                                                    Password\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div\r\n                                            className=\"row\"\r\n                                            style={{\r\n                                                display: \"flex\",\r\n                                                justifyContent: \"center\",\r\n                                            }}\r\n                                        >\r\n                                            <button\r\n                                                className=\"btn\"\r\n                                                style={{\r\n                                                    minWidth: \"150px\",\r\n                                                    backgroundColor: \"#4285f4\",\r\n                                                    color: \"#fff\",\r\n                                                }}\r\n                                                onClick={() => handleSubmit()}\r\n                                            >\r\n                                                Login\r\n                                            </button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import { checkAuth } from \"../routes/AuthRoute\";\nimport PageWrapper from \"./PageWrapper\";\nimport Routes from \"../routes/Routes\";\nimport Login from \"./Login\";\nimport {\n    HashRouter as Router,\n    Route,\n    Redirect,\n    Switch,\n} from \"react-router-dom\";\n\nconst App = () => {\n    return (\n        <Router>\n            <div className=\"App\">\n                {checkAuth() ? (\n                    <PageWrapper children={<Routes />} />\n                ) : (\n                    <Switch>\n                        <Route exact path=\"/login\" component={Login} />\n                        <Route render={() => <Redirect to=\"/login\" />} />\n                    </Switch>\n                )}\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","let URI = \"\";\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n    URI = \"https://shrouded-plains-70355.herokuapp.com\";\r\n} else {\r\n    URI = \"http://localhost:4000\";\r\n}\r\n\r\nexport default URI;\r\n","import { useEffect, useState } from \"react\";\r\nimport { setAccessToken } from \"./accessToken\";\r\nimport App from \"./components/App\";\r\nimport URI from \"./URI\";\r\n\r\nconst AppWrapper = () => {\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        //get new accessToken & refreshToken with fetch to URI/refresh_token\r\n        let tmp = localStorage.getItem(\"urd\") as string;\r\n        fetch(`${URI}/api_refresh_token`, {\r\n            method: \"POST\",\r\n            credentials: \"include\",\r\n            headers: {\r\n                refreshToken: tmp,\r\n            },\r\n        }).then(async res => {\r\n            const { accessToken, refreshToken } = await res.json();\r\n            setAccessToken(accessToken);\r\n            localStorage.setItem(\"urd\", refreshToken);\r\n            setLoading(false);\r\n        });\r\n    });\r\n\r\n    if (loading) {\r\n        return <>loading..</>;\r\n    }\r\n\r\n    return <App />;\r\n};\r\n\r\nexport default AppWrapper;\r\n","import ReactDOM from \"react-dom\";\nimport AppWrapper from \"./AppWrapper\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport jwtDecode from \"jwt-decode\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport URI from \"./URI\";\n\nconst cache = new InMemoryCache({});\nconst requestLink = new ApolloLink(\n    (operation, forward) =>\n        new Observable(observer => {\n            let handle: any;\n            Promise.resolve(operation)\n                .then(operation => {\n                    const accessToken = getAccessToken();\n                    operation.setContext({\n                        headers: {\n                            authorization: accessToken\n                                ? `bearer ${accessToken}`\n                                : \"\",\n                        },\n                    });\n                })\n                .then(() => {\n                    handle = forward(operation).subscribe({\n                        next: observer.next.bind(observer),\n                        error: observer.error.bind(observer),\n                        complete: observer.complete.bind(observer),\n                    });\n                })\n                .catch(observer.error.bind(observer));\n\n            return () => {\n                if (handle) handle.unsubscribe();\n            };\n        })\n);\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new TokenRefreshLink({\n            accessTokenField: \"accessToken\",\n            isTokenValidOrUndefined: () => {\n                const token = getAccessToken();\n\n                if (!token) {\n                    return true;\n                }\n\n                try {\n                    const { exp } = jwtDecode(token) as any;\n                    if (Date.now() >= exp * 1000) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } catch {\n                    return false;\n                }\n            },\n            fetchAccessToken: () => {\n                return fetch(`${URI}/refresh_token`, {\n                    method: \"POST\",\n                    credentials: \"include\",\n                });\n            },\n            handleFetch: (accessToken: string) => {\n                setAccessToken(accessToken);\n            },\n            handleError: (err: any) => {\n                console.warn(\"Your refresh token is invalid, Try to relogin\");\n                console.error(err);\n            },\n        }) as any,\n\n        onError(({ graphQLErrors, networkError }) => {\n            console.log(graphQLErrors);\n            console.log(networkError);\n        }),\n        requestLink,\n        new HttpLink({\n            uri: `${URI}/graphql`,\n            credentials: \"include\",\n        }),\n    ]),\n    cache,\n});\n\nReactDOM.render(\n    <ApolloProvider client={client as any}>\n        <AppWrapper />\n    </ApolloProvider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}